
johnson.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007844  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00087844  00087844  0000f844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a1c  20070000  0008784c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a358  20070a20  00088270  00010a20  2**3
                  ALLOC
  4 .stack        00002000  2007ad78  000925c8  00010a20  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010a1c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010a45  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001ccb8  00000000  00000000  00010aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004dd6  00000000  00000000  0002d758  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00009dbf  00000000  00000000  0003252e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000011c8  00000000  00000000  0003c2ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001020  00000000  00000000  0003d4b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001f7b4  00000000  00000000  0003e4d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001e19b  00000000  00000000  0005dc89  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006b0ea  00000000  00000000  0007be24  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003628  00000000  00000000  000e6f10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007cd78 	.word	0x2007cd78
   80004:	000830c5 	.word	0x000830c5
   80008:	000830c1 	.word	0x000830c1
   8000c:	000830c1 	.word	0x000830c1
   80010:	000830c1 	.word	0x000830c1
   80014:	000830c1 	.word	0x000830c1
   80018:	000830c1 	.word	0x000830c1
	...
   8002c:	00080871 	.word	0x00080871
   80030:	000830c1 	.word	0x000830c1
   80034:	00000000 	.word	0x00000000
   80038:	000808ed 	.word	0x000808ed
   8003c:	00080929 	.word	0x00080929
   80040:	000830c1 	.word	0x000830c1
   80044:	000830c1 	.word	0x000830c1
   80048:	000830c1 	.word	0x000830c1
   8004c:	000830c1 	.word	0x000830c1
   80050:	000830c1 	.word	0x000830c1
   80054:	000830c1 	.word	0x000830c1
   80058:	000830c1 	.word	0x000830c1
   8005c:	000830c1 	.word	0x000830c1
   80060:	000830c1 	.word	0x000830c1
   80064:	000830c1 	.word	0x000830c1
   80068:	00000000 	.word	0x00000000
   8006c:	00082f31 	.word	0x00082f31
   80070:	00082f45 	.word	0x00082f45
   80074:	00082f59 	.word	0x00082f59
   80078:	00082f6d 	.word	0x00082f6d
	...
   80084:	00082785 	.word	0x00082785
   80088:	000830c1 	.word	0x000830c1
   8008c:	000830c1 	.word	0x000830c1
   80090:	000830c1 	.word	0x000830c1
   80094:	000830c1 	.word	0x000830c1
   80098:	000830c1 	.word	0x000830c1
   8009c:	000830c1 	.word	0x000830c1
   800a0:	000830c1 	.word	0x000830c1
   800a4:	00000000 	.word	0x00000000
   800a8:	000830c1 	.word	0x000830c1
   800ac:	00080219 	.word	0x00080219
   800b0:	000830c1 	.word	0x000830c1
   800b4:	000830c1 	.word	0x000830c1
   800b8:	000830c1 	.word	0x000830c1
   800bc:	000830c1 	.word	0x000830c1
   800c0:	000830c1 	.word	0x000830c1
   800c4:	000830c1 	.word	0x000830c1
   800c8:	000830c1 	.word	0x000830c1
   800cc:	000830c1 	.word	0x000830c1
   800d0:	000830c1 	.word	0x000830c1
   800d4:	000830c1 	.word	0x000830c1
   800d8:	000830c1 	.word	0x000830c1
   800dc:	000830c1 	.word	0x000830c1
   800e0:	000830c1 	.word	0x000830c1
   800e4:	000830c1 	.word	0x000830c1
   800e8:	000830c1 	.word	0x000830c1
   800ec:	000830c1 	.word	0x000830c1
   800f0:	000830c1 	.word	0x000830c1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070a20 	.word	0x20070a20
   80110:	00000000 	.word	0x00000000
   80114:	0008784c 	.word	0x0008784c

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	0008784c 	.word	0x0008784c
   80144:	20070a24 	.word	0x20070a24
   80148:	0008784c 	.word	0x0008784c
   8014c:	00000000 	.word	0x00000000

00080150 <delay_driver_init>:

#include "asf.h"
#include "delay.h"
#include "pin_mapper.h"

int delay_driver_init(void){
   80150:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC1);	/* power on the peripheral clock for timers */
   80152:	201c      	movs	r0, #28
   80154:	4b08      	ldr	r3, [pc, #32]	; (80178 <delay_driver_init+0x28>)
   80156:	4798      	blx	r3
	tc_init(TC0,1,0);				/* Enable timer block 0, channel 1, TCLK1 och capturemode */
   80158:	4c08      	ldr	r4, [pc, #32]	; (8017c <delay_driver_init+0x2c>)
   8015a:	4620      	mov	r0, r4
   8015c:	2101      	movs	r1, #1
   8015e:	2200      	movs	r2, #0
   80160:	4b07      	ldr	r3, [pc, #28]	; (80180 <delay_driver_init+0x30>)
   80162:	4798      	blx	r3
	tc_set_block_mode(TC0,1);
   80164:	4620      	mov	r0, r4
   80166:	2101      	movs	r1, #1
   80168:	4b06      	ldr	r3, [pc, #24]	; (80184 <delay_driver_init+0x34>)
   8016a:	4798      	blx	r3
	tc_stop(TC0,1);					/* making sure the timer does not run  */
   8016c:	4620      	mov	r0, r4
   8016e:	2101      	movs	r1, #1
   80170:	4b05      	ldr	r3, [pc, #20]	; (80188 <delay_driver_init+0x38>)
   80172:	4798      	blx	r3
	return 0;						/* evertyhing is ok, typical response */
}
   80174:	2000      	movs	r0, #0
   80176:	bd10      	pop	{r4, pc}
   80178:	0008306d 	.word	0x0008306d
   8017c:	40080000 	.word	0x40080000
   80180:	0008074d 	.word	0x0008074d
   80184:	00080769 	.word	0x00080769
   80188:	00080779 	.word	0x00080779

0008018c <edge_detection>:
	
	ioport_set_pin_level(pin_mapper(13), 0);
	new_sample = 1;
}

void edge_detection(void) {
   8018c:	b510      	push	{r4, lr}
	uint32_t pulse_width_us;

	/* Was it rising edge? start the timer */
	if (pio_get(PIOD, PIO_TYPE_PIO_INPUT, PIO_PD8)) {
   8018e:	4811      	ldr	r0, [pc, #68]	; (801d4 <edge_detection+0x48>)
   80190:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80194:	f44f 7280 	mov.w	r2, #256	; 0x100
   80198:	4b0f      	ldr	r3, [pc, #60]	; (801d8 <edge_detection+0x4c>)
   8019a:	4798      	blx	r3
   8019c:	b120      	cbz	r0, 801a8 <edge_detection+0x1c>
		/* Start TC to measure pulse width */
		tc_start(TC0,2);
   8019e:	480f      	ldr	r0, [pc, #60]	; (801dc <edge_detection+0x50>)
   801a0:	2102      	movs	r1, #2
   801a2:	4b0f      	ldr	r3, [pc, #60]	; (801e0 <edge_detection+0x54>)
   801a4:	4798      	blx	r3
   801a6:	bd10      	pop	{r4, pc}
	}
	/* Falling edge, stop timer */
	else {
		pulse_width_us = tc_read_cv(TC0, 2) / 42;
   801a8:	4c0c      	ldr	r4, [pc, #48]	; (801dc <edge_detection+0x50>)
   801aa:	4620      	mov	r0, r4
   801ac:	2102      	movs	r1, #2
   801ae:	4b0d      	ldr	r3, [pc, #52]	; (801e4 <edge_detection+0x58>)
   801b0:	4798      	blx	r3
   801b2:	0840      	lsrs	r0, r0, #1
   801b4:	4b0c      	ldr	r3, [pc, #48]	; (801e8 <edge_detection+0x5c>)
   801b6:	fba3 2300 	umull	r2, r3, r3, r0
   801ba:	0898      	lsrs	r0, r3, #2
		/* Pulse width proportionate against pulse width / 58, see HC-SR04 datasheet */
		last_sample = pulse_width_us / 58;
   801bc:	4b0b      	ldr	r3, [pc, #44]	; (801ec <edge_detection+0x60>)
   801be:	fba3 2300 	umull	r2, r3, r3, r0
   801c2:	095b      	lsrs	r3, r3, #5
   801c4:	4a0a      	ldr	r2, [pc, #40]	; (801f0 <edge_detection+0x64>)
   801c6:	6013      	str	r3, [r2, #0]
		tc_stop(TC0, 2);
   801c8:	4620      	mov	r0, r4
   801ca:	2102      	movs	r1, #2
   801cc:	4b09      	ldr	r3, [pc, #36]	; (801f4 <edge_detection+0x68>)
   801ce:	4798      	blx	r3
   801d0:	bd10      	pop	{r4, pc}
   801d2:	bf00      	nop
   801d4:	400e1400 	.word	0x400e1400
   801d8:	00082c11 	.word	0x00082c11
   801dc:	40080000 	.word	0x40080000
   801e0:	00080771 	.word	0x00080771
   801e4:	00080781 	.word	0x00080781
   801e8:	30c30c31 	.word	0x30c30c31
   801ec:	8d3dcb09 	.word	0x8d3dcb09
   801f0:	20070a40 	.word	0x20070a40
   801f4:	00080779 	.word	0x00080779

000801f8 <hcsr04_sample_ready>:

static volatile int last_sample = 0;
static volatile int new_sample = 0;

int hcsr04_sample_ready(void) {
	return new_sample;
   801f8:	4b01      	ldr	r3, [pc, #4]	; (80200 <hcsr04_sample_ready+0x8>)
   801fa:	6818      	ldr	r0, [r3, #0]
}
   801fc:	4770      	bx	lr
   801fe:	bf00      	nop
   80200:	20070a3c 	.word	0x20070a3c

00080204 <hcsr04_get_distance>:

int hcsr04_get_distance(void) {
	new_sample = 0;
   80204:	2200      	movs	r2, #0
   80206:	4b02      	ldr	r3, [pc, #8]	; (80210 <hcsr04_get_distance+0xc>)
   80208:	601a      	str	r2, [r3, #0]
	return last_sample;
   8020a:	4b02      	ldr	r3, [pc, #8]	; (80214 <hcsr04_get_distance+0x10>)
   8020c:	6818      	ldr	r0, [r3, #0]
}
   8020e:	4770      	bx	lr
   80210:	20070a3c 	.word	0x20070a3c
   80214:	20070a40 	.word	0x20070a40

00080218 <TC0_Handler>:

void TC0_Handler(void)
{
   80218:	b530      	push	{r4, r5, lr}
   8021a:	b083      	sub	sp, #12
	ioport_set_pin_level(pin_mapper(13), 1);
   8021c:	200d      	movs	r0, #13
   8021e:	4d21      	ldr	r5, [pc, #132]	; (802a4 <TC0_Handler+0x8c>)
   80220:	47a8      	blx	r5
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   80222:	0943      	lsrs	r3, r0, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80224:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80228:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8022c:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   8022e:	f000 001f 	and.w	r0, r0, #31
   80232:	2401      	movs	r4, #1
   80234:	fa04 f200 	lsl.w	r2, r4, r0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80238:	631a      	str	r2, [r3, #48]	; 0x30
	volatile uint32_t ul_dummy;

	/* Clear status bit to acknowledge interrupt */
	ul_dummy = tc_get_status(TC0, 0);		//The compare bit is cleared by reading the register, manual p. 915
   8023a:	481b      	ldr	r0, [pc, #108]	; (802a8 <TC0_Handler+0x90>)
   8023c:	2100      	movs	r1, #0
   8023e:	4b1b      	ldr	r3, [pc, #108]	; (802ac <TC0_Handler+0x94>)
   80240:	4798      	blx	r3
   80242:	9001      	str	r0, [sp, #4]
	/* Avoid compiler warning */
	UNUSED(ul_dummy);
   80244:	9b01      	ldr	r3, [sp, #4]
	
	/* Send TRIG pulse for starting sample */
	ioport_set_pin_level(pin_mapper(TRIG_PIN_DUE), 1);
   80246:	2009      	movs	r0, #9
   80248:	47a8      	blx	r5
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   8024a:	0943      	lsrs	r3, r0, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8024c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80250:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80254:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   80256:	f000 001f 	and.w	r0, r0, #31
   8025a:	fa04 f200 	lsl.w	r2, r4, r0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8025e:	631a      	str	r2, [r3, #48]	; 0x30
	delay_us(9); /* Pulse specified to be 10 us wide */
   80260:	2036      	movs	r0, #54	; 0x36
   80262:	4b13      	ldr	r3, [pc, #76]	; (802b0 <TC0_Handler+0x98>)
   80264:	4798      	blx	r3
	ioport_set_pin_level(pin_mapper(TRIG_PIN_DUE), 0);
   80266:	2009      	movs	r0, #9
   80268:	47a8      	blx	r5
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   8026a:	0943      	lsrs	r3, r0, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8026c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80270:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80274:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   80276:	f000 001f 	and.w	r0, r0, #31
   8027a:	fa04 f200 	lsl.w	r2, r4, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8027e:	635a      	str	r2, [r3, #52]	; 0x34
	
	ioport_set_pin_level(pin_mapper(13), 0);
   80280:	200d      	movs	r0, #13
   80282:	47a8      	blx	r5
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   80284:	0943      	lsrs	r3, r0, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80286:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8028a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8028e:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   80290:	f000 001f 	and.w	r0, r0, #31
   80294:	fa04 f200 	lsl.w	r2, r4, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80298:	635a      	str	r2, [r3, #52]	; 0x34
	new_sample = 1;
   8029a:	4b06      	ldr	r3, [pc, #24]	; (802b4 <TC0_Handler+0x9c>)
   8029c:	601c      	str	r4, [r3, #0]
}
   8029e:	b003      	add	sp, #12
   802a0:	bd30      	pop	{r4, r5, pc}
   802a2:	bf00      	nop
   802a4:	0008274d 	.word	0x0008274d
   802a8:	40080000 	.word	0x40080000
   802ac:	00080799 	.word	0x00080799
   802b0:	20070001 	.word	0x20070001
   802b4:	20070a3c 	.word	0x20070a3c

000802b8 <hcsr04_init>:
	pio_enable_interrupt(PIOD, PIO_PD8);
	NVIC_EnableIRQ(PIOD_IRQn);
}


void hcsr04_init(void) {
   802b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   802ba:	b083      	sub	sp, #12
*/

static void timer_sample_init(void)
{
	/* Configure PMC */
	pmc_enable_periph_clk(ID_TC0);
   802bc:	201b      	movs	r0, #27
   802be:	4d24      	ldr	r5, [pc, #144]	; (80350 <hcsr04_init+0x98>)
   802c0:	47a8      	blx	r5

	tc_init(TC0, 0, 0 | TC_CMR_CPCTRG);			//Timer_clock_1 - MCK/2 - 42 MHz
   802c2:	4c24      	ldr	r4, [pc, #144]	; (80354 <hcsr04_init+0x9c>)
   802c4:	4620      	mov	r0, r4
   802c6:	2100      	movs	r1, #0
   802c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   802cc:	4f22      	ldr	r7, [pc, #136]	; (80358 <hcsr04_init+0xa0>)
   802ce:	47b8      	blx	r7
	tc_write_rc(TC0, 0, 4200000);				//4 200 000 corresponds to fs = 10 Hz
   802d0:	4620      	mov	r0, r4
   802d2:	2100      	movs	r1, #0
   802d4:	4a21      	ldr	r2, [pc, #132]	; (8035c <hcsr04_init+0xa4>)
   802d6:	4b22      	ldr	r3, [pc, #136]	; (80360 <hcsr04_init+0xa8>)
   802d8:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   802da:	4e22      	ldr	r6, [pc, #136]	; (80364 <hcsr04_init+0xac>)
   802dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   802e0:	6033      	str	r3, [r6, #0]

	/* Configure and enable interrupt on RC compare */
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
   802e2:	4620      	mov	r0, r4
   802e4:	2100      	movs	r1, #0
   802e6:	2210      	movs	r2, #16
   802e8:	4b1f      	ldr	r3, [pc, #124]	; (80368 <hcsr04_init+0xb0>)
   802ea:	4798      	blx	r3
	
	tc_start(TC0, 0);
   802ec:	4620      	mov	r0, r4
   802ee:	2100      	movs	r1, #0
   802f0:	4b1e      	ldr	r3, [pc, #120]	; (8036c <hcsr04_init+0xb4>)
   802f2:	4798      	blx	r3
}

static void timer_measure_init(void) {
	/* power on the peripheral clock for timers */
	pmc_enable_periph_clk(ID_TC2);
   802f4:	201d      	movs	r0, #29
   802f6:	47a8      	blx	r5

	tc_init(TC0,2,0);				/* Enable timer block 1, channel 3, TCLK1 (MCK/2) och capturemode */
   802f8:	4620      	mov	r0, r4
   802fa:	2102      	movs	r1, #2
   802fc:	2200      	movs	r2, #0
   802fe:	47b8      	blx	r7
	tc_set_block_mode(TC0,2);
   80300:	4620      	mov	r0, r4
   80302:	2102      	movs	r1, #2
   80304:	4b1a      	ldr	r3, [pc, #104]	; (80370 <hcsr04_init+0xb8>)
   80306:	4798      	blx	r3
	tc_stop(TC0, 2);				/* making sure the timer does not run  */
   80308:	4620      	mov	r0, r4
   8030a:	2102      	movs	r1, #2
   8030c:	4b19      	ldr	r3, [pc, #100]	; (80374 <hcsr04_init+0xbc>)
   8030e:	4798      	blx	r3
/*
* Enable interrupt to be triggered on rising/falling edge on input pin
*/
static void echo_init_pin_interrupts(void) {
	/* Enable Clock for PIOB - needed for sampling falling edge */
	pmc_enable_periph_clk(ID_PIOD);
   80310:	200e      	movs	r0, #14
   80312:	47a8      	blx	r5

	/* Set specific pin to use as input */
	pio_set_input(PIOD, PIO_PD8, PIO_PULLUP);
   80314:	f504 24c2 	add.w	r4, r4, #397312	; 0x61000
   80318:	f504 6480 	add.w	r4, r4, #1024	; 0x400
   8031c:	4620      	mov	r0, r4
   8031e:	f44f 7180 	mov.w	r1, #256	; 0x100
   80322:	2201      	movs	r2, #1
   80324:	4b14      	ldr	r3, [pc, #80]	; (80378 <hcsr04_init+0xc0>)
   80326:	4798      	blx	r3

	/* Unfortunately we can only have one interrupt handler per pin */
	pio_handler_set(PIOD, ID_PIOD, PIO_PD8, PIO_IT_EDGE, edge_detection);
   80328:	4b14      	ldr	r3, [pc, #80]	; (8037c <hcsr04_init+0xc4>)
   8032a:	9300      	str	r3, [sp, #0]
   8032c:	4620      	mov	r0, r4
   8032e:	210e      	movs	r1, #14
   80330:	f44f 7280 	mov.w	r2, #256	; 0x100
   80334:	2340      	movs	r3, #64	; 0x40
   80336:	4d12      	ldr	r5, [pc, #72]	; (80380 <hcsr04_init+0xc8>)
   80338:	47a8      	blx	r5

	/* Enable Interrupt Handling in NVIC and in PIO */
	pio_enable_interrupt(PIOD, PIO_PD8);
   8033a:	4620      	mov	r0, r4
   8033c:	f44f 7180 	mov.w	r1, #256	; 0x100
   80340:	4b10      	ldr	r3, [pc, #64]	; (80384 <hcsr04_init+0xcc>)
   80342:	4798      	blx	r3
   80344:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   80348:	6033      	str	r3, [r6, #0]
	timer_sample_init();
	/* Enable another timer to measure pulse width using capture mode */
	timer_measure_init();
	/* Enable the interrupts for measuring pulse width on ECHO */
	echo_init_pin_interrupts();
}
   8034a:	b003      	add	sp, #12
   8034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8034e:	bf00      	nop
   80350:	0008306d 	.word	0x0008306d
   80354:	40080000 	.word	0x40080000
   80358:	0008074d 	.word	0x0008074d
   8035c:	00401640 	.word	0x00401640
   80360:	00080789 	.word	0x00080789
   80364:	e000e100 	.word	0xe000e100
   80368:	00080791 	.word	0x00080791
   8036c:	00080771 	.word	0x00080771
   80370:	00080769 	.word	0x00080769
   80374:	00080779 	.word	0x00080779
   80378:	00082c69 	.word	0x00082c69
   8037c:	0008018d 	.word	0x0008018d
   80380:	00082ec5 	.word	0x00082ec5
   80384:	00082cf5 	.word	0x00082cf5

00080388 <Twi_master_init>:
/* this function initiates the master Due
* TWI1 are used for the master
* enables TWI pios
*/
	 
void Twi_master_init(Twi* pTWI){
   80388:	b510      	push	{r4, lr}
   8038a:	4604      	mov	r4, r0
	pmc_enable_periph_clk(ID_TWI1); /* power the clock for the TWI with pmc */
   8038c:	2017      	movs	r0, #23
   8038e:	4b14      	ldr	r3, [pc, #80]	; (803e0 <Twi_master_init+0x58>)
   80390:	4798      	blx	r3
	PIOB->PIO_PDR|= (PIO_PB12)|(PIO_PB13);	/* Enable TWI pios */
   80392:	4a14      	ldr	r2, [pc, #80]	; (803e4 <Twi_master_init+0x5c>)
   80394:	6853      	ldr	r3, [r2, #4]
   80396:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
   8039a:	6053      	str	r3, [r2, #4]
	//PIOA->PIO_PDR|= (PIO_PA18)|(PIO_PA17);	/* Enable TWI pios */
	pTWI->TWI_CR = (0x1u << 7);				// TWIn software reset
   8039c:	2380      	movs	r3, #128	; 0x80
   8039e:	6023      	str	r3, [r4, #0]
	pTWI->TWI_RHR;							// Flush reception buffer
   803a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
	/* Set Master Disable bit and Slave Disable bit */
	pTWI->TWI_CR = TWI_CR_MSDIS;
   803a2:	2308      	movs	r3, #8
   803a4:	6023      	str	r3, [r4, #0]
	pTWI->TWI_CR = TWI_CR_SVDIS;
   803a6:	2320      	movs	r3, #32
   803a8:	6023      	str	r3, [r4, #0]
	pTWI->TWI_CR |= (0x1u << 2);			/* Set Master Enable bit */
   803aa:	6823      	ldr	r3, [r4, #0]
   803ac:	f043 0304 	orr.w	r3, r3, #4
   803b0:	6023      	str	r3, [r4, #0]
	pTWI->TWI_MMR |= TWI_MMR_DADR(unoAddress);//device address
   803b2:	6863      	ldr	r3, [r4, #4]
   803b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   803b8:	6063      	str	r3, [r4, #4]
	pTWI->TWI_PTCR |= (0x1u << 0)|(0x1u << 8);//Receiver/transmitter Transfer Enable
   803ba:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   803be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   803c2:	f043 0301 	orr.w	r3, r3, #1
   803c6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	pTWI->TWI_IDR = ~0UL;					/* Disable TWI interrupts */
   803ca:	f04f 33ff 	mov.w	r3, #4294967295
   803ce:	62a3      	str	r3, [r4, #40]	; 0x28
	pTWI->TWI_CWGR |= I2C_SPEED;
   803d0:	6923      	ldr	r3, [r4, #16]
   803d2:	f443 33c3 	orr.w	r3, r3, #99840	; 0x18600
   803d6:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
   803da:	6123      	str	r3, [r4, #16]
   803dc:	bd10      	pop	{r4, pc}
   803de:	bf00      	nop
   803e0:	0008306d 	.word	0x0008306d
   803e4:	400e1000 	.word	0x400e1000

000803e8 <I2C_mk_addr>:
 */
 uint32_t I2C_mk_addr(const uint8_t *addr, int len)
 {
	uint32_t val;

	if (len == 0)
   803e8:	460a      	mov	r2, r1
   803ea:	b159      	cbz	r1, 80404 <I2C_mk_addr+0x1c>
	return 0;

	val = addr[0];
   803ec:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
   803ee:	2901      	cmp	r1, #1
		val <<= 8;
		val |= addr[1];
   803f0:	bfc4      	itt	gt
   803f2:	7841      	ldrbgt	r1, [r0, #1]
   803f4:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	}
	if (len > 2) {
   803f8:	2a02      	cmp	r2, #2
   803fa:	dd05      	ble.n	80408 <I2C_mk_addr+0x20>
		val <<= 8;
		val |= addr[2];
   803fc:	7880      	ldrb	r0, [r0, #2]
   803fe:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
   80402:	4770      	bx	lr
 uint32_t I2C_mk_addr(const uint8_t *addr, int len)
 {
	uint32_t val;

	if (len == 0)
	return 0;
   80404:	2000      	movs	r0, #0
   80406:	4770      	bx	lr
   80408:	4618      	mov	r0, r3
	if (len > 2) {
		val <<= 8;
		val |= addr[2];
	}
	return val;
 }
   8040a:	4770      	bx	lr

0008040c <I2C_master_read>:
}
/*this function read a packet from the positionsystem
* and saves the packet to un array 
*/
uint32_t I2C_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
   8040c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80410:	4605      	mov	r5, r0
   80412:	460f      	mov	r7, r1
	printf("welcome\n");
   80414:	4833      	ldr	r0, [pc, #204]	; (804e4 <I2C_master_read+0xd8>)
   80416:	4b34      	ldr	r3, [pc, #208]	; (804e8 <I2C_master_read+0xdc>)
   80418:	4798      	blx	r3
	uint32_t status;
	uint32_t cnt = p_packet->length;
   8041a:	68fc      	ldr	r4, [r7, #12]
	uint8_t *buffer = p_packet->buffer;
   8041c:	68be      	ldr	r6, [r7, #8]
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
   8041e:	2c00      	cmp	r4, #0
   80420:	d042      	beq.n	804a8 <I2C_master_read+0x9c>
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   80422:	2100      	movs	r1, #0
   80424:	6069      	str	r1, [r5, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
	((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   80426:	687b      	ldr	r3, [r7, #4]
   80428:	021b      	lsls	r3, r3, #8
   8042a:	f403 7340 	and.w	r3, r3, #768	; 0x300
   8042e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   80432:	7c3b      	ldrb	r3, [r7, #16]
   80434:	041b      	lsls	r3, r3, #16
   80436:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   8043a:	4313      	orrs	r3, r2
   8043c:	606b      	str	r3, [r5, #4]
	((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
	TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   8043e:	60e9      	str	r1, [r5, #12]
	p_twi->TWI_IADR = I2C_mk_addr(p_packet->addr, p_packet->addr_length);
   80440:	4638      	mov	r0, r7
   80442:	6879      	ldr	r1, [r7, #4]
   80444:	4b29      	ldr	r3, [pc, #164]	; (804ec <I2C_master_read+0xe0>)
   80446:	4798      	blx	r3
   80448:	60e8      	str	r0, [r5, #12]

	/* Send a START condition */
	if (cnt == 1) {
   8044a:	2c01      	cmp	r4, #1
   8044c:	d104      	bne.n	80458 <I2C_master_read+0x4c>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   8044e:	2303      	movs	r3, #3
   80450:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
   80452:	f04f 0e01 	mov.w	lr, #1
   80456:	e033      	b.n	804c0 <I2C_master_read+0xb4>
		} else {
		p_twi->TWI_CR = TWI_CR_START;
   80458:	2301      	movs	r3, #1
   8045a:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
   8045c:	f04f 0e00 	mov.w	lr, #0
   80460:	e02e      	b.n	804c0 <I2C_master_read+0xb4>
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
			stop_sent = 1;
		}

		if (!(status & TWI_SR_RXRDY)) {
   80462:	460a      	mov	r2, r1
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   80464:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
   80466:	f413 7f80 	tst.w	r3, #256	; 0x100
   8046a:	d120      	bne.n	804ae <I2C_master_read+0xa2>
			return TWI_RECEIVE_NACK;
		}

		if (!timeout--) {
   8046c:	1e51      	subs	r1, r2, #1
   8046e:	b30a      	cbz	r2, 804b4 <I2C_master_read+0xa8>
			return TWI_ERROR_TIMEOUT;
		}
		
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
   80470:	2c01      	cmp	r4, #1
   80472:	d106      	bne.n	80482 <I2C_master_read+0x76>
   80474:	f1be 0f00 	cmp.w	lr, #0
   80478:	d12f      	bne.n	804da <I2C_master_read+0xce>
			p_twi->TWI_CR = TWI_CR_STOP;
   8047a:	f8c5 8000 	str.w	r8, [r5]
			stop_sent = 1;
   8047e:	46e6      	mov	lr, ip
   80480:	e02b      	b.n	804da <I2C_master_read+0xce>
		}

		if (!(status & TWI_SR_RXRDY)) {
   80482:	f013 0f02 	tst.w	r3, #2
   80486:	d005      	beq.n	80494 <I2C_master_read+0x88>
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   80488:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8048a:	7033      	strb	r3, [r6, #0]

		cnt--;
   8048c:	3c01      	subs	r4, #1
		}

		if (!(status & TWI_SR_RXRDY)) {
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;
   8048e:	3601      	adds	r6, #1

		cnt--;
		timeout = TWI_TIMEOUT;
   80490:	463a      	mov	r2, r7
   80492:	e000      	b.n	80496 <I2C_master_read+0x8a>
   80494:	460a      	mov	r2, r1
		} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
   80496:	2c00      	cmp	r4, #0
   80498:	d1e4      	bne.n	80464 <I2C_master_read+0x58>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   8049a:	6a2b      	ldr	r3, [r5, #32]
   8049c:	f013 0f01 	tst.w	r3, #1
   804a0:	d0fb      	beq.n	8049a <I2C_master_read+0x8e>
	}

	p_twi->TWI_SR;
   804a2:	6a2b      	ldr	r3, [r5, #32]

	return TWI_SUCCESS;
   804a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t stop_sent = 0;
	uint32_t timeout = TWI_TIMEOUT;;
	
	/* Check argument */
	if (cnt == 0) {
		return TWI_INVALID_ARGUMENT;
   804a8:	2001      	movs	r0, #1
   804aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   804ae:	2005      	movs	r0, #5
   804b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}

		if (!timeout--) {
			return TWI_ERROR_TIMEOUT;
   804b4:	2009      	movs	r0, #9
   804b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
   804ba:	2005      	movs	r0, #5
   804bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
		status = p_twi->TWI_SR;
   804c0:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
   804c2:	f413 7080 	ands.w	r0, r3, #256	; 0x100
   804c6:	d1f8      	bne.n	804ba <I2C_master_read+0xae>
   804c8:	f247 512f 	movw	r1, #29999	; 0x752f
			continue;
		}
		*buffer++ = p_twi->TWI_RHR;

		cnt--;
		timeout = TWI_TIMEOUT;
   804cc:	f247 5730 	movw	r7, #30000	; 0x7530
			return TWI_ERROR_TIMEOUT;
		}
		
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
			p_twi->TWI_CR = TWI_CR_STOP;
   804d0:	f04f 0802 	mov.w	r8, #2
			stop_sent = 1;
   804d4:	f04f 0c01 	mov.w	ip, #1
   804d8:	e7ca      	b.n	80470 <I2C_master_read+0x64>
		}

		if (!(status & TWI_SR_RXRDY)) {
   804da:	f013 0f02 	tst.w	r3, #2
   804de:	d0c0      	beq.n	80462 <I2C_master_read+0x56>
   804e0:	e7d2      	b.n	80488 <I2C_master_read+0x7c>
   804e2:	bf00      	nop
   804e4:	00087660 	.word	0x00087660
   804e8:	000846e9 	.word	0x000846e9
   804ec:	000803e9 	.word	0x000803e9

000804f0 <get_pos>:
	.chip = unoAddress,		// Adress to Mega kort
	.buffer = array, // where to save packet
	.length =10,	//packet length
};

struct point get_pos(void){
   804f0:	b082      	sub	sp, #8
	coordinates.y = array[9]*2;
	/* Mock, replace later */
	coordinates.x = 0;
	coordinates.y = 0;
	return coordinates;
};
   804f2:	2000      	movs	r0, #0
   804f4:	b002      	add	sp, #8
   804f6:	4770      	bx	lr

000804f8 <get_box>:

struct point get_box(void){
   804f8:	b082      	sub	sp, #8
	coordinates.y = array[1]*2;
	/* Mock, replace later */
	coordinates.x = 50;
	coordinates.y = 50;
	return coordinates;
};
   804fa:	f04f 1032 	mov.w	r0, #3276850	; 0x320032
   804fe:	b002      	add	sp, #8
   80500:	4770      	bx	lr
   80502:	bf00      	nop

00080504 <get_ball>:

struct point get_ball(void){
   80504:	b082      	sub	sp, #8
	coordinates.y = array[5]*2;
	/* Mock, replace later */
	coordinates.x = 300;
	coordinates.y = 300;
	return coordinates;
};
   80506:	4801      	ldr	r0, [pc, #4]	; (8050c <get_ball+0x8>)
   80508:	b002      	add	sp, #8
   8050a:	4770      	bx	lr
   8050c:	012c012c 	.word	0x012c012c

00080510 <get_cube>:

struct point get_cube(void){
   80510:	b082      	sub	sp, #8
	coordinates.y = array[3]*2;
	/* Mock, replace later */
	coordinates.x = 300;
	coordinates.y = 300;
	return coordinates;
};
   80512:	4801      	ldr	r0, [pc, #4]	; (80518 <get_cube+0x8>)
   80514:	b002      	add	sp, #8
   80516:	4770      	bx	lr
   80518:	012c012c 	.word	0x012c012c

0008051c <update_positions>:

void update_positions(void){
   8051c:	b508      	push	{r3, lr}
	I2C_master_read(TWI1, &packet_pos);
   8051e:	4802      	ldr	r0, [pc, #8]	; (80528 <update_positions+0xc>)
   80520:	4902      	ldr	r1, [pc, #8]	; (8052c <update_positions+0x10>)
   80522:	4b03      	ldr	r3, [pc, #12]	; (80530 <update_positions+0x14>)
   80524:	4798      	blx	r3
   80526:	bd08      	pop	{r3, pc}
   80528:	40090000 	.word	0x40090000
   8052c:	20070138 	.word	0x20070138
   80530:	0008040d 	.word	0x0008040d

00080534 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
   80534:	b9a8      	cbnz	r0, 80562 <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8053a:	460c      	mov	r4, r1
   8053c:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8053e:	2a00      	cmp	r2, #0
   80540:	dd0a      	ble.n	80558 <_read+0x24>
   80542:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80544:	4e08      	ldr	r6, [pc, #32]	; (80568 <_read+0x34>)
   80546:	4d09      	ldr	r5, [pc, #36]	; (8056c <_read+0x38>)
   80548:	6830      	ldr	r0, [r6, #0]
   8054a:	4621      	mov	r1, r4
   8054c:	682b      	ldr	r3, [r5, #0]
   8054e:	4798      	blx	r3
		ptr++;
   80550:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80552:	42bc      	cmp	r4, r7
   80554:	d1f8      	bne.n	80548 <_read+0x14>
   80556:	e001      	b.n	8055c <_read+0x28>
   80558:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   8055c:	4640      	mov	r0, r8
   8055e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80562:	f04f 30ff 	mov.w	r0, #4294967295
   80566:	4770      	bx	lr
   80568:	2007ad70 	.word	0x2007ad70
   8056c:	2007ad14 	.word	0x2007ad14

00080570 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   80570:	b4f0      	push	{r4, r5, r6, r7}
   80572:	b08c      	sub	sp, #48	; 0x30
   80574:	4607      	mov	r7, r0
   80576:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80578:	ac01      	add	r4, sp, #4
   8057a:	4d11      	ldr	r5, [pc, #68]	; (805c0 <pwm_clocks_generate+0x50>)
   8057c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8057e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80584:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   80588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   8058c:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   8058e:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80590:	f852 3b04 	ldr.w	r3, [r2], #4
   80594:	fbb6 f3f3 	udiv	r3, r6, r3
   80598:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   8059c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   805a0:	d905      	bls.n	805ae <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
   805a2:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   805a4:	280b      	cmp	r0, #11
   805a6:	d1f3      	bne.n	80590 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   805a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   805ac:	e005      	b.n	805ba <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   805ae:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
   805b0:	bf94      	ite	ls
   805b2:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
   805b6:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
   805ba:	b00c      	add	sp, #48	; 0x30
   805bc:	bcf0      	pop	{r4, r5, r6, r7}
   805be:	4770      	bx	lr
   805c0:	0008766c 	.word	0x0008766c

000805c4 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   805c4:	b570      	push	{r4, r5, r6, lr}
   805c6:	4606      	mov	r6, r0
   805c8:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   805ca:	6808      	ldr	r0, [r1, #0]
   805cc:	b140      	cbz	r0, 805e0 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   805ce:	6889      	ldr	r1, [r1, #8]
   805d0:	4b0e      	ldr	r3, [pc, #56]	; (8060c <pwm_init+0x48>)
   805d2:	4798      	blx	r3
   805d4:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   805d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   805da:	4298      	cmp	r0, r3
   805dc:	d101      	bne.n	805e2 <pwm_init+0x1e>
   805de:	e00e      	b.n	805fe <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   805e0:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   805e2:	6860      	ldr	r0, [r4, #4]
   805e4:	b140      	cbz	r0, 805f8 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   805e6:	68a1      	ldr	r1, [r4, #8]
   805e8:	4b08      	ldr	r3, [pc, #32]	; (8060c <pwm_init+0x48>)
   805ea:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   805ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
   805f0:	4298      	cmp	r0, r3
   805f2:	d007      	beq.n	80604 <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
   805f4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   805f8:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   805fa:	2000      	movs	r0, #0
   805fc:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
   805fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
   80602:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
   80604:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
   80608:	bd70      	pop	{r4, r5, r6, pc}
   8060a:	bf00      	nop
   8060c:	00080571 	.word	0x00080571

00080610 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   80610:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   80612:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80614:	8a8a      	ldrh	r2, [r1, #20]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80616:	684c      	ldr	r4, [r1, #4]
   80618:	f004 040f 	and.w	r4, r4, #15
   8061c:	4322      	orrs	r2, r4
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
   8061e:	890c      	ldrh	r4, [r1, #8]
   80620:	4322      	orrs	r2, r4
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
			(p_channel->polarity << 9) |
   80622:	7a8c      	ldrb	r4, [r1, #10]
   80624:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
			(p_channel->b_deadtime_generator << 16) |
   80628:	7d8c      	ldrb	r4, [r1, #22]
   8062a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   8062e:	7dcc      	ldrb	r4, [r1, #23]
   80630:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   80634:	7e0c      	ldrb	r4, [r1, #24]
{
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80636:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
   8063a:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   8063e:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   80642:	68ca      	ldr	r2, [r1, #12]
   80644:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   80648:	690a      	ldr	r2, [r1, #16]
   8064a:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   8064e:	7d8a      	ldrb	r2, [r1, #22]
   80650:	b13a      	cbz	r2, 80662 <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   80652:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   80654:	8b4a      	ldrh	r2, [r1, #26]
   80656:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   8065a:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   8065e:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   80662:	6c84      	ldr	r4, [r0, #72]	; 0x48
   80664:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   80668:	409a      	lsls	r2, r3
   8066a:	43d2      	mvns	r2, r2
   8066c:	ea02 0504 	and.w	r5, r2, r4
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   80670:	7fcc      	ldrb	r4, [r1, #31]
   80672:	fa04 f603 	lsl.w	r6, r4, r3
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   80676:	7f8c      	ldrb	r4, [r1, #30]
   80678:	409c      	lsls	r4, r3
   8067a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   8067e:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   80680:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   80682:	6c44      	ldr	r4, [r0, #68]	; 0x44
   80684:	4014      	ands	r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   80686:	f891 2021 	ldrb.w	r2, [r1, #33]	; 0x21
   8068a:	fa02 f503 	lsl.w	r5, r2, r3
					<< 16);
	p_pwm->PWM_OS = tmp_reg;

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   8068e:	f891 2020 	ldrb.w	r2, [r1, #32]
   80692:	409a      	lsls	r2, r3
   80694:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   80698:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   8069a:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   8069c:	2201      	movs	r2, #1
   8069e:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   806a0:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   806a4:	b11c      	cbz	r4, 806ae <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
   806a6:	6a04      	ldr	r4, [r0, #32]
   806a8:	4314      	orrs	r4, r2
   806aa:	6204      	str	r4, [r0, #32]
   806ac:	e003      	b.n	806b6 <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   806ae:	6a04      	ldr	r4, [r0, #32]
   806b0:	ea24 0402 	bic.w	r4, r4, r2
   806b4:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   806b6:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   806ba:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   806bc:	6e84      	ldr	r4, [r0, #104]	; 0x68
   806be:	bf0c      	ite	eq
   806c0:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   806c2:	4394      	bicne	r4, r2
   806c4:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   806c6:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   806ca:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   806cc:	6e84      	ldr	r4, [r0, #104]	; 0x68
   806ce:	bf0c      	ite	eq
   806d0:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   806d4:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   806d8:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   806da:	2b03      	cmp	r3, #3
   806dc:	d80b      	bhi.n	806f6 <pwm_channel_init+0xe6>
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE1;
   806de:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
		ch_num *= 8;
   806e0:	00dd      	lsls	r5, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
   806e2:	22ff      	movs	r2, #255	; 0xff
   806e4:	40aa      	lsls	r2, r5
   806e6:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   806ea:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
   806ee:	40ab      	lsls	r3, r5
   806f0:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   806f2:	66c3      	str	r3, [r0, #108]	; 0x6c
   806f4:	e00c      	b.n	80710 <pwm_channel_init+0x100>
	} else {
		ch_num -= 4;
   806f6:	3b04      	subs	r3, #4
		ch_num *= 8;
		fault_enable_reg = p_pwm->PWM_FPE2;
   806f8:	6f02      	ldr	r2, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
		ch_num *= 8;
   806fa:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
		fault_enable_reg &= ~(0xFF << ch_num);
   806fc:	24ff      	movs	r4, #255	; 0xff
   806fe:	409c      	lsls	r4, r3
   80700:	ea22 0404 	bic.w	r4, r2, r4
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80704:	f891 2023 	ldrb.w	r2, [r1, #35]	; 0x23
   80708:	fa02 f303 	lsl.w	r3, r2, r3
   8070c:	4323      	orrs	r3, r4
		p_pwm->PWM_FPE2 = fault_enable_reg;
   8070e:	6703      	str	r3, [r0, #112]	; 0x70
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
   80710:	2000      	movs	r0, #0
   80712:	bc70      	pop	{r4, r5, r6}
   80714:	4770      	bx	lr
   80716:	bf00      	nop

00080718 <pwm_channel_update_duty>:
 *
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
   80718:	b410      	push	{r4}
	uint32_t ch_num = p_channel->channel;
   8071a:	680c      	ldr	r4, [r1, #0]

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   8071c:	690b      	ldr	r3, [r1, #16]
   8071e:	4293      	cmp	r3, r2
   80720:	d306      	bcc.n	80730 <pwm_channel_update_duty+0x18>
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   80722:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   80724:	eb00 1044 	add.w	r0, r0, r4, lsl #5
   80728:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   8072c:	2000      	movs	r0, #0
   8072e:	e001      	b.n	80734 <pwm_channel_update_duty+0x1c>
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   80730:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   80734:	f85d 4b04 	ldr.w	r4, [sp], #4
   80738:	4770      	bx	lr
   8073a:	bf00      	nop

0008073c <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   8073c:	2301      	movs	r3, #1
   8073e:	408b      	lsls	r3, r1
   80740:	6043      	str	r3, [r0, #4]
   80742:	4770      	bx	lr

00080744 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   80744:	2301      	movs	r3, #1
   80746:	408b      	lsls	r3, r1
   80748:	6083      	str	r3, [r0, #8]
   8074a:	4770      	bx	lr

0008074c <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   8074c:	b410      	push	{r4}
   8074e:	0189      	lsls	r1, r1, #6
   80750:	1843      	adds	r3, r0, r1
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   80752:	2402      	movs	r4, #2
   80754:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   80756:	f04f 31ff 	mov.w	r1, #4294967295
   8075a:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   8075c:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   8075e:	605a      	str	r2, [r3, #4]
}
   80760:	f85d 4b04 	ldr.w	r4, [sp], #4
   80764:	4770      	bx	lr
   80766:	bf00      	nop

00080768 <tc_set_block_mode>:
		uint32_t ul_blockmode)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
   80768:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   8076c:	4770      	bx	lr
   8076e:	bf00      	nop

00080770 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80770:	0189      	lsls	r1, r1, #6
   80772:	2305      	movs	r3, #5
   80774:	5043      	str	r3, [r0, r1]
   80776:	4770      	bx	lr

00080778 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   80778:	0189      	lsls	r1, r1, #6
   8077a:	2302      	movs	r3, #2
   8077c:	5043      	str	r3, [r0, r1]
   8077e:	4770      	bx	lr

00080780 <tc_read_cv>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   80780:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80784:	6908      	ldr	r0, [r1, #16]
}
   80786:	4770      	bx	lr

00080788 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   80788:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   8078c:	61ca      	str	r2, [r1, #28]
   8078e:	4770      	bx	lr

00080790 <tc_enable_interrupt>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
	tc_channel->TC_IER = ul_sources;
   80790:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80794:	624a      	str	r2, [r1, #36]	; 0x24
   80796:	4770      	bx	lr

00080798 <tc_get_status>:
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
	return tc_channel->TC_SR;
   80798:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   8079c:	6a08      	ldr	r0, [r1, #32]
}
   8079e:	4770      	bx	lr

000807a0 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   807a0:	f100 0308 	add.w	r3, r0, #8
   807a4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   807a6:	f04f 32ff 	mov.w	r2, #4294967295
   807aa:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   807ac:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   807ae:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   807b0:	2300      	movs	r3, #0
   807b2:	6003      	str	r3, [r0, #0]
   807b4:	4770      	bx	lr
   807b6:	bf00      	nop

000807b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   807b8:	2300      	movs	r3, #0
   807ba:	6103      	str	r3, [r0, #16]
   807bc:	4770      	bx	lr
   807be:	bf00      	nop

000807c0 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   807c0:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   807c2:	685a      	ldr	r2, [r3, #4]
   807c4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   807c6:	6842      	ldr	r2, [r0, #4]
   807c8:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   807ca:	685a      	ldr	r2, [r3, #4]
   807cc:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   807ce:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   807d0:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   807d2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   807d4:	6803      	ldr	r3, [r0, #0]
   807d6:	3301      	adds	r3, #1
   807d8:	6003      	str	r3, [r0, #0]
   807da:	4770      	bx	lr

000807dc <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   807dc:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   807de:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   807e0:	f1b4 3fff 	cmp.w	r4, #4294967295
   807e4:	d101      	bne.n	807ea <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   807e6:	6903      	ldr	r3, [r0, #16]
   807e8:	e00a      	b.n	80800 <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   807ea:	f100 0308 	add.w	r3, r0, #8
   807ee:	68c2      	ldr	r2, [r0, #12]
   807f0:	6812      	ldr	r2, [r2, #0]
   807f2:	4294      	cmp	r4, r2
   807f4:	d304      	bcc.n	80800 <vListInsert+0x24>
   807f6:	685b      	ldr	r3, [r3, #4]
   807f8:	685a      	ldr	r2, [r3, #4]
   807fa:	6812      	ldr	r2, [r2, #0]
   807fc:	4294      	cmp	r4, r2
   807fe:	d2fa      	bcs.n	807f6 <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80800:	685a      	ldr	r2, [r3, #4]
   80802:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80804:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   80806:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   80808:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8080a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   8080c:	6803      	ldr	r3, [r0, #0]
   8080e:	3301      	adds	r3, #1
   80810:	6003      	str	r3, [r0, #0]
}
   80812:	f85d 4b04 	ldr.w	r4, [sp], #4
   80816:	4770      	bx	lr

00080818 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80818:	6843      	ldr	r3, [r0, #4]
   8081a:	6882      	ldr	r2, [r0, #8]
   8081c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   8081e:	6883      	ldr	r3, [r0, #8]
   80820:	6842      	ldr	r2, [r0, #4]
   80822:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80824:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80826:	685a      	ldr	r2, [r3, #4]
   80828:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   8082a:	bf04      	itt	eq
   8082c:	6882      	ldreq	r2, [r0, #8]
   8082e:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80830:	2200      	movs	r2, #0
   80832:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80834:	681a      	ldr	r2, [r3, #0]
   80836:	3a01      	subs	r2, #1
   80838:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   8083a:	6818      	ldr	r0, [r3, #0]
}
   8083c:	4770      	bx	lr
   8083e:	bf00      	nop

00080840 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80840:	4803      	ldr	r0, [pc, #12]	; (80850 <prvPortStartFirstTask+0x10>)
   80842:	6800      	ldr	r0, [r0, #0]
   80844:	6800      	ldr	r0, [r0, #0]
   80846:	f380 8808 	msr	MSP, r0
   8084a:	b662      	cpsie	i
   8084c:	df00      	svc	0
   8084e:	bf00      	nop
   80850:	e000ed08 	.word	0xe000ed08

00080854 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   80854:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80858:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   8085c:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   80860:	2300      	movs	r3, #0
   80862:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   80866:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   8086a:	3840      	subs	r0, #64	; 0x40
   8086c:	4770      	bx	lr
   8086e:	bf00      	nop

00080870 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80870:	4b06      	ldr	r3, [pc, #24]	; (8088c <pxCurrentTCBConst2>)
   80872:	6819      	ldr	r1, [r3, #0]
   80874:	6808      	ldr	r0, [r1, #0]
   80876:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8087a:	f380 8809 	msr	PSP, r0
   8087e:	f04f 0000 	mov.w	r0, #0
   80882:	f380 8811 	msr	BASEPRI, r0
   80886:	f04e 0e0d 	orr.w	lr, lr, #13
   8088a:	4770      	bx	lr

0008088c <pxCurrentTCBConst2>:
   8088c:	2007ab28 	.word	0x2007ab28

00080890 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80894:	4b01      	ldr	r3, [pc, #4]	; (8089c <vPortYieldFromISR+0xc>)
   80896:	601a      	str	r2, [r3, #0]
   80898:	4770      	bx	lr
   8089a:	bf00      	nop
   8089c:	e000ed04 	.word	0xe000ed04

000808a0 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   808a0:	f3ef 8011 	mrs	r0, BASEPRI
   808a4:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   808a8:	f381 8811 	msr	BASEPRI, r1
   808ac:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   808ae:	2000      	movs	r0, #0

000808b0 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   808b0:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   808b2:	4b03      	ldr	r3, [pc, #12]	; (808c0 <vPortEnterCritical+0x10>)
   808b4:	4798      	blx	r3
	uxCriticalNesting++;
   808b6:	4a03      	ldr	r2, [pc, #12]	; (808c4 <vPortEnterCritical+0x14>)
   808b8:	6813      	ldr	r3, [r2, #0]
   808ba:	3301      	adds	r3, #1
   808bc:	6013      	str	r3, [r2, #0]
   808be:	bd08      	pop	{r3, pc}
   808c0:	000808a1 	.word	0x000808a1
   808c4:	2007014c 	.word	0x2007014c

000808c8 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   808c8:	f380 8811 	msr	BASEPRI, r0
   808cc:	4770      	bx	lr
   808ce:	bf00      	nop

000808d0 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   808d0:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   808d2:	4a04      	ldr	r2, [pc, #16]	; (808e4 <vPortExitCritical+0x14>)
   808d4:	6813      	ldr	r3, [r2, #0]
   808d6:	3b01      	subs	r3, #1
   808d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   808da:	b913      	cbnz	r3, 808e2 <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   808dc:	2000      	movs	r0, #0
   808de:	4b02      	ldr	r3, [pc, #8]	; (808e8 <vPortExitCritical+0x18>)
   808e0:	4798      	blx	r3
   808e2:	bd08      	pop	{r3, pc}
   808e4:	2007014c 	.word	0x2007014c
   808e8:	000808c9 	.word	0x000808c9

000808ec <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   808ec:	f3ef 8009 	mrs	r0, PSP
   808f0:	4b0c      	ldr	r3, [pc, #48]	; (80924 <pxCurrentTCBConst>)
   808f2:	681a      	ldr	r2, [r3, #0]
   808f4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   808f8:	6010      	str	r0, [r2, #0]
   808fa:	e92d 4008 	stmdb	sp!, {r3, lr}
   808fe:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80902:	f380 8811 	msr	BASEPRI, r0
   80906:	f000 feb3 	bl	81670 <vTaskSwitchContext>
   8090a:	f04f 0000 	mov.w	r0, #0
   8090e:	f380 8811 	msr	BASEPRI, r0
   80912:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80916:	6819      	ldr	r1, [r3, #0]
   80918:	6808      	ldr	r0, [r1, #0]
   8091a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8091e:	f380 8809 	msr	PSP, r0
   80922:	4770      	bx	lr

00080924 <pxCurrentTCBConst>:
   80924:	2007ab28 	.word	0x2007ab28

00080928 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80928:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8092a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8092e:	4b05      	ldr	r3, [pc, #20]	; (80944 <SysTick_Handler+0x1c>)
   80930:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80932:	4b05      	ldr	r3, [pc, #20]	; (80948 <SysTick_Handler+0x20>)
   80934:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80936:	4b05      	ldr	r3, [pc, #20]	; (8094c <SysTick_Handler+0x24>)
   80938:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   8093a:	2000      	movs	r0, #0
   8093c:	4b04      	ldr	r3, [pc, #16]	; (80950 <SysTick_Handler+0x28>)
   8093e:	4798      	blx	r3
   80940:	bd08      	pop	{r3, pc}
   80942:	bf00      	nop
   80944:	e000ed04 	.word	0xe000ed04
   80948:	000808a1 	.word	0x000808a1
   8094c:	00081339 	.word	0x00081339
   80950:	000808c9 	.word	0x000808c9

00080954 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   80954:	4a03      	ldr	r2, [pc, #12]	; (80964 <vPortSetupTimerInterrupt+0x10>)
   80956:	4b04      	ldr	r3, [pc, #16]	; (80968 <vPortSetupTimerInterrupt+0x14>)
   80958:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   8095a:	2207      	movs	r2, #7
   8095c:	3b04      	subs	r3, #4
   8095e:	601a      	str	r2, [r3, #0]
   80960:	4770      	bx	lr
   80962:	bf00      	nop
   80964:	0001481f 	.word	0x0001481f
   80968:	e000e014 	.word	0xe000e014

0008096c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   8096c:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   8096e:	4b09      	ldr	r3, [pc, #36]	; (80994 <xPortStartScheduler+0x28>)
   80970:	681a      	ldr	r2, [r3, #0]
   80972:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   80976:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80978:	681a      	ldr	r2, [r3, #0]
   8097a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   8097e:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   80980:	4b05      	ldr	r3, [pc, #20]	; (80998 <xPortStartScheduler+0x2c>)
   80982:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   80984:	2400      	movs	r4, #0
   80986:	4b05      	ldr	r3, [pc, #20]	; (8099c <xPortStartScheduler+0x30>)
   80988:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   8098a:	4b05      	ldr	r3, [pc, #20]	; (809a0 <xPortStartScheduler+0x34>)
   8098c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   8098e:	4620      	mov	r0, r4
   80990:	bd10      	pop	{r4, pc}
   80992:	bf00      	nop
   80994:	e000ed20 	.word	0xe000ed20
   80998:	00080955 	.word	0x00080955
   8099c:	2007014c 	.word	0x2007014c
   809a0:	00080841 	.word	0x00080841

000809a4 <prvInsertBlockIntoFreeList>:
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   809a4:	4a13      	ldr	r2, [pc, #76]	; (809f4 <prvInsertBlockIntoFreeList+0x50>)
   809a6:	e000      	b.n	809aa <prvInsertBlockIntoFreeList+0x6>
   809a8:	461a      	mov	r2, r3
   809aa:	6813      	ldr	r3, [r2, #0]
   809ac:	4283      	cmp	r3, r0
   809ae:	d3fb      	bcc.n	809a8 <prvInsertBlockIntoFreeList+0x4>
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   809b0:	b430      	push	{r4, r5}
   809b2:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   809b4:	6854      	ldr	r4, [r2, #4]
   809b6:	1915      	adds	r5, r2, r4
   809b8:	4285      	cmp	r5, r0
   809ba:	d103      	bne.n	809c4 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   809bc:	6868      	ldr	r0, [r5, #4]
   809be:	4404      	add	r4, r0
   809c0:	6054      	str	r4, [r2, #4]
   809c2:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   809c4:	6842      	ldr	r2, [r0, #4]
   809c6:	1884      	adds	r4, r0, r2
   809c8:	429c      	cmp	r4, r3
   809ca:	d10c      	bne.n	809e6 <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   809cc:	4b0a      	ldr	r3, [pc, #40]	; (809f8 <prvInsertBlockIntoFreeList+0x54>)
   809ce:	681b      	ldr	r3, [r3, #0]
   809d0:	429c      	cmp	r4, r3
   809d2:	d006      	beq.n	809e2 <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   809d4:	6863      	ldr	r3, [r4, #4]
   809d6:	441a      	add	r2, r3
   809d8:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   809da:	680b      	ldr	r3, [r1, #0]
   809dc:	681b      	ldr	r3, [r3, #0]
   809de:	6003      	str	r3, [r0, #0]
   809e0:	e002      	b.n	809e8 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   809e2:	6004      	str	r4, [r0, #0]
   809e4:	e000      	b.n	809e8 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   809e6:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   809e8:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   809ea:	bf18      	it	ne
   809ec:	6008      	strne	r0, [r1, #0]
	}
}
   809ee:	bc30      	pop	{r4, r5}
   809f0:	4770      	bx	lr
   809f2:	bf00      	nop
   809f4:	2007aa54 	.word	0x2007aa54
   809f8:	2007aa50 	.word	0x2007aa50

000809fc <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
   809fc:	b538      	push	{r3, r4, r5, lr}
   809fe:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   80a00:	4b29      	ldr	r3, [pc, #164]	; (80aa8 <pvPortMalloc+0xac>)
   80a02:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   80a04:	4b29      	ldr	r3, [pc, #164]	; (80aac <pvPortMalloc+0xb0>)
   80a06:	681b      	ldr	r3, [r3, #0]
   80a08:	b99b      	cbnz	r3, 80a32 <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   80a0a:	4a29      	ldr	r2, [pc, #164]	; (80ab0 <pvPortMalloc+0xb4>)
   80a0c:	4b29      	ldr	r3, [pc, #164]	; (80ab4 <pvPortMalloc+0xb8>)
   80a0e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   80a10:	2100      	movs	r1, #0
   80a12:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   80a14:	f649 72f0 	movw	r2, #40944	; 0x9ff0
   80a18:	1898      	adds	r0, r3, r2
   80a1a:	4d24      	ldr	r5, [pc, #144]	; (80aac <pvPortMalloc+0xb0>)
   80a1c:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   80a1e:	f649 75f4 	movw	r5, #40948	; 0x9ff4
   80a22:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   80a24:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   80a26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   80a28:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   80a2a:	4a23      	ldr	r2, [pc, #140]	; (80ab8 <pvPortMalloc+0xbc>)
   80a2c:	6813      	ldr	r3, [r2, #0]
   80a2e:	3b10      	subs	r3, #16
   80a30:	6013      	str	r3, [r2, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   80a32:	2c00      	cmp	r4, #0
   80a34:	d02e      	beq.n	80a94 <pvPortMalloc+0x98>
		{
			xWantedSize += heapSTRUCT_SIZE;
   80a36:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   80a3a:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80a3e:	bf1c      	itt	ne
   80a40:	f022 0207 	bicne.w	r2, r2, #7
   80a44:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   80a46:	1e51      	subs	r1, r2, #1
   80a48:	f649 73fe 	movw	r3, #40958	; 0x9ffe
   80a4c:	4299      	cmp	r1, r3
   80a4e:	d823      	bhi.n	80a98 <pvPortMalloc+0x9c>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   80a50:	4917      	ldr	r1, [pc, #92]	; (80ab0 <pvPortMalloc+0xb4>)
   80a52:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80a54:	e001      	b.n	80a5a <pvPortMalloc+0x5e>
   80a56:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   80a58:	461c      	mov	r4, r3
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80a5a:	6863      	ldr	r3, [r4, #4]
   80a5c:	429a      	cmp	r2, r3
   80a5e:	d902      	bls.n	80a66 <pvPortMalloc+0x6a>
   80a60:	6823      	ldr	r3, [r4, #0]
   80a62:	2b00      	cmp	r3, #0
   80a64:	d1f7      	bne.n	80a56 <pvPortMalloc+0x5a>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   80a66:	4b11      	ldr	r3, [pc, #68]	; (80aac <pvPortMalloc+0xb0>)
   80a68:	681b      	ldr	r3, [r3, #0]
   80a6a:	429c      	cmp	r4, r3
   80a6c:	d016      	beq.n	80a9c <pvPortMalloc+0xa0>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   80a6e:	680d      	ldr	r5, [r1, #0]
   80a70:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   80a72:	6823      	ldr	r3, [r4, #0]
   80a74:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   80a76:	6863      	ldr	r3, [r4, #4]
   80a78:	1a9b      	subs	r3, r3, r2
   80a7a:	2b20      	cmp	r3, #32
   80a7c:	d904      	bls.n	80a88 <pvPortMalloc+0x8c>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   80a7e:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   80a80:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   80a82:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   80a84:	4b0d      	ldr	r3, [pc, #52]	; (80abc <pvPortMalloc+0xc0>)
   80a86:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   80a88:	4a0b      	ldr	r2, [pc, #44]	; (80ab8 <pvPortMalloc+0xbc>)
   80a8a:	6813      	ldr	r3, [r2, #0]
   80a8c:	6861      	ldr	r1, [r4, #4]
   80a8e:	1a5b      	subs	r3, r3, r1
   80a90:	6013      	str	r3, [r2, #0]
   80a92:	e004      	b.n	80a9e <pvPortMalloc+0xa2>
/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   80a94:	2500      	movs	r5, #0
   80a96:	e002      	b.n	80a9e <pvPortMalloc+0xa2>
   80a98:	2500      	movs	r5, #0
   80a9a:	e000      	b.n	80a9e <pvPortMalloc+0xa2>
   80a9c:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   80a9e:	4b08      	ldr	r3, [pc, #32]	; (80ac0 <pvPortMalloc+0xc4>)
   80aa0:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   80aa2:	4628      	mov	r0, r5
   80aa4:	bd38      	pop	{r3, r4, r5, pc}
   80aa6:	bf00      	nop
   80aa8:	00081309 	.word	0x00081309
   80aac:	2007aa50 	.word	0x2007aa50
   80ab0:	2007aa54 	.word	0x2007aa54
   80ab4:	20070a50 	.word	0x20070a50
   80ab8:	20070150 	.word	0x20070150
   80abc:	000809a5 	.word	0x000809a5
   80ac0:	00081459 	.word	0x00081459

00080ac4 <vPortFree>:
void vPortFree( void *pv )
{
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   80ac4:	b180      	cbz	r0, 80ae8 <vPortFree+0x24>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   80ac6:	b510      	push	{r4, lr}
   80ac8:	4604      	mov	r4, r0
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   80aca:	4b08      	ldr	r3, [pc, #32]	; (80aec <vPortFree+0x28>)
   80acc:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   80ace:	4a08      	ldr	r2, [pc, #32]	; (80af0 <vPortFree+0x2c>)
   80ad0:	6811      	ldr	r1, [r2, #0]
   80ad2:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80ad6:	440b      	add	r3, r1
   80ad8:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   80ada:	f1a4 0010 	sub.w	r0, r4, #16
   80ade:	4b05      	ldr	r3, [pc, #20]	; (80af4 <vPortFree+0x30>)
   80ae0:	4798      	blx	r3
		}
		xTaskResumeAll();
   80ae2:	4b05      	ldr	r3, [pc, #20]	; (80af8 <vPortFree+0x34>)
   80ae4:	4798      	blx	r3
   80ae6:	bd10      	pop	{r4, pc}
   80ae8:	4770      	bx	lr
   80aea:	bf00      	nop
   80aec:	00081309 	.word	0x00081309
   80af0:	20070150 	.word	0x20070150
   80af4:	000809a5 	.word	0x000809a5
   80af8:	00081459 	.word	0x00081459

00080afc <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   80afc:	b510      	push	{r4, lr}
   80afe:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   80b00:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80b02:	b93b      	cbnz	r3, 80b14 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80b04:	6803      	ldr	r3, [r0, #0]
   80b06:	bb1b      	cbnz	r3, 80b50 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80b08:	6840      	ldr	r0, [r0, #4]
   80b0a:	4b13      	ldr	r3, [pc, #76]	; (80b58 <prvCopyDataToQueue+0x5c>)
   80b0c:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   80b0e:	2300      	movs	r3, #0
   80b10:	6063      	str	r3, [r4, #4]
   80b12:	e01d      	b.n	80b50 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   80b14:	b96a      	cbnz	r2, 80b32 <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80b16:	6880      	ldr	r0, [r0, #8]
   80b18:	461a      	mov	r2, r3
   80b1a:	4b10      	ldr	r3, [pc, #64]	; (80b5c <prvCopyDataToQueue+0x60>)
   80b1c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   80b1e:	68a2      	ldr	r2, [r4, #8]
   80b20:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80b22:	4413      	add	r3, r2
   80b24:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   80b26:	6862      	ldr	r2, [r4, #4]
   80b28:	4293      	cmp	r3, r2
   80b2a:	d311      	bcc.n	80b50 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80b2c:	6823      	ldr	r3, [r4, #0]
   80b2e:	60a3      	str	r3, [r4, #8]
   80b30:	e00e      	b.n	80b50 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80b32:	68c0      	ldr	r0, [r0, #12]
   80b34:	461a      	mov	r2, r3
   80b36:	4b09      	ldr	r3, [pc, #36]	; (80b5c <prvCopyDataToQueue+0x60>)
   80b38:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   80b3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80b3c:	425b      	negs	r3, r3
   80b3e:	68e2      	ldr	r2, [r4, #12]
   80b40:	441a      	add	r2, r3
   80b42:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   80b44:	6821      	ldr	r1, [r4, #0]
   80b46:	428a      	cmp	r2, r1
   80b48:	d202      	bcs.n	80b50 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80b4a:	6862      	ldr	r2, [r4, #4]
   80b4c:	4413      	add	r3, r2
   80b4e:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   80b50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80b52:	3301      	adds	r3, #1
   80b54:	63a3      	str	r3, [r4, #56]	; 0x38
   80b56:	bd10      	pop	{r4, pc}
   80b58:	000819a1 	.word	0x000819a1
   80b5c:	00084711 	.word	0x00084711

00080b60 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   80b60:	b538      	push	{r3, r4, r5, lr}
   80b62:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   80b64:	6800      	ldr	r0, [r0, #0]
   80b66:	b158      	cbz	r0, 80b80 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   80b68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80b6a:	68dc      	ldr	r4, [r3, #12]
   80b6c:	4414      	add	r4, r2
   80b6e:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   80b70:	685d      	ldr	r5, [r3, #4]
   80b72:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   80b74:	bf28      	it	cs
   80b76:	60d8      	strcs	r0, [r3, #12]
   80b78:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   80b7a:	68d9      	ldr	r1, [r3, #12]
   80b7c:	4b01      	ldr	r3, [pc, #4]	; (80b84 <prvCopyDataFromQueue+0x24>)
   80b7e:	4798      	blx	r3
   80b80:	bd38      	pop	{r3, r4, r5, pc}
   80b82:	bf00      	nop
   80b84:	00084711 	.word	0x00084711

00080b88 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   80b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80b8a:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   80b8c:	4b1e      	ldr	r3, [pc, #120]	; (80c08 <prvUnlockQueue+0x80>)
   80b8e:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80b90:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80b92:	2b00      	cmp	r3, #0
   80b94:	dd13      	ble.n	80bbe <prvUnlockQueue+0x36>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80b96:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80b98:	b91b      	cbnz	r3, 80ba2 <prvUnlockQueue+0x1a>
   80b9a:	e010      	b.n	80bbe <prvUnlockQueue+0x36>
   80b9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80b9e:	b923      	cbnz	r3, 80baa <prvUnlockQueue+0x22>
   80ba0:	e00d      	b.n	80bbe <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80ba2:	f104 0624 	add.w	r6, r4, #36	; 0x24
   80ba6:	4d19      	ldr	r5, [pc, #100]	; (80c0c <prvUnlockQueue+0x84>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80ba8:	4f19      	ldr	r7, [pc, #100]	; (80c10 <prvUnlockQueue+0x88>)
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80baa:	4630      	mov	r0, r6
   80bac:	47a8      	blx	r5
   80bae:	b100      	cbz	r0, 80bb2 <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80bb0:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   80bb2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80bb4:	3b01      	subs	r3, #1
   80bb6:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80bb8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80bba:	2b00      	cmp	r3, #0
   80bbc:	dcee      	bgt.n	80b9c <prvUnlockQueue+0x14>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   80bbe:	f04f 33ff 	mov.w	r3, #4294967295
   80bc2:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   80bc4:	4b13      	ldr	r3, [pc, #76]	; (80c14 <prvUnlockQueue+0x8c>)
   80bc6:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   80bc8:	4b0f      	ldr	r3, [pc, #60]	; (80c08 <prvUnlockQueue+0x80>)
   80bca:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80bcc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80bce:	2b00      	cmp	r3, #0
   80bd0:	dd13      	ble.n	80bfa <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80bd2:	6923      	ldr	r3, [r4, #16]
   80bd4:	b91b      	cbnz	r3, 80bde <prvUnlockQueue+0x56>
   80bd6:	e010      	b.n	80bfa <prvUnlockQueue+0x72>
   80bd8:	6923      	ldr	r3, [r4, #16]
   80bda:	b923      	cbnz	r3, 80be6 <prvUnlockQueue+0x5e>
   80bdc:	e00d      	b.n	80bfa <prvUnlockQueue+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80bde:	f104 0610 	add.w	r6, r4, #16
   80be2:	4d0a      	ldr	r5, [pc, #40]	; (80c0c <prvUnlockQueue+0x84>)
				{
					vTaskMissedYield();
   80be4:	4f0a      	ldr	r7, [pc, #40]	; (80c10 <prvUnlockQueue+0x88>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80be6:	4630      	mov	r0, r6
   80be8:	47a8      	blx	r5
   80bea:	b100      	cbz	r0, 80bee <prvUnlockQueue+0x66>
				{
					vTaskMissedYield();
   80bec:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   80bee:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80bf0:	3b01      	subs	r3, #1
   80bf2:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80bf4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80bf6:	2b00      	cmp	r3, #0
   80bf8:	dcee      	bgt.n	80bd8 <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   80bfa:	f04f 33ff 	mov.w	r3, #4294967295
   80bfe:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   80c00:	4b04      	ldr	r3, [pc, #16]	; (80c14 <prvUnlockQueue+0x8c>)
   80c02:	4798      	blx	r3
   80c04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80c06:	bf00      	nop
   80c08:	000808b1 	.word	0x000808b1
   80c0c:	000817b9 	.word	0x000817b9
   80c10:	000818e9 	.word	0x000818e9
   80c14:	000808d1 	.word	0x000808d1

00080c18 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   80c18:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   80c1a:	b918      	cbnz	r0, 80c24 <xQueueGenericReset+0xc>
   80c1c:	4b17      	ldr	r3, [pc, #92]	; (80c7c <xQueueGenericReset+0x64>)
   80c1e:	4798      	blx	r3
   80c20:	bf00      	nop
   80c22:	e7fd      	b.n	80c20 <xQueueGenericReset+0x8>
   80c24:	460d      	mov	r5, r1
   80c26:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
   80c28:	4b15      	ldr	r3, [pc, #84]	; (80c80 <xQueueGenericReset+0x68>)
   80c2a:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   80c2c:	6822      	ldr	r2, [r4, #0]
   80c2e:	6c21      	ldr	r1, [r4, #64]	; 0x40
   80c30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80c32:	fb03 f301 	mul.w	r3, r3, r1
   80c36:	18d0      	adds	r0, r2, r3
   80c38:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   80c3a:	2000      	movs	r0, #0
   80c3c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   80c3e:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   80c40:	1a5b      	subs	r3, r3, r1
   80c42:	4413      	add	r3, r2
   80c44:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   80c46:	f04f 33ff 	mov.w	r3, #4294967295
   80c4a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   80c4c:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   80c4e:	b955      	cbnz	r5, 80c66 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80c50:	6923      	ldr	r3, [r4, #16]
   80c52:	b17b      	cbz	r3, 80c74 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80c54:	f104 0010 	add.w	r0, r4, #16
   80c58:	4b0a      	ldr	r3, [pc, #40]	; (80c84 <xQueueGenericReset+0x6c>)
   80c5a:	4798      	blx	r3
   80c5c:	2801      	cmp	r0, #1
   80c5e:	d109      	bne.n	80c74 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   80c60:	4b09      	ldr	r3, [pc, #36]	; (80c88 <xQueueGenericReset+0x70>)
   80c62:	4798      	blx	r3
   80c64:	e006      	b.n	80c74 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   80c66:	f104 0010 	add.w	r0, r4, #16
   80c6a:	4d08      	ldr	r5, [pc, #32]	; (80c8c <xQueueGenericReset+0x74>)
   80c6c:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   80c6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80c72:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   80c74:	4b06      	ldr	r3, [pc, #24]	; (80c90 <xQueueGenericReset+0x78>)
   80c76:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   80c78:	2001      	movs	r0, #1
   80c7a:	bd38      	pop	{r3, r4, r5, pc}
   80c7c:	000808a1 	.word	0x000808a1
   80c80:	000808b1 	.word	0x000808b1
   80c84:	000817b9 	.word	0x000817b9
   80c88:	00080891 	.word	0x00080891
   80c8c:	000807a1 	.word	0x000807a1
   80c90:	000808d1 	.word	0x000808d1

00080c94 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   80c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   80c96:	b1a0      	cbz	r0, 80cc2 <xQueueGenericCreate+0x2e>
   80c98:	460d      	mov	r5, r1
   80c9a:	4617      	mov	r7, r2
   80c9c:	4606      	mov	r6, r0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   80c9e:	2050      	movs	r0, #80	; 0x50
   80ca0:	4b0e      	ldr	r3, [pc, #56]	; (80cdc <xQueueGenericCreate+0x48>)
   80ca2:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80ca4:	4604      	mov	r4, r0
   80ca6:	b160      	cbz	r0, 80cc2 <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   80ca8:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   80cac:	3001      	adds	r0, #1
   80cae:	4b0b      	ldr	r3, [pc, #44]	; (80cdc <xQueueGenericCreate+0x48>)
   80cb0:	4798      	blx	r3
   80cb2:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   80cb4:	b940      	cbnz	r0, 80cc8 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   80cb6:	4620      	mov	r0, r4
   80cb8:	4b09      	ldr	r3, [pc, #36]	; (80ce0 <xQueueGenericCreate+0x4c>)
   80cba:	4798      	blx	r3
   80cbc:	e001      	b.n	80cc2 <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   80cbe:	bf00      	nop
   80cc0:	e7fd      	b.n	80cbe <xQueueGenericCreate+0x2a>
   80cc2:	4b08      	ldr	r3, [pc, #32]	; (80ce4 <xQueueGenericCreate+0x50>)
   80cc4:	4798      	blx	r3
   80cc6:	e7fa      	b.n	80cbe <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   80cc8:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   80cca:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   80ccc:	4620      	mov	r0, r4
   80cce:	2101      	movs	r1, #1
   80cd0:	4b05      	ldr	r3, [pc, #20]	; (80ce8 <xQueueGenericCreate+0x54>)
   80cd2:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   80cd4:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   80cd8:	4620      	mov	r0, r4
   80cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80cdc:	000809fd 	.word	0x000809fd
   80ce0:	00080ac5 	.word	0x00080ac5
   80ce4:	000808a1 	.word	0x000808a1
   80ce8:	00080c19 	.word	0x00080c19

00080cec <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   80cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80cf0:	b085      	sub	sp, #20
   80cf2:	9201      	str	r2, [sp, #4]
   80cf4:	9300      	str	r3, [sp, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   80cf6:	b918      	cbnz	r0, 80d00 <xQueueGenericSend+0x14>
   80cf8:	4b38      	ldr	r3, [pc, #224]	; (80ddc <xQueueGenericSend+0xf0>)
   80cfa:	4798      	blx	r3
   80cfc:	bf00      	nop
   80cfe:	e7fd      	b.n	80cfc <xQueueGenericSend+0x10>
   80d00:	468a      	mov	sl, r1
   80d02:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80d04:	b929      	cbnz	r1, 80d12 <xQueueGenericSend+0x26>
   80d06:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80d08:	b12b      	cbz	r3, 80d16 <xQueueGenericSend+0x2a>
   80d0a:	4b34      	ldr	r3, [pc, #208]	; (80ddc <xQueueGenericSend+0xf0>)
   80d0c:	4798      	blx	r3
   80d0e:	bf00      	nop
   80d10:	e7fd      	b.n	80d0e <xQueueGenericSend+0x22>
   80d12:	2700      	movs	r7, #0
   80d14:	e000      	b.n	80d18 <xQueueGenericSend+0x2c>
   80d16:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80d18:	4e31      	ldr	r6, [pc, #196]	; (80de0 <xQueueGenericSend+0xf4>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80d1a:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 80e08 <xQueueGenericSend+0x11c>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80d1e:	4d31      	ldr	r5, [pc, #196]	; (80de4 <xQueueGenericSend+0xf8>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80d20:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80d22:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80d24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80d26:	429a      	cmp	r2, r3
   80d28:	d212      	bcs.n	80d50 <xQueueGenericSend+0x64>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80d2a:	4620      	mov	r0, r4
   80d2c:	4651      	mov	r1, sl
   80d2e:	9a00      	ldr	r2, [sp, #0]
   80d30:	4b2d      	ldr	r3, [pc, #180]	; (80de8 <xQueueGenericSend+0xfc>)
   80d32:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80d34:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80d36:	b13b      	cbz	r3, 80d48 <xQueueGenericSend+0x5c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   80d38:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80d3c:	4b2b      	ldr	r3, [pc, #172]	; (80dec <xQueueGenericSend+0x100>)
   80d3e:	4798      	blx	r3
   80d40:	2801      	cmp	r0, #1
   80d42:	d101      	bne.n	80d48 <xQueueGenericSend+0x5c>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   80d44:	4b2a      	ldr	r3, [pc, #168]	; (80df0 <xQueueGenericSend+0x104>)
   80d46:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   80d48:	4b26      	ldr	r3, [pc, #152]	; (80de4 <xQueueGenericSend+0xf8>)
   80d4a:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   80d4c:	2001      	movs	r0, #1
   80d4e:	e042      	b.n	80dd6 <xQueueGenericSend+0xea>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80d50:	9b01      	ldr	r3, [sp, #4]
   80d52:	b91b      	cbnz	r3, 80d5c <xQueueGenericSend+0x70>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80d54:	4b23      	ldr	r3, [pc, #140]	; (80de4 <xQueueGenericSend+0xf8>)
   80d56:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   80d58:	2000      	movs	r0, #0
   80d5a:	e03c      	b.n	80dd6 <xQueueGenericSend+0xea>
				}
				else if( xEntryTimeSet == pdFALSE )
   80d5c:	b917      	cbnz	r7, 80d64 <xQueueGenericSend+0x78>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80d5e:	a802      	add	r0, sp, #8
   80d60:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   80d62:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80d64:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80d66:	4b23      	ldr	r3, [pc, #140]	; (80df4 <xQueueGenericSend+0x108>)
   80d68:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80d6a:	47b0      	blx	r6
   80d6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
   80d72:	bf04      	itt	eq
   80d74:	2300      	moveq	r3, #0
   80d76:	6463      	streq	r3, [r4, #68]	; 0x44
   80d78:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
   80d7e:	bf04      	itt	eq
   80d80:	2300      	moveq	r3, #0
   80d82:	64a3      	streq	r3, [r4, #72]	; 0x48
   80d84:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80d86:	a802      	add	r0, sp, #8
   80d88:	a901      	add	r1, sp, #4
   80d8a:	4b1b      	ldr	r3, [pc, #108]	; (80df8 <xQueueGenericSend+0x10c>)
   80d8c:	4798      	blx	r3
   80d8e:	b9e0      	cbnz	r0, 80dca <xQueueGenericSend+0xde>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80d90:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   80d92:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   80d96:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   80d9a:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   80d9c:	45c1      	cmp	r9, r8
   80d9e:	d10e      	bne.n	80dbe <xQueueGenericSend+0xd2>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   80da0:	f104 0010 	add.w	r0, r4, #16
   80da4:	9901      	ldr	r1, [sp, #4]
   80da6:	4b15      	ldr	r3, [pc, #84]	; (80dfc <xQueueGenericSend+0x110>)
   80da8:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   80daa:	4620      	mov	r0, r4
   80dac:	4b14      	ldr	r3, [pc, #80]	; (80e00 <xQueueGenericSend+0x114>)
   80dae:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   80db0:	4b14      	ldr	r3, [pc, #80]	; (80e04 <xQueueGenericSend+0x118>)
   80db2:	4798      	blx	r3
   80db4:	2800      	cmp	r0, #0
   80db6:	d1b3      	bne.n	80d20 <xQueueGenericSend+0x34>
				{
					portYIELD_WITHIN_API();
   80db8:	4b0d      	ldr	r3, [pc, #52]	; (80df0 <xQueueGenericSend+0x104>)
   80dba:	4798      	blx	r3
   80dbc:	e7b0      	b.n	80d20 <xQueueGenericSend+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   80dbe:	4620      	mov	r0, r4
   80dc0:	4b0f      	ldr	r3, [pc, #60]	; (80e00 <xQueueGenericSend+0x114>)
   80dc2:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80dc4:	4b0f      	ldr	r3, [pc, #60]	; (80e04 <xQueueGenericSend+0x118>)
   80dc6:	4798      	blx	r3
   80dc8:	e7aa      	b.n	80d20 <xQueueGenericSend+0x34>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   80dca:	4620      	mov	r0, r4
   80dcc:	4b0c      	ldr	r3, [pc, #48]	; (80e00 <xQueueGenericSend+0x114>)
   80dce:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80dd0:	4b0c      	ldr	r3, [pc, #48]	; (80e04 <xQueueGenericSend+0x118>)
   80dd2:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   80dd4:	2000      	movs	r0, #0
		}
	}
}
   80dd6:	b005      	add	sp, #20
   80dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80ddc:	000808a1 	.word	0x000808a1
   80de0:	000808b1 	.word	0x000808b1
   80de4:	000808d1 	.word	0x000808d1
   80de8:	00080afd 	.word	0x00080afd
   80dec:	000817b9 	.word	0x000817b9
   80df0:	00080891 	.word	0x00080891
   80df4:	00081309 	.word	0x00081309
   80df8:	00081865 	.word	0x00081865
   80dfc:	00081715 	.word	0x00081715
   80e00:	00080b89 	.word	0x00080b89
   80e04:	00081459 	.word	0x00081459
   80e08:	0008183d 	.word	0x0008183d

00080e0c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   80e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   80e10:	b918      	cbnz	r0, 80e1a <xQueueGenericSendFromISR+0xe>
   80e12:	4b1e      	ldr	r3, [pc, #120]	; (80e8c <xQueueGenericSendFromISR+0x80>)
   80e14:	4798      	blx	r3
   80e16:	bf00      	nop
   80e18:	e7fd      	b.n	80e16 <xQueueGenericSendFromISR+0xa>
   80e1a:	460e      	mov	r6, r1
   80e1c:	4615      	mov	r5, r2
   80e1e:	4698      	mov	r8, r3
   80e20:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80e22:	b929      	cbnz	r1, 80e30 <xQueueGenericSendFromISR+0x24>
   80e24:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80e26:	b11b      	cbz	r3, 80e30 <xQueueGenericSendFromISR+0x24>
   80e28:	4b18      	ldr	r3, [pc, #96]	; (80e8c <xQueueGenericSendFromISR+0x80>)
   80e2a:	4798      	blx	r3
   80e2c:	bf00      	nop
   80e2e:	e7fd      	b.n	80e2c <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   80e30:	4b16      	ldr	r3, [pc, #88]	; (80e8c <xQueueGenericSendFromISR+0x80>)
   80e32:	4798      	blx	r3
   80e34:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80e36:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80e38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80e3a:	429a      	cmp	r2, r3
   80e3c:	d218      	bcs.n	80e70 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80e3e:	4620      	mov	r0, r4
   80e40:	4631      	mov	r1, r6
   80e42:	4642      	mov	r2, r8
   80e44:	4b12      	ldr	r3, [pc, #72]	; (80e90 <xQueueGenericSendFromISR+0x84>)
   80e46:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   80e48:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
   80e4e:	d10a      	bne.n	80e66 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80e50:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80e52:	b17b      	cbz	r3, 80e74 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80e54:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80e58:	4b0e      	ldr	r3, [pc, #56]	; (80e94 <xQueueGenericSendFromISR+0x88>)
   80e5a:	4798      	blx	r3
   80e5c:	b160      	cbz	r0, 80e78 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   80e5e:	b16d      	cbz	r5, 80e7c <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   80e60:	2401      	movs	r4, #1
   80e62:	602c      	str	r4, [r5, #0]
   80e64:	e00b      	b.n	80e7e <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   80e66:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80e68:	3301      	adds	r3, #1
   80e6a:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   80e6c:	2401      	movs	r4, #1
   80e6e:	e006      	b.n	80e7e <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   80e70:	2400      	movs	r4, #0
   80e72:	e004      	b.n	80e7e <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   80e74:	2401      	movs	r4, #1
   80e76:	e002      	b.n	80e7e <xQueueGenericSendFromISR+0x72>
   80e78:	2401      	movs	r4, #1
   80e7a:	e000      	b.n	80e7e <xQueueGenericSendFromISR+0x72>
   80e7c:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   80e7e:	4638      	mov	r0, r7
   80e80:	4b05      	ldr	r3, [pc, #20]	; (80e98 <xQueueGenericSendFromISR+0x8c>)
   80e82:	4798      	blx	r3

	return xReturn;
}
   80e84:	4620      	mov	r0, r4
   80e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e8a:	bf00      	nop
   80e8c:	000808a1 	.word	0x000808a1
   80e90:	00080afd 	.word	0x00080afd
   80e94:	000817b9 	.word	0x000817b9
   80e98:	000808c9 	.word	0x000808c9

00080e9c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   80e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80ea0:	b085      	sub	sp, #20
   80ea2:	9201      	str	r2, [sp, #4]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   80ea4:	b918      	cbnz	r0, 80eae <xQueueGenericReceive+0x12>
   80ea6:	4b46      	ldr	r3, [pc, #280]	; (80fc0 <xQueueGenericReceive+0x124>)
   80ea8:	4798      	blx	r3
   80eaa:	bf00      	nop
   80eac:	e7fd      	b.n	80eaa <xQueueGenericReceive+0xe>
   80eae:	4689      	mov	r9, r1
   80eb0:	469a      	mov	sl, r3
   80eb2:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80eb4:	b929      	cbnz	r1, 80ec2 <xQueueGenericReceive+0x26>
   80eb6:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80eb8:	b12b      	cbz	r3, 80ec6 <xQueueGenericReceive+0x2a>
   80eba:	4b41      	ldr	r3, [pc, #260]	; (80fc0 <xQueueGenericReceive+0x124>)
   80ebc:	4798      	blx	r3
   80ebe:	bf00      	nop
   80ec0:	e7fd      	b.n	80ebe <xQueueGenericReceive+0x22>
   80ec2:	2700      	movs	r7, #0
   80ec4:	e000      	b.n	80ec8 <xQueueGenericReceive+0x2c>
   80ec6:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   80ec8:	4e3e      	ldr	r6, [pc, #248]	; (80fc4 <xQueueGenericReceive+0x128>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80eca:	f8df b128 	ldr.w	fp, [pc, #296]	; 80ff4 <xQueueGenericReceive+0x158>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80ece:	4d3e      	ldr	r5, [pc, #248]	; (80fc8 <xQueueGenericReceive+0x12c>)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   80ed0:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   80ed2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80ed4:	b343      	cbz	r3, 80f28 <xQueueGenericReceive+0x8c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   80ed6:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   80ed8:	4620      	mov	r0, r4
   80eda:	4649      	mov	r1, r9
   80edc:	4b3b      	ldr	r3, [pc, #236]	; (80fcc <xQueueGenericReceive+0x130>)
   80ede:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   80ee0:	f1ba 0f00 	cmp.w	sl, #0
   80ee4:	d112      	bne.n	80f0c <xQueueGenericReceive+0x70>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   80ee6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80ee8:	3b01      	subs	r3, #1
   80eea:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80eec:	6823      	ldr	r3, [r4, #0]
   80eee:	b913      	cbnz	r3, 80ef6 <xQueueGenericReceive+0x5a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   80ef0:	4b37      	ldr	r3, [pc, #220]	; (80fd0 <xQueueGenericReceive+0x134>)
   80ef2:	4798      	blx	r3
   80ef4:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80ef6:	6923      	ldr	r3, [r4, #16]
   80ef8:	b193      	cbz	r3, 80f20 <xQueueGenericReceive+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80efa:	f104 0010 	add.w	r0, r4, #16
   80efe:	4b35      	ldr	r3, [pc, #212]	; (80fd4 <xQueueGenericReceive+0x138>)
   80f00:	4798      	blx	r3
   80f02:	2801      	cmp	r0, #1
   80f04:	d10c      	bne.n	80f20 <xQueueGenericReceive+0x84>
						{
							portYIELD_WITHIN_API();
   80f06:	4b34      	ldr	r3, [pc, #208]	; (80fd8 <xQueueGenericReceive+0x13c>)
   80f08:	4798      	blx	r3
   80f0a:	e009      	b.n	80f20 <xQueueGenericReceive+0x84>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   80f0c:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80f0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80f10:	b133      	cbz	r3, 80f20 <xQueueGenericReceive+0x84>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80f12:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80f16:	4b2f      	ldr	r3, [pc, #188]	; (80fd4 <xQueueGenericReceive+0x138>)
   80f18:	4798      	blx	r3
   80f1a:	b108      	cbz	r0, 80f20 <xQueueGenericReceive+0x84>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   80f1c:	4b2e      	ldr	r3, [pc, #184]	; (80fd8 <xQueueGenericReceive+0x13c>)
   80f1e:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   80f20:	4b29      	ldr	r3, [pc, #164]	; (80fc8 <xQueueGenericReceive+0x12c>)
   80f22:	4798      	blx	r3
				return pdPASS;
   80f24:	2001      	movs	r0, #1
   80f26:	e048      	b.n	80fba <xQueueGenericReceive+0x11e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80f28:	9b01      	ldr	r3, [sp, #4]
   80f2a:	b91b      	cbnz	r3, 80f34 <xQueueGenericReceive+0x98>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80f2c:	4b26      	ldr	r3, [pc, #152]	; (80fc8 <xQueueGenericReceive+0x12c>)
   80f2e:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   80f30:	2000      	movs	r0, #0
   80f32:	e042      	b.n	80fba <xQueueGenericReceive+0x11e>
				}
				else if( xEntryTimeSet == pdFALSE )
   80f34:	b917      	cbnz	r7, 80f3c <xQueueGenericReceive+0xa0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80f36:	a802      	add	r0, sp, #8
   80f38:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   80f3a:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80f3c:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80f3e:	4b27      	ldr	r3, [pc, #156]	; (80fdc <xQueueGenericReceive+0x140>)
   80f40:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80f42:	47b0      	blx	r6
   80f44:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80f46:	f1b3 3fff 	cmp.w	r3, #4294967295
   80f4a:	bf04      	itt	eq
   80f4c:	2300      	moveq	r3, #0
   80f4e:	6463      	streq	r3, [r4, #68]	; 0x44
   80f50:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80f52:	f1b3 3fff 	cmp.w	r3, #4294967295
   80f56:	bf04      	itt	eq
   80f58:	2300      	moveq	r3, #0
   80f5a:	64a3      	streq	r3, [r4, #72]	; 0x48
   80f5c:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80f5e:	a802      	add	r0, sp, #8
   80f60:	a901      	add	r1, sp, #4
   80f62:	4b1f      	ldr	r3, [pc, #124]	; (80fe0 <xQueueGenericReceive+0x144>)
   80f64:	4798      	blx	r3
   80f66:	bb10      	cbnz	r0, 80fae <xQueueGenericReceive+0x112>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80f68:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   80f6a:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   80f6e:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80f70:	f1b8 0f00 	cmp.w	r8, #0
   80f74:	d115      	bne.n	80fa2 <xQueueGenericReceive+0x106>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80f76:	6823      	ldr	r3, [r4, #0]
   80f78:	b923      	cbnz	r3, 80f84 <xQueueGenericReceive+0xe8>
					{
						portENTER_CRITICAL();
   80f7a:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   80f7c:	6860      	ldr	r0, [r4, #4]
   80f7e:	4b19      	ldr	r3, [pc, #100]	; (80fe4 <xQueueGenericReceive+0x148>)
   80f80:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   80f82:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80f84:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80f88:	9901      	ldr	r1, [sp, #4]
   80f8a:	4b17      	ldr	r3, [pc, #92]	; (80fe8 <xQueueGenericReceive+0x14c>)
   80f8c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80f8e:	4620      	mov	r0, r4
   80f90:	4b16      	ldr	r3, [pc, #88]	; (80fec <xQueueGenericReceive+0x150>)
   80f92:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80f94:	4b16      	ldr	r3, [pc, #88]	; (80ff0 <xQueueGenericReceive+0x154>)
   80f96:	4798      	blx	r3
   80f98:	2800      	cmp	r0, #0
   80f9a:	d199      	bne.n	80ed0 <xQueueGenericReceive+0x34>
				{
					portYIELD_WITHIN_API();
   80f9c:	4b0e      	ldr	r3, [pc, #56]	; (80fd8 <xQueueGenericReceive+0x13c>)
   80f9e:	4798      	blx	r3
   80fa0:	e796      	b.n	80ed0 <xQueueGenericReceive+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   80fa2:	4620      	mov	r0, r4
   80fa4:	4b11      	ldr	r3, [pc, #68]	; (80fec <xQueueGenericReceive+0x150>)
   80fa6:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80fa8:	4b11      	ldr	r3, [pc, #68]	; (80ff0 <xQueueGenericReceive+0x154>)
   80faa:	4798      	blx	r3
   80fac:	e790      	b.n	80ed0 <xQueueGenericReceive+0x34>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   80fae:	4620      	mov	r0, r4
   80fb0:	4b0e      	ldr	r3, [pc, #56]	; (80fec <xQueueGenericReceive+0x150>)
   80fb2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80fb4:	4b0e      	ldr	r3, [pc, #56]	; (80ff0 <xQueueGenericReceive+0x154>)
   80fb6:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   80fb8:	2000      	movs	r0, #0
		}
	}
}
   80fba:	b005      	add	sp, #20
   80fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80fc0:	000808a1 	.word	0x000808a1
   80fc4:	000808b1 	.word	0x000808b1
   80fc8:	000808d1 	.word	0x000808d1
   80fcc:	00080b61 	.word	0x00080b61
   80fd0:	000818f5 	.word	0x000818f5
   80fd4:	000817b9 	.word	0x000817b9
   80fd8:	00080891 	.word	0x00080891
   80fdc:	00081309 	.word	0x00081309
   80fe0:	00081865 	.word	0x00081865
   80fe4:	00081921 	.word	0x00081921
   80fe8:	00081715 	.word	0x00081715
   80fec:	00080b89 	.word	0x00080b89
   80ff0:	00081459 	.word	0x00081459
   80ff4:	0008183d 	.word	0x0008183d

00080ff8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   80ff8:	b538      	push	{r3, r4, r5, lr}
   80ffa:	4604      	mov	r4, r0
   80ffc:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   80ffe:	4b0d      	ldr	r3, [pc, #52]	; (81034 <vQueueWaitForMessageRestricted+0x3c>)
   81000:	4798      	blx	r3
   81002:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81004:	f1b3 3fff 	cmp.w	r3, #4294967295
   81008:	bf04      	itt	eq
   8100a:	2300      	moveq	r3, #0
   8100c:	6463      	streq	r3, [r4, #68]	; 0x44
   8100e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81010:	f1b3 3fff 	cmp.w	r3, #4294967295
   81014:	bf04      	itt	eq
   81016:	2300      	moveq	r3, #0
   81018:	64a3      	streq	r3, [r4, #72]	; 0x48
   8101a:	4b07      	ldr	r3, [pc, #28]	; (81038 <vQueueWaitForMessageRestricted+0x40>)
   8101c:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   8101e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81020:	b923      	cbnz	r3, 8102c <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81022:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81026:	4629      	mov	r1, r5
   81028:	4b04      	ldr	r3, [pc, #16]	; (8103c <vQueueWaitForMessageRestricted+0x44>)
   8102a:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   8102c:	4620      	mov	r0, r4
   8102e:	4b04      	ldr	r3, [pc, #16]	; (81040 <vQueueWaitForMessageRestricted+0x48>)
   81030:	4798      	blx	r3
   81032:	bd38      	pop	{r3, r4, r5, pc}
   81034:	000808b1 	.word	0x000808b1
   81038:	000808d1 	.word	0x000808d1
   8103c:	00081775 	.word	0x00081775
   81040:	00080b89 	.word	0x00080b89

00081044 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   81044:	b510      	push	{r4, lr}
   81046:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   81048:	4b0e      	ldr	r3, [pc, #56]	; (81084 <prvAddCurrentTaskToDelayedList+0x40>)
   8104a:	681b      	ldr	r3, [r3, #0]
   8104c:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   8104e:	4b0e      	ldr	r3, [pc, #56]	; (81088 <prvAddCurrentTaskToDelayedList+0x44>)
   81050:	681b      	ldr	r3, [r3, #0]
   81052:	4298      	cmp	r0, r3
   81054:	d207      	bcs.n	81066 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81056:	4b0d      	ldr	r3, [pc, #52]	; (8108c <prvAddCurrentTaskToDelayedList+0x48>)
   81058:	6818      	ldr	r0, [r3, #0]
   8105a:	4b0a      	ldr	r3, [pc, #40]	; (81084 <prvAddCurrentTaskToDelayedList+0x40>)
   8105c:	6819      	ldr	r1, [r3, #0]
   8105e:	3104      	adds	r1, #4
   81060:	4b0b      	ldr	r3, [pc, #44]	; (81090 <prvAddCurrentTaskToDelayedList+0x4c>)
   81062:	4798      	blx	r3
   81064:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81066:	4b0b      	ldr	r3, [pc, #44]	; (81094 <prvAddCurrentTaskToDelayedList+0x50>)
   81068:	6818      	ldr	r0, [r3, #0]
   8106a:	4b06      	ldr	r3, [pc, #24]	; (81084 <prvAddCurrentTaskToDelayedList+0x40>)
   8106c:	6819      	ldr	r1, [r3, #0]
   8106e:	3104      	adds	r1, #4
   81070:	4b07      	ldr	r3, [pc, #28]	; (81090 <prvAddCurrentTaskToDelayedList+0x4c>)
   81072:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   81074:	4b08      	ldr	r3, [pc, #32]	; (81098 <prvAddCurrentTaskToDelayedList+0x54>)
   81076:	681b      	ldr	r3, [r3, #0]
   81078:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   8107a:	bf3c      	itt	cc
   8107c:	4b06      	ldrcc	r3, [pc, #24]	; (81098 <prvAddCurrentTaskToDelayedList+0x54>)
   8107e:	601c      	strcc	r4, [r3, #0]
   81080:	bd10      	pop	{r4, pc}
   81082:	bf00      	nop
   81084:	2007ab28 	.word	0x2007ab28
   81088:	2007ab44 	.word	0x2007ab44
   8108c:	2007ab48 	.word	0x2007ab48
   81090:	000807dd 	.word	0x000807dd
   81094:	2007aa74 	.word	0x2007aa74
   81098:	20070154 	.word	0x20070154

0008109c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   8109c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   810a0:	b083      	sub	sp, #12
   810a2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   810a4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   810a8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   810aa:	9001      	str	r0, [sp, #4]
   810ac:	b918      	cbnz	r0, 810b6 <xTaskGenericCreate+0x1a>
   810ae:	4b62      	ldr	r3, [pc, #392]	; (81238 <xTaskGenericCreate+0x19c>)
   810b0:	4798      	blx	r3
   810b2:	bf00      	nop
   810b4:	e7fd      	b.n	810b2 <xTaskGenericCreate+0x16>
   810b6:	4689      	mov	r9, r1
   810b8:	4615      	mov	r5, r2
   810ba:	469b      	mov	fp, r3
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   810bc:	2f04      	cmp	r7, #4
   810be:	d903      	bls.n	810c8 <xTaskGenericCreate+0x2c>
   810c0:	4b5d      	ldr	r3, [pc, #372]	; (81238 <xTaskGenericCreate+0x19c>)
   810c2:	4798      	blx	r3
   810c4:	bf00      	nop
   810c6:	e7fd      	b.n	810c4 <xTaskGenericCreate+0x28>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   810c8:	204c      	movs	r0, #76	; 0x4c
   810ca:	4b5c      	ldr	r3, [pc, #368]	; (8123c <xTaskGenericCreate+0x1a0>)
   810cc:	4798      	blx	r3

	if( pxNewTCB != NULL )
   810ce:	4604      	mov	r4, r0
   810d0:	2800      	cmp	r0, #0
   810d2:	f000 80ab 	beq.w	8122c <xTaskGenericCreate+0x190>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   810d6:	2e00      	cmp	r6, #0
   810d8:	f040 80a5 	bne.w	81226 <xTaskGenericCreate+0x18a>
   810dc:	00a8      	lsls	r0, r5, #2
   810de:	4b57      	ldr	r3, [pc, #348]	; (8123c <xTaskGenericCreate+0x1a0>)
   810e0:	4798      	blx	r3
   810e2:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   810e4:	b918      	cbnz	r0, 810ee <xTaskGenericCreate+0x52>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   810e6:	4620      	mov	r0, r4
   810e8:	4b55      	ldr	r3, [pc, #340]	; (81240 <xTaskGenericCreate+0x1a4>)
   810ea:	4798      	blx	r3
   810ec:	e09e      	b.n	8122c <xTaskGenericCreate+0x190>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   810ee:	21a5      	movs	r1, #165	; 0xa5
   810f0:	00aa      	lsls	r2, r5, #2
   810f2:	4b54      	ldr	r3, [pc, #336]	; (81244 <xTaskGenericCreate+0x1a8>)
   810f4:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   810f6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   810fa:	3d01      	subs	r5, #1
   810fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   810fe:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   81102:	f023 0507 	bic.w	r5, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   81106:	f104 0034 	add.w	r0, r4, #52	; 0x34
   8110a:	4649      	mov	r1, r9
   8110c:	220a      	movs	r2, #10
   8110e:	4b4e      	ldr	r3, [pc, #312]	; (81248 <xTaskGenericCreate+0x1ac>)
   81110:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   81112:	2300      	movs	r3, #0
   81114:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   81118:	463e      	mov	r6, r7
   8111a:	2f04      	cmp	r7, #4
   8111c:	bf28      	it	cs
   8111e:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   81120:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   81122:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   81124:	f104 0904 	add.w	r9, r4, #4
   81128:	4648      	mov	r0, r9
   8112a:	f8df a16c 	ldr.w	sl, [pc, #364]	; 81298 <xTaskGenericCreate+0x1fc>
   8112e:	47d0      	blx	sl
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   81130:	f104 0018 	add.w	r0, r4, #24
   81134:	47d0      	blx	sl

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   81136:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   81138:	f1c6 0605 	rsb	r6, r6, #5
   8113c:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   8113e:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   81140:	4628      	mov	r0, r5
   81142:	9901      	ldr	r1, [sp, #4]
   81144:	465a      	mov	r2, fp
   81146:	4b41      	ldr	r3, [pc, #260]	; (8124c <xTaskGenericCreate+0x1b0>)
   81148:	4798      	blx	r3
   8114a:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   8114c:	f010 0f07 	tst.w	r0, #7
   81150:	d003      	beq.n	8115a <xTaskGenericCreate+0xbe>
   81152:	4b39      	ldr	r3, [pc, #228]	; (81238 <xTaskGenericCreate+0x19c>)
   81154:	4798      	blx	r3
   81156:	bf00      	nop
   81158:	e7fd      	b.n	81156 <xTaskGenericCreate+0xba>

		if( ( void * ) pxCreatedTask != NULL )
   8115a:	f1b8 0f00 	cmp.w	r8, #0
   8115e:	d001      	beq.n	81164 <xTaskGenericCreate+0xc8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   81160:	f8c8 4000 	str.w	r4, [r8]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   81164:	4b3a      	ldr	r3, [pc, #232]	; (81250 <xTaskGenericCreate+0x1b4>)
   81166:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   81168:	4a3a      	ldr	r2, [pc, #232]	; (81254 <xTaskGenericCreate+0x1b8>)
   8116a:	6813      	ldr	r3, [r2, #0]
   8116c:	3301      	adds	r3, #1
   8116e:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
   81170:	4b39      	ldr	r3, [pc, #228]	; (81258 <xTaskGenericCreate+0x1bc>)
   81172:	681b      	ldr	r3, [r3, #0]
   81174:	bb0b      	cbnz	r3, 811ba <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   81176:	4b38      	ldr	r3, [pc, #224]	; (81258 <xTaskGenericCreate+0x1bc>)
   81178:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   8117a:	6813      	ldr	r3, [r2, #0]
   8117c:	2b01      	cmp	r3, #1
   8117e:	d126      	bne.n	811ce <xTaskGenericCreate+0x132>
   81180:	4d36      	ldr	r5, [pc, #216]	; (8125c <xTaskGenericCreate+0x1c0>)
   81182:	f105 0864 	add.w	r8, r5, #100	; 0x64
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   81186:	4e36      	ldr	r6, [pc, #216]	; (81260 <xTaskGenericCreate+0x1c4>)
   81188:	4628      	mov	r0, r5
   8118a:	47b0      	blx	r6
   8118c:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   8118e:	4545      	cmp	r5, r8
   81190:	d1fa      	bne.n	81188 <xTaskGenericCreate+0xec>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   81192:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8129c <xTaskGenericCreate+0x200>
   81196:	4640      	mov	r0, r8
   81198:	4d31      	ldr	r5, [pc, #196]	; (81260 <xTaskGenericCreate+0x1c4>)
   8119a:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   8119c:	4e31      	ldr	r6, [pc, #196]	; (81264 <xTaskGenericCreate+0x1c8>)
   8119e:	4630      	mov	r0, r6
   811a0:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
   811a2:	4831      	ldr	r0, [pc, #196]	; (81268 <xTaskGenericCreate+0x1cc>)
   811a4:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   811a6:	4831      	ldr	r0, [pc, #196]	; (8126c <xTaskGenericCreate+0x1d0>)
   811a8:	47a8      	blx	r5
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   811aa:	4831      	ldr	r0, [pc, #196]	; (81270 <xTaskGenericCreate+0x1d4>)
   811ac:	47a8      	blx	r5
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   811ae:	4b31      	ldr	r3, [pc, #196]	; (81274 <xTaskGenericCreate+0x1d8>)
   811b0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   811b4:	4b30      	ldr	r3, [pc, #192]	; (81278 <xTaskGenericCreate+0x1dc>)
   811b6:	601e      	str	r6, [r3, #0]
   811b8:	e009      	b.n	811ce <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   811ba:	4b30      	ldr	r3, [pc, #192]	; (8127c <xTaskGenericCreate+0x1e0>)
   811bc:	681b      	ldr	r3, [r3, #0]
   811be:	b933      	cbnz	r3, 811ce <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   811c0:	4b25      	ldr	r3, [pc, #148]	; (81258 <xTaskGenericCreate+0x1bc>)
   811c2:	681b      	ldr	r3, [r3, #0]
   811c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   811c6:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
   811c8:	bf24      	itt	cs
   811ca:	4b23      	ldrcs	r3, [pc, #140]	; (81258 <xTaskGenericCreate+0x1bc>)
   811cc:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   811ce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   811d0:	4b2b      	ldr	r3, [pc, #172]	; (81280 <xTaskGenericCreate+0x1e4>)
   811d2:	681b      	ldr	r3, [r3, #0]
   811d4:	4298      	cmp	r0, r3
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   811d6:	bf84      	itt	hi
   811d8:	4b29      	ldrhi	r3, [pc, #164]	; (81280 <xTaskGenericCreate+0x1e4>)
   811da:	6018      	strhi	r0, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   811dc:	4a29      	ldr	r2, [pc, #164]	; (81284 <xTaskGenericCreate+0x1e8>)
   811de:	6813      	ldr	r3, [r2, #0]
   811e0:	6423      	str	r3, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
   811e2:	3301      	adds	r3, #1
   811e4:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   811e6:	4b28      	ldr	r3, [pc, #160]	; (81288 <xTaskGenericCreate+0x1ec>)
   811e8:	681b      	ldr	r3, [r3, #0]
   811ea:	4298      	cmp	r0, r3
   811ec:	bf84      	itt	hi
   811ee:	4b26      	ldrhi	r3, [pc, #152]	; (81288 <xTaskGenericCreate+0x1ec>)
   811f0:	6018      	strhi	r0, [r3, #0]
   811f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   811f6:	4b19      	ldr	r3, [pc, #100]	; (8125c <xTaskGenericCreate+0x1c0>)
   811f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   811fc:	4649      	mov	r1, r9
   811fe:	4b23      	ldr	r3, [pc, #140]	; (8128c <xTaskGenericCreate+0x1f0>)
   81200:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   81202:	4b23      	ldr	r3, [pc, #140]	; (81290 <xTaskGenericCreate+0x1f4>)
   81204:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   81206:	4b1d      	ldr	r3, [pc, #116]	; (8127c <xTaskGenericCreate+0x1e0>)
   81208:	681b      	ldr	r3, [r3, #0]
   8120a:	b143      	cbz	r3, 8121e <xTaskGenericCreate+0x182>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   8120c:	4b12      	ldr	r3, [pc, #72]	; (81258 <xTaskGenericCreate+0x1bc>)
   8120e:	681b      	ldr	r3, [r3, #0]
   81210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81212:	429f      	cmp	r7, r3
   81214:	d905      	bls.n	81222 <xTaskGenericCreate+0x186>
			{
				portYIELD_WITHIN_API();
   81216:	4b1f      	ldr	r3, [pc, #124]	; (81294 <xTaskGenericCreate+0x1f8>)
   81218:	4798      	blx	r3
   8121a:	2001      	movs	r0, #1
   8121c:	e008      	b.n	81230 <xTaskGenericCreate+0x194>
   8121e:	2001      	movs	r0, #1
   81220:	e006      	b.n	81230 <xTaskGenericCreate+0x194>
   81222:	2001      	movs	r0, #1
   81224:	e004      	b.n	81230 <xTaskGenericCreate+0x194>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81226:	6306      	str	r6, [r0, #48]	; 0x30
   81228:	4630      	mov	r0, r6
   8122a:	e760      	b.n	810ee <xTaskGenericCreate+0x52>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   8122c:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   81230:	b003      	add	sp, #12
   81232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81236:	bf00      	nop
   81238:	000808a1 	.word	0x000808a1
   8123c:	000809fd 	.word	0x000809fd
   81240:	00080ac5 	.word	0x00080ac5
   81244:	000847fd 	.word	0x000847fd
   81248:	000849fd 	.word	0x000849fd
   8124c:	00080855 	.word	0x00080855
   81250:	000808b1 	.word	0x000808b1
   81254:	2007ab50 	.word	0x2007ab50
   81258:	2007ab28 	.word	0x2007ab28
   8125c:	2007aaac 	.word	0x2007aaac
   81260:	000807a1 	.word	0x000807a1
   81264:	2007aa94 	.word	0x2007aa94
   81268:	2007ab2c 	.word	0x2007ab2c
   8126c:	2007ab10 	.word	0x2007ab10
   81270:	2007aa60 	.word	0x2007aa60
   81274:	2007aa74 	.word	0x2007aa74
   81278:	2007ab48 	.word	0x2007ab48
   8127c:	2007aa78 	.word	0x2007aa78
   81280:	2007ab58 	.word	0x2007ab58
   81284:	2007ab4c 	.word	0x2007ab4c
   81288:	2007aaa8 	.word	0x2007aaa8
   8128c:	000807c1 	.word	0x000807c1
   81290:	000808d1 	.word	0x000808d1
   81294:	00080891 	.word	0x00080891
   81298:	000807b9 	.word	0x000807b9
   8129c:	2007aa80 	.word	0x2007aa80

000812a0 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   812a0:	b510      	push	{r4, lr}
   812a2:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   812a4:	2300      	movs	r3, #0
   812a6:	9300      	str	r3, [sp, #0]
   812a8:	9301      	str	r3, [sp, #4]
   812aa:	9302      	str	r3, [sp, #8]
   812ac:	9303      	str	r3, [sp, #12]
   812ae:	480e      	ldr	r0, [pc, #56]	; (812e8 <vTaskStartScheduler+0x48>)
   812b0:	490e      	ldr	r1, [pc, #56]	; (812ec <vTaskStartScheduler+0x4c>)
   812b2:	2282      	movs	r2, #130	; 0x82
   812b4:	4c0e      	ldr	r4, [pc, #56]	; (812f0 <vTaskStartScheduler+0x50>)
   812b6:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   812b8:	2801      	cmp	r0, #1
   812ba:	d10e      	bne.n	812da <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
   812bc:	4b0d      	ldr	r3, [pc, #52]	; (812f4 <vTaskStartScheduler+0x54>)
   812be:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   812c0:	2801      	cmp	r0, #1
   812c2:	d10a      	bne.n	812da <vTaskStartScheduler+0x3a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   812c4:	4b0c      	ldr	r3, [pc, #48]	; (812f8 <vTaskStartScheduler+0x58>)
   812c6:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   812c8:	2201      	movs	r2, #1
   812ca:	4b0c      	ldr	r3, [pc, #48]	; (812fc <vTaskStartScheduler+0x5c>)
   812cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   812ce:	2200      	movs	r2, #0
   812d0:	4b0b      	ldr	r3, [pc, #44]	; (81300 <vTaskStartScheduler+0x60>)
   812d2:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   812d4:	4b0b      	ldr	r3, [pc, #44]	; (81304 <vTaskStartScheduler+0x64>)
   812d6:	4798      	blx	r3
   812d8:	e004      	b.n	812e4 <vTaskStartScheduler+0x44>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   812da:	b918      	cbnz	r0, 812e4 <vTaskStartScheduler+0x44>
   812dc:	4b06      	ldr	r3, [pc, #24]	; (812f8 <vTaskStartScheduler+0x58>)
   812de:	4798      	blx	r3
   812e0:	bf00      	nop
   812e2:	e7fd      	b.n	812e0 <vTaskStartScheduler+0x40>
}
   812e4:	b004      	add	sp, #16
   812e6:	bd10      	pop	{r4, pc}
   812e8:	000815ed 	.word	0x000815ed
   812ec:	000876ac 	.word	0x000876ac
   812f0:	0008109d 	.word	0x0008109d
   812f4:	00081a99 	.word	0x00081a99
   812f8:	000808a1 	.word	0x000808a1
   812fc:	2007aa78 	.word	0x2007aa78
   81300:	2007ab44 	.word	0x2007ab44
   81304:	0008096d 	.word	0x0008096d

00081308 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   81308:	4a02      	ldr	r2, [pc, #8]	; (81314 <vTaskSuspendAll+0xc>)
   8130a:	6813      	ldr	r3, [r2, #0]
   8130c:	3301      	adds	r3, #1
   8130e:	6013      	str	r3, [r2, #0]
   81310:	4770      	bx	lr
   81312:	bf00      	nop
   81314:	2007ab40 	.word	0x2007ab40

00081318 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   81318:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   8131a:	4b04      	ldr	r3, [pc, #16]	; (8132c <xTaskGetTickCount+0x14>)
   8131c:	4798      	blx	r3
	{
		xTicks = xTickCount;
   8131e:	4b04      	ldr	r3, [pc, #16]	; (81330 <xTaskGetTickCount+0x18>)
   81320:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
   81322:	4b04      	ldr	r3, [pc, #16]	; (81334 <xTaskGetTickCount+0x1c>)
   81324:	4798      	blx	r3

	return xTicks;
}
   81326:	4620      	mov	r0, r4
   81328:	bd10      	pop	{r4, pc}
   8132a:	bf00      	nop
   8132c:	000808b1 	.word	0x000808b1
   81330:	2007ab44 	.word	0x2007ab44
   81334:	000808d1 	.word	0x000808d1

00081338 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   81338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8133c:	4b3a      	ldr	r3, [pc, #232]	; (81428 <vTaskIncrementTick+0xf0>)
   8133e:	681b      	ldr	r3, [r3, #0]
   81340:	2b00      	cmp	r3, #0
   81342:	d16b      	bne.n	8141c <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   81344:	4b39      	ldr	r3, [pc, #228]	; (8142c <vTaskIncrementTick+0xf4>)
   81346:	681a      	ldr	r2, [r3, #0]
   81348:	3201      	adds	r2, #1
   8134a:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   8134c:	681b      	ldr	r3, [r3, #0]
   8134e:	bb03      	cbnz	r3, 81392 <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   81350:	4b37      	ldr	r3, [pc, #220]	; (81430 <vTaskIncrementTick+0xf8>)
   81352:	681b      	ldr	r3, [r3, #0]
   81354:	681b      	ldr	r3, [r3, #0]
   81356:	b11b      	cbz	r3, 81360 <vTaskIncrementTick+0x28>
   81358:	4b36      	ldr	r3, [pc, #216]	; (81434 <vTaskIncrementTick+0xfc>)
   8135a:	4798      	blx	r3
   8135c:	bf00      	nop
   8135e:	e7fd      	b.n	8135c <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   81360:	4b33      	ldr	r3, [pc, #204]	; (81430 <vTaskIncrementTick+0xf8>)
   81362:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   81364:	4a34      	ldr	r2, [pc, #208]	; (81438 <vTaskIncrementTick+0x100>)
   81366:	6810      	ldr	r0, [r2, #0]
   81368:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   8136a:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   8136c:	4933      	ldr	r1, [pc, #204]	; (8143c <vTaskIncrementTick+0x104>)
   8136e:	680a      	ldr	r2, [r1, #0]
   81370:	3201      	adds	r2, #1
   81372:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81374:	681b      	ldr	r3, [r3, #0]
   81376:	681b      	ldr	r3, [r3, #0]
   81378:	b923      	cbnz	r3, 81384 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   8137a:	f04f 32ff 	mov.w	r2, #4294967295
   8137e:	4b30      	ldr	r3, [pc, #192]	; (81440 <vTaskIncrementTick+0x108>)
   81380:	601a      	str	r2, [r3, #0]
   81382:	e006      	b.n	81392 <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81384:	4b2a      	ldr	r3, [pc, #168]	; (81430 <vTaskIncrementTick+0xf8>)
   81386:	681b      	ldr	r3, [r3, #0]
   81388:	68db      	ldr	r3, [r3, #12]
   8138a:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   8138c:	685a      	ldr	r2, [r3, #4]
   8138e:	4b2c      	ldr	r3, [pc, #176]	; (81440 <vTaskIncrementTick+0x108>)
   81390:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   81392:	4b26      	ldr	r3, [pc, #152]	; (8142c <vTaskIncrementTick+0xf4>)
   81394:	681a      	ldr	r2, [r3, #0]
   81396:	4b2a      	ldr	r3, [pc, #168]	; (81440 <vTaskIncrementTick+0x108>)
   81398:	681b      	ldr	r3, [r3, #0]
   8139a:	429a      	cmp	r2, r3
   8139c:	d342      	bcc.n	81424 <vTaskIncrementTick+0xec>
   8139e:	4b24      	ldr	r3, [pc, #144]	; (81430 <vTaskIncrementTick+0xf8>)
   813a0:	681b      	ldr	r3, [r3, #0]
   813a2:	681b      	ldr	r3, [r3, #0]
   813a4:	b16b      	cbz	r3, 813c2 <vTaskIncrementTick+0x8a>
   813a6:	4b22      	ldr	r3, [pc, #136]	; (81430 <vTaskIncrementTick+0xf8>)
   813a8:	681b      	ldr	r3, [r3, #0]
   813aa:	68db      	ldr	r3, [r3, #12]
   813ac:	68dc      	ldr	r4, [r3, #12]
   813ae:	6863      	ldr	r3, [r4, #4]
   813b0:	4a1e      	ldr	r2, [pc, #120]	; (8142c <vTaskIncrementTick+0xf4>)
   813b2:	6812      	ldr	r2, [r2, #0]
   813b4:	4293      	cmp	r3, r2
   813b6:	d813      	bhi.n	813e0 <vTaskIncrementTick+0xa8>
   813b8:	4e22      	ldr	r6, [pc, #136]	; (81444 <vTaskIncrementTick+0x10c>)
   813ba:	4f23      	ldr	r7, [pc, #140]	; (81448 <vTaskIncrementTick+0x110>)
   813bc:	f8df 8094 	ldr.w	r8, [pc, #148]	; 81454 <vTaskIncrementTick+0x11c>
   813c0:	e012      	b.n	813e8 <vTaskIncrementTick+0xb0>
   813c2:	f04f 32ff 	mov.w	r2, #4294967295
   813c6:	4b1e      	ldr	r3, [pc, #120]	; (81440 <vTaskIncrementTick+0x108>)
   813c8:	601a      	str	r2, [r3, #0]
   813ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   813ce:	4b18      	ldr	r3, [pc, #96]	; (81430 <vTaskIncrementTick+0xf8>)
   813d0:	681b      	ldr	r3, [r3, #0]
   813d2:	68db      	ldr	r3, [r3, #12]
   813d4:	68dc      	ldr	r4, [r3, #12]
   813d6:	6863      	ldr	r3, [r4, #4]
   813d8:	4a14      	ldr	r2, [pc, #80]	; (8142c <vTaskIncrementTick+0xf4>)
   813da:	6812      	ldr	r2, [r2, #0]
   813dc:	4293      	cmp	r3, r2
   813de:	d903      	bls.n	813e8 <vTaskIncrementTick+0xb0>
   813e0:	4a17      	ldr	r2, [pc, #92]	; (81440 <vTaskIncrementTick+0x108>)
   813e2:	6013      	str	r3, [r2, #0]
   813e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   813e8:	1d25      	adds	r5, r4, #4
   813ea:	4628      	mov	r0, r5
   813ec:	47b0      	blx	r6
   813ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   813f0:	b113      	cbz	r3, 813f8 <vTaskIncrementTick+0xc0>
   813f2:	f104 0018 	add.w	r0, r4, #24
   813f6:	47b0      	blx	r6
   813f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   813fa:	683b      	ldr	r3, [r7, #0]
   813fc:	4298      	cmp	r0, r3
   813fe:	bf88      	it	hi
   81400:	6038      	strhi	r0, [r7, #0]
   81402:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81406:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   8140a:	4629      	mov	r1, r5
   8140c:	4b0f      	ldr	r3, [pc, #60]	; (8144c <vTaskIncrementTick+0x114>)
   8140e:	4798      	blx	r3
   81410:	4b07      	ldr	r3, [pc, #28]	; (81430 <vTaskIncrementTick+0xf8>)
   81412:	681b      	ldr	r3, [r3, #0]
   81414:	681b      	ldr	r3, [r3, #0]
   81416:	2b00      	cmp	r3, #0
   81418:	d1d9      	bne.n	813ce <vTaskIncrementTick+0x96>
   8141a:	e7d2      	b.n	813c2 <vTaskIncrementTick+0x8a>
	}
	else
	{
		++uxMissedTicks;
   8141c:	4a0c      	ldr	r2, [pc, #48]	; (81450 <vTaskIncrementTick+0x118>)
   8141e:	6813      	ldr	r3, [r2, #0]
   81420:	3301      	adds	r3, #1
   81422:	6013      	str	r3, [r2, #0]
   81424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81428:	2007ab40 	.word	0x2007ab40
   8142c:	2007ab44 	.word	0x2007ab44
   81430:	2007aa74 	.word	0x2007aa74
   81434:	000808a1 	.word	0x000808a1
   81438:	2007ab48 	.word	0x2007ab48
   8143c:	2007ab24 	.word	0x2007ab24
   81440:	20070154 	.word	0x20070154
   81444:	00080819 	.word	0x00080819
   81448:	2007aaa8 	.word	0x2007aaa8
   8144c:	000807c1 	.word	0x000807c1
   81450:	2007aa5c 	.word	0x2007aa5c
   81454:	2007aaac 	.word	0x2007aaac

00081458 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   81458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   8145c:	4b30      	ldr	r3, [pc, #192]	; (81520 <xTaskResumeAll+0xc8>)
   8145e:	681b      	ldr	r3, [r3, #0]
   81460:	b91b      	cbnz	r3, 8146a <xTaskResumeAll+0x12>
   81462:	4b30      	ldr	r3, [pc, #192]	; (81524 <xTaskResumeAll+0xcc>)
   81464:	4798      	blx	r3
   81466:	bf00      	nop
   81468:	e7fd      	b.n	81466 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   8146a:	4b2f      	ldr	r3, [pc, #188]	; (81528 <xTaskResumeAll+0xd0>)
   8146c:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   8146e:	4b2c      	ldr	r3, [pc, #176]	; (81520 <xTaskResumeAll+0xc8>)
   81470:	681a      	ldr	r2, [r3, #0]
   81472:	3a01      	subs	r2, #1
   81474:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81476:	681b      	ldr	r3, [r3, #0]
   81478:	2b00      	cmp	r3, #0
   8147a:	d149      	bne.n	81510 <xTaskResumeAll+0xb8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   8147c:	4b2b      	ldr	r3, [pc, #172]	; (8152c <xTaskResumeAll+0xd4>)
   8147e:	681b      	ldr	r3, [r3, #0]
   81480:	bb03      	cbnz	r3, 814c4 <xTaskResumeAll+0x6c>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81482:	2400      	movs	r4, #0
   81484:	e047      	b.n	81516 <xTaskResumeAll+0xbe>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   81486:	f8d8 300c 	ldr.w	r3, [r8, #12]
   8148a:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   8148c:	f104 0018 	add.w	r0, r4, #24
   81490:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81492:	f104 0904 	add.w	r9, r4, #4
   81496:	4648      	mov	r0, r9
   81498:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   8149a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8149c:	6833      	ldr	r3, [r6, #0]
   8149e:	4298      	cmp	r0, r3
   814a0:	bf88      	it	hi
   814a2:	6030      	strhi	r0, [r6, #0]
   814a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   814a8:	4b21      	ldr	r3, [pc, #132]	; (81530 <xTaskResumeAll+0xd8>)
   814aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   814ae:	4649      	mov	r1, r9
   814b0:	4b20      	ldr	r3, [pc, #128]	; (81534 <xTaskResumeAll+0xdc>)
   814b2:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   814b4:	4b20      	ldr	r3, [pc, #128]	; (81538 <xTaskResumeAll+0xe0>)
   814b6:	681b      	ldr	r3, [r3, #0]
   814b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   814ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   814bc:	429a      	cmp	r2, r3
   814be:	bf28      	it	cs
   814c0:	2501      	movcs	r5, #1
   814c2:	e004      	b.n	814ce <xTaskResumeAll+0x76>
   814c4:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   814c6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 81558 <xTaskResumeAll+0x100>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   814ca:	4f1c      	ldr	r7, [pc, #112]	; (8153c <xTaskResumeAll+0xe4>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   814cc:	4e1c      	ldr	r6, [pc, #112]	; (81540 <xTaskResumeAll+0xe8>)
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   814ce:	f8d8 3000 	ldr.w	r3, [r8]
   814d2:	2b00      	cmp	r3, #0
   814d4:	d1d7      	bne.n	81486 <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   814d6:	4b1b      	ldr	r3, [pc, #108]	; (81544 <xTaskResumeAll+0xec>)
   814d8:	681b      	ldr	r3, [r3, #0]
   814da:	b163      	cbz	r3, 814f6 <xTaskResumeAll+0x9e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   814dc:	4b19      	ldr	r3, [pc, #100]	; (81544 <xTaskResumeAll+0xec>)
   814de:	681b      	ldr	r3, [r3, #0]
   814e0:	b17b      	cbz	r3, 81502 <xTaskResumeAll+0xaa>
					{
						vTaskIncrementTick();
   814e2:	4d19      	ldr	r5, [pc, #100]	; (81548 <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
   814e4:	4c17      	ldr	r4, [pc, #92]	; (81544 <xTaskResumeAll+0xec>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   814e6:	47a8      	blx	r5
						--uxMissedTicks;
   814e8:	6823      	ldr	r3, [r4, #0]
   814ea:	3b01      	subs	r3, #1
   814ec:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   814ee:	6823      	ldr	r3, [r4, #0]
   814f0:	2b00      	cmp	r3, #0
   814f2:	d1f8      	bne.n	814e6 <xTaskResumeAll+0x8e>
   814f4:	e005      	b.n	81502 <xTaskResumeAll+0xaa>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   814f6:	2d01      	cmp	r5, #1
   814f8:	d003      	beq.n	81502 <xTaskResumeAll+0xaa>
   814fa:	4b14      	ldr	r3, [pc, #80]	; (8154c <xTaskResumeAll+0xf4>)
   814fc:	681b      	ldr	r3, [r3, #0]
   814fe:	2b01      	cmp	r3, #1
   81500:	d108      	bne.n	81514 <xTaskResumeAll+0xbc>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   81502:	2200      	movs	r2, #0
   81504:	4b11      	ldr	r3, [pc, #68]	; (8154c <xTaskResumeAll+0xf4>)
   81506:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   81508:	4b11      	ldr	r3, [pc, #68]	; (81550 <xTaskResumeAll+0xf8>)
   8150a:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   8150c:	2401      	movs	r4, #1
   8150e:	e002      	b.n	81516 <xTaskResumeAll+0xbe>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81510:	2400      	movs	r4, #0
   81512:	e000      	b.n	81516 <xTaskResumeAll+0xbe>
   81514:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   81516:	4b0f      	ldr	r3, [pc, #60]	; (81554 <xTaskResumeAll+0xfc>)
   81518:	4798      	blx	r3

	return xAlreadyYielded;
}
   8151a:	4620      	mov	r0, r4
   8151c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81520:	2007ab40 	.word	0x2007ab40
   81524:	000808a1 	.word	0x000808a1
   81528:	000808b1 	.word	0x000808b1
   8152c:	2007ab50 	.word	0x2007ab50
   81530:	2007aaac 	.word	0x2007aaac
   81534:	000807c1 	.word	0x000807c1
   81538:	2007ab28 	.word	0x2007ab28
   8153c:	00080819 	.word	0x00080819
   81540:	2007aaa8 	.word	0x2007aaa8
   81544:	2007aa5c 	.word	0x2007aa5c
   81548:	00081339 	.word	0x00081339
   8154c:	2007ab54 	.word	0x2007ab54
   81550:	00080891 	.word	0x00080891
   81554:	000808d1 	.word	0x000808d1
   81558:	2007ab2c 	.word	0x2007ab2c

0008155c <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   8155c:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   8155e:	b918      	cbnz	r0, 81568 <vTaskDelayUntil+0xc>
   81560:	4b1a      	ldr	r3, [pc, #104]	; (815cc <vTaskDelayUntil+0x70>)
   81562:	4798      	blx	r3
   81564:	bf00      	nop
   81566:	e7fd      	b.n	81564 <vTaskDelayUntil+0x8>
   81568:	460c      	mov	r4, r1
   8156a:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
   8156c:	b919      	cbnz	r1, 81576 <vTaskDelayUntil+0x1a>
   8156e:	4b17      	ldr	r3, [pc, #92]	; (815cc <vTaskDelayUntil+0x70>)
   81570:	4798      	blx	r3
   81572:	bf00      	nop
   81574:	e7fd      	b.n	81572 <vTaskDelayUntil+0x16>

		vTaskSuspendAll();
   81576:	4b16      	ldr	r3, [pc, #88]	; (815d0 <vTaskDelayUntil+0x74>)
   81578:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   8157a:	682b      	ldr	r3, [r5, #0]
   8157c:	441c      	add	r4, r3

			if( xTickCount < *pxPreviousWakeTime )
   8157e:	4a15      	ldr	r2, [pc, #84]	; (815d4 <vTaskDelayUntil+0x78>)
   81580:	6812      	ldr	r2, [r2, #0]
   81582:	4293      	cmp	r3, r2
   81584:	d907      	bls.n	81596 <vTaskDelayUntil+0x3a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   81586:	42a3      	cmp	r3, r4
   81588:	d91c      	bls.n	815c4 <vTaskDelayUntil+0x68>
   8158a:	4b12      	ldr	r3, [pc, #72]	; (815d4 <vTaskDelayUntil+0x78>)
   8158c:	681b      	ldr	r3, [r3, #0]
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   8158e:	602c      	str	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   81590:	429c      	cmp	r4, r3
   81592:	d90f      	bls.n	815b4 <vTaskDelayUntil+0x58>
   81594:	e006      	b.n	815a4 <vTaskDelayUntil+0x48>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   81596:	42a3      	cmp	r3, r4
   81598:	d812      	bhi.n	815c0 <vTaskDelayUntil+0x64>
   8159a:	4b0e      	ldr	r3, [pc, #56]	; (815d4 <vTaskDelayUntil+0x78>)
   8159c:	681b      	ldr	r3, [r3, #0]
   8159e:	429c      	cmp	r4, r3
   815a0:	d80e      	bhi.n	815c0 <vTaskDelayUntil+0x64>
   815a2:	e00f      	b.n	815c4 <vTaskDelayUntil+0x68>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   815a4:	4b0c      	ldr	r3, [pc, #48]	; (815d8 <vTaskDelayUntil+0x7c>)
   815a6:	6818      	ldr	r0, [r3, #0]
   815a8:	3004      	adds	r0, #4
   815aa:	4b0c      	ldr	r3, [pc, #48]	; (815dc <vTaskDelayUntil+0x80>)
   815ac:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   815ae:	4620      	mov	r0, r4
   815b0:	4b0b      	ldr	r3, [pc, #44]	; (815e0 <vTaskDelayUntil+0x84>)
   815b2:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   815b4:	4b0b      	ldr	r3, [pc, #44]	; (815e4 <vTaskDelayUntil+0x88>)
   815b6:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   815b8:	b930      	cbnz	r0, 815c8 <vTaskDelayUntil+0x6c>
		{
			portYIELD_WITHIN_API();
   815ba:	4b0b      	ldr	r3, [pc, #44]	; (815e8 <vTaskDelayUntil+0x8c>)
   815bc:	4798      	blx	r3
   815be:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   815c0:	602c      	str	r4, [r5, #0]
   815c2:	e7ef      	b.n	815a4 <vTaskDelayUntil+0x48>
   815c4:	602c      	str	r4, [r5, #0]
   815c6:	e7f5      	b.n	815b4 <vTaskDelayUntil+0x58>
   815c8:	bd38      	pop	{r3, r4, r5, pc}
   815ca:	bf00      	nop
   815cc:	000808a1 	.word	0x000808a1
   815d0:	00081309 	.word	0x00081309
   815d4:	2007ab44 	.word	0x2007ab44
   815d8:	2007ab28 	.word	0x2007ab28
   815dc:	00080819 	.word	0x00080819
   815e0:	00081045 	.word	0x00081045
   815e4:	00081459 	.word	0x00081459
   815e8:	00080891 	.word	0x00080891

000815ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   815ec:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   815ee:	4d15      	ldr	r5, [pc, #84]	; (81644 <prvIdleTask+0x58>)
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   815f0:	4e15      	ldr	r6, [pc, #84]	; (81648 <prvIdleTask+0x5c>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   815f2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 81668 <prvIdleTask+0x7c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			xTaskResumeAll();
   815f6:	4f15      	ldr	r7, [pc, #84]	; (8164c <prvIdleTask+0x60>)
   815f8:	e019      	b.n	8162e <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   815fa:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   815fc:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   815fe:	47b8      	blx	r7

			if( xListIsEmpty == pdFALSE )
   81600:	b1ac      	cbz	r4, 8162e <prvIdleTask+0x42>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   81602:	4b13      	ldr	r3, [pc, #76]	; (81650 <prvIdleTask+0x64>)
   81604:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   81606:	68f3      	ldr	r3, [r6, #12]
   81608:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   8160a:	1d20      	adds	r0, r4, #4
   8160c:	4b11      	ldr	r3, [pc, #68]	; (81654 <prvIdleTask+0x68>)
   8160e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   81610:	4a11      	ldr	r2, [pc, #68]	; (81658 <prvIdleTask+0x6c>)
   81612:	6813      	ldr	r3, [r2, #0]
   81614:	3b01      	subs	r3, #1
   81616:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
   81618:	682b      	ldr	r3, [r5, #0]
   8161a:	3b01      	subs	r3, #1
   8161c:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   8161e:	4b0f      	ldr	r3, [pc, #60]	; (8165c <prvIdleTask+0x70>)
   81620:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   81622:	6b20      	ldr	r0, [r4, #48]	; 0x30
   81624:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8166c <prvIdleTask+0x80>
   81628:	47c8      	blx	r9
		vPortFree( pxTCB );
   8162a:	4620      	mov	r0, r4
   8162c:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   8162e:	682b      	ldr	r3, [r5, #0]
   81630:	2b00      	cmp	r3, #0
   81632:	d1e2      	bne.n	815fa <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81634:	4b0a      	ldr	r3, [pc, #40]	; (81660 <prvIdleTask+0x74>)
   81636:	681b      	ldr	r3, [r3, #0]
   81638:	2b01      	cmp	r3, #1
   8163a:	d9f8      	bls.n	8162e <prvIdleTask+0x42>
			{
				taskYIELD();
   8163c:	4b09      	ldr	r3, [pc, #36]	; (81664 <prvIdleTask+0x78>)
   8163e:	4798      	blx	r3
   81640:	e7d7      	b.n	815f2 <prvIdleTask+0x6>
   81642:	bf00      	nop
   81644:	2007aa7c 	.word	0x2007aa7c
   81648:	2007ab10 	.word	0x2007ab10
   8164c:	00081459 	.word	0x00081459
   81650:	000808b1 	.word	0x000808b1
   81654:	00080819 	.word	0x00080819
   81658:	2007ab50 	.word	0x2007ab50
   8165c:	000808d1 	.word	0x000808d1
   81660:	2007aaac 	.word	0x2007aaac
   81664:	00080891 	.word	0x00080891
   81668:	00081309 	.word	0x00081309
   8166c:	00080ac5 	.word	0x00080ac5

00081670 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   81670:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   81672:	4b22      	ldr	r3, [pc, #136]	; (816fc <vTaskSwitchContext+0x8c>)
   81674:	681b      	ldr	r3, [r3, #0]
   81676:	b96b      	cbnz	r3, 81694 <vTaskSwitchContext+0x24>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81678:	4b21      	ldr	r3, [pc, #132]	; (81700 <vTaskSwitchContext+0x90>)
   8167a:	681b      	ldr	r3, [r3, #0]
   8167c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81680:	009b      	lsls	r3, r3, #2
   81682:	4a20      	ldr	r2, [pc, #128]	; (81704 <vTaskSwitchContext+0x94>)
   81684:	58d3      	ldr	r3, [r2, r3]
   81686:	b9cb      	cbnz	r3, 816bc <vTaskSwitchContext+0x4c>
   81688:	4b1d      	ldr	r3, [pc, #116]	; (81700 <vTaskSwitchContext+0x90>)
   8168a:	681b      	ldr	r3, [r3, #0]
   8168c:	b143      	cbz	r3, 816a0 <vTaskSwitchContext+0x30>
   8168e:	4a1c      	ldr	r2, [pc, #112]	; (81700 <vTaskSwitchContext+0x90>)
   81690:	491c      	ldr	r1, [pc, #112]	; (81704 <vTaskSwitchContext+0x94>)
   81692:	e009      	b.n	816a8 <vTaskSwitchContext+0x38>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   81694:	2201      	movs	r2, #1
   81696:	4b1c      	ldr	r3, [pc, #112]	; (81708 <vTaskSwitchContext+0x98>)
   81698:	601a      	str	r2, [r3, #0]
   8169a:	bd10      	pop	{r4, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   8169c:	6813      	ldr	r3, [r2, #0]
   8169e:	b91b      	cbnz	r3, 816a8 <vTaskSwitchContext+0x38>
   816a0:	4b1a      	ldr	r3, [pc, #104]	; (8170c <vTaskSwitchContext+0x9c>)
   816a2:	4798      	blx	r3
   816a4:	bf00      	nop
   816a6:	e7fd      	b.n	816a4 <vTaskSwitchContext+0x34>
   816a8:	6813      	ldr	r3, [r2, #0]
   816aa:	3b01      	subs	r3, #1
   816ac:	6013      	str	r3, [r2, #0]
   816ae:	6813      	ldr	r3, [r2, #0]
   816b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   816b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   816b8:	2b00      	cmp	r3, #0
   816ba:	d0ef      	beq.n	8169c <vTaskSwitchContext+0x2c>
   816bc:	4b10      	ldr	r3, [pc, #64]	; (81700 <vTaskSwitchContext+0x90>)
   816be:	681b      	ldr	r3, [r3, #0]
   816c0:	4a10      	ldr	r2, [pc, #64]	; (81704 <vTaskSwitchContext+0x94>)
   816c2:	0099      	lsls	r1, r3, #2
   816c4:	18c8      	adds	r0, r1, r3
   816c6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   816ca:	6844      	ldr	r4, [r0, #4]
   816cc:	6864      	ldr	r4, [r4, #4]
   816ce:	6044      	str	r4, [r0, #4]
   816d0:	4602      	mov	r2, r0
   816d2:	3208      	adds	r2, #8
   816d4:	4294      	cmp	r4, r2
   816d6:	d106      	bne.n	816e6 <vTaskSwitchContext+0x76>
   816d8:	6860      	ldr	r0, [r4, #4]
   816da:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   816de:	4a09      	ldr	r2, [pc, #36]	; (81704 <vTaskSwitchContext+0x94>)
   816e0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   816e4:	6050      	str	r0, [r2, #4]
   816e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   816ea:	4a06      	ldr	r2, [pc, #24]	; (81704 <vTaskSwitchContext+0x94>)
   816ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   816f0:	685b      	ldr	r3, [r3, #4]
   816f2:	68da      	ldr	r2, [r3, #12]
   816f4:	4b06      	ldr	r3, [pc, #24]	; (81710 <vTaskSwitchContext+0xa0>)
   816f6:	601a      	str	r2, [r3, #0]
   816f8:	bd10      	pop	{r4, pc}
   816fa:	bf00      	nop
   816fc:	2007ab40 	.word	0x2007ab40
   81700:	2007aaa8 	.word	0x2007aaa8
   81704:	2007aaac 	.word	0x2007aaac
   81708:	2007ab54 	.word	0x2007ab54
   8170c:	000808a1 	.word	0x000808a1
   81710:	2007ab28 	.word	0x2007ab28

00081714 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   81714:	b538      	push	{r3, r4, r5, lr}
portTickType xTimeToWake;

	configASSERT( pxEventList );
   81716:	b918      	cbnz	r0, 81720 <vTaskPlaceOnEventList+0xc>
   81718:	4b0e      	ldr	r3, [pc, #56]	; (81754 <vTaskPlaceOnEventList+0x40>)
   8171a:	4798      	blx	r3
   8171c:	bf00      	nop
   8171e:	e7fd      	b.n	8171c <vTaskPlaceOnEventList+0x8>
   81720:	460c      	mov	r4, r1
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81722:	4d0d      	ldr	r5, [pc, #52]	; (81758 <vTaskPlaceOnEventList+0x44>)
   81724:	6829      	ldr	r1, [r5, #0]
   81726:	3118      	adds	r1, #24
   81728:	4b0c      	ldr	r3, [pc, #48]	; (8175c <vTaskPlaceOnEventList+0x48>)
   8172a:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   8172c:	6828      	ldr	r0, [r5, #0]
   8172e:	3004      	adds	r0, #4
   81730:	4b0b      	ldr	r3, [pc, #44]	; (81760 <vTaskPlaceOnEventList+0x4c>)
   81732:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   81734:	f1b4 3fff 	cmp.w	r4, #4294967295
   81738:	d105      	bne.n	81746 <vTaskPlaceOnEventList+0x32>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   8173a:	6829      	ldr	r1, [r5, #0]
   8173c:	4809      	ldr	r0, [pc, #36]	; (81764 <vTaskPlaceOnEventList+0x50>)
   8173e:	3104      	adds	r1, #4
   81740:	4b09      	ldr	r3, [pc, #36]	; (81768 <vTaskPlaceOnEventList+0x54>)
   81742:	4798      	blx	r3
   81744:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   81746:	4b09      	ldr	r3, [pc, #36]	; (8176c <vTaskPlaceOnEventList+0x58>)
   81748:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   8174a:	4420      	add	r0, r4
   8174c:	4b08      	ldr	r3, [pc, #32]	; (81770 <vTaskPlaceOnEventList+0x5c>)
   8174e:	4798      	blx	r3
   81750:	bd38      	pop	{r3, r4, r5, pc}
   81752:	bf00      	nop
   81754:	000808a1 	.word	0x000808a1
   81758:	2007ab28 	.word	0x2007ab28
   8175c:	000807dd 	.word	0x000807dd
   81760:	00080819 	.word	0x00080819
   81764:	2007aa60 	.word	0x2007aa60
   81768:	000807c1 	.word	0x000807c1
   8176c:	2007ab44 	.word	0x2007ab44
   81770:	00081045 	.word	0x00081045

00081774 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   81774:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   81776:	b918      	cbnz	r0, 81780 <vTaskPlaceOnEventListRestricted+0xc>
   81778:	4b09      	ldr	r3, [pc, #36]	; (817a0 <vTaskPlaceOnEventListRestricted+0x2c>)
   8177a:	4798      	blx	r3
   8177c:	bf00      	nop
   8177e:	e7fd      	b.n	8177c <vTaskPlaceOnEventListRestricted+0x8>
   81780:	460d      	mov	r5, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81782:	4c08      	ldr	r4, [pc, #32]	; (817a4 <vTaskPlaceOnEventListRestricted+0x30>)
   81784:	6821      	ldr	r1, [r4, #0]
   81786:	3118      	adds	r1, #24
   81788:	4b07      	ldr	r3, [pc, #28]	; (817a8 <vTaskPlaceOnEventListRestricted+0x34>)
   8178a:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   8178c:	6820      	ldr	r0, [r4, #0]
   8178e:	3004      	adds	r0, #4
   81790:	4b06      	ldr	r3, [pc, #24]	; (817ac <vTaskPlaceOnEventListRestricted+0x38>)
   81792:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   81794:	4b06      	ldr	r3, [pc, #24]	; (817b0 <vTaskPlaceOnEventListRestricted+0x3c>)
   81796:	6818      	ldr	r0, [r3, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   81798:	4428      	add	r0, r5
   8179a:	4b06      	ldr	r3, [pc, #24]	; (817b4 <vTaskPlaceOnEventListRestricted+0x40>)
   8179c:	4798      	blx	r3
   8179e:	bd38      	pop	{r3, r4, r5, pc}
   817a0:	000808a1 	.word	0x000808a1
   817a4:	2007ab28 	.word	0x2007ab28
   817a8:	000807c1 	.word	0x000807c1
   817ac:	00080819 	.word	0x00080819
   817b0:	2007ab44 	.word	0x2007ab44
   817b4:	00081045 	.word	0x00081045

000817b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   817b8:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   817ba:	68c3      	ldr	r3, [r0, #12]
   817bc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   817be:	b91c      	cbnz	r4, 817c8 <xTaskRemoveFromEventList+0x10>
   817c0:	4b16      	ldr	r3, [pc, #88]	; (8181c <xTaskRemoveFromEventList+0x64>)
   817c2:	4798      	blx	r3
   817c4:	bf00      	nop
   817c6:	e7fd      	b.n	817c4 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   817c8:	f104 0518 	add.w	r5, r4, #24
   817cc:	4628      	mov	r0, r5
   817ce:	4b14      	ldr	r3, [pc, #80]	; (81820 <xTaskRemoveFromEventList+0x68>)
   817d0:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   817d2:	4b14      	ldr	r3, [pc, #80]	; (81824 <xTaskRemoveFromEventList+0x6c>)
   817d4:	681b      	ldr	r3, [r3, #0]
   817d6:	b99b      	cbnz	r3, 81800 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   817d8:	1d25      	adds	r5, r4, #4
   817da:	4628      	mov	r0, r5
   817dc:	4b10      	ldr	r3, [pc, #64]	; (81820 <xTaskRemoveFromEventList+0x68>)
   817de:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   817e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   817e2:	4b11      	ldr	r3, [pc, #68]	; (81828 <xTaskRemoveFromEventList+0x70>)
   817e4:	681b      	ldr	r3, [r3, #0]
   817e6:	4298      	cmp	r0, r3
   817e8:	bf84      	itt	hi
   817ea:	4b0f      	ldrhi	r3, [pc, #60]	; (81828 <xTaskRemoveFromEventList+0x70>)
   817ec:	6018      	strhi	r0, [r3, #0]
   817ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   817f2:	4b0e      	ldr	r3, [pc, #56]	; (8182c <xTaskRemoveFromEventList+0x74>)
   817f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   817f8:	4629      	mov	r1, r5
   817fa:	4b0d      	ldr	r3, [pc, #52]	; (81830 <xTaskRemoveFromEventList+0x78>)
   817fc:	4798      	blx	r3
   817fe:	e003      	b.n	81808 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81800:	480c      	ldr	r0, [pc, #48]	; (81834 <xTaskRemoveFromEventList+0x7c>)
   81802:	4629      	mov	r1, r5
   81804:	4b0a      	ldr	r3, [pc, #40]	; (81830 <xTaskRemoveFromEventList+0x78>)
   81806:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81808:	4b0b      	ldr	r3, [pc, #44]	; (81838 <xTaskRemoveFromEventList+0x80>)
   8180a:	681b      	ldr	r3, [r3, #0]
   8180c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   81810:	4298      	cmp	r0, r3
   81812:	bf34      	ite	cc
   81814:	2000      	movcc	r0, #0
   81816:	2001      	movcs	r0, #1
   81818:	bd38      	pop	{r3, r4, r5, pc}
   8181a:	bf00      	nop
   8181c:	000808a1 	.word	0x000808a1
   81820:	00080819 	.word	0x00080819
   81824:	2007ab40 	.word	0x2007ab40
   81828:	2007aaa8 	.word	0x2007aaa8
   8182c:	2007aaac 	.word	0x2007aaac
   81830:	000807c1 	.word	0x000807c1
   81834:	2007ab2c 	.word	0x2007ab2c
   81838:	2007ab28 	.word	0x2007ab28

0008183c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   8183c:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   8183e:	b918      	cbnz	r0, 81848 <vTaskSetTimeOutState+0xc>
   81840:	4b05      	ldr	r3, [pc, #20]	; (81858 <vTaskSetTimeOutState+0x1c>)
   81842:	4798      	blx	r3
   81844:	bf00      	nop
   81846:	e7fd      	b.n	81844 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81848:	4a04      	ldr	r2, [pc, #16]	; (8185c <vTaskSetTimeOutState+0x20>)
   8184a:	6812      	ldr	r2, [r2, #0]
   8184c:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   8184e:	4a04      	ldr	r2, [pc, #16]	; (81860 <vTaskSetTimeOutState+0x24>)
   81850:	6812      	ldr	r2, [r2, #0]
   81852:	6042      	str	r2, [r0, #4]
   81854:	bd08      	pop	{r3, pc}
   81856:	bf00      	nop
   81858:	000808a1 	.word	0x000808a1
   8185c:	2007ab24 	.word	0x2007ab24
   81860:	2007ab44 	.word	0x2007ab44

00081864 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   81864:	b538      	push	{r3, r4, r5, lr}
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   81866:	b918      	cbnz	r0, 81870 <xTaskCheckForTimeOut+0xc>
   81868:	4b19      	ldr	r3, [pc, #100]	; (818d0 <xTaskCheckForTimeOut+0x6c>)
   8186a:	4798      	blx	r3
   8186c:	bf00      	nop
   8186e:	e7fd      	b.n	8186c <xTaskCheckForTimeOut+0x8>
   81870:	460d      	mov	r5, r1
   81872:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
   81874:	b919      	cbnz	r1, 8187e <xTaskCheckForTimeOut+0x1a>
   81876:	4b16      	ldr	r3, [pc, #88]	; (818d0 <xTaskCheckForTimeOut+0x6c>)
   81878:	4798      	blx	r3
   8187a:	bf00      	nop
   8187c:	e7fd      	b.n	8187a <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   8187e:	4b15      	ldr	r3, [pc, #84]	; (818d4 <xTaskCheckForTimeOut+0x70>)
   81880:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   81882:	682b      	ldr	r3, [r5, #0]
   81884:	f1b3 3fff 	cmp.w	r3, #4294967295
   81888:	d018      	beq.n	818bc <xTaskCheckForTimeOut+0x58>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   8188a:	4a13      	ldr	r2, [pc, #76]	; (818d8 <xTaskCheckForTimeOut+0x74>)
   8188c:	6812      	ldr	r2, [r2, #0]
   8188e:	6821      	ldr	r1, [r4, #0]
   81890:	4291      	cmp	r1, r2
   81892:	d004      	beq.n	8189e <xTaskCheckForTimeOut+0x3a>
   81894:	4a11      	ldr	r2, [pc, #68]	; (818dc <xTaskCheckForTimeOut+0x78>)
   81896:	6812      	ldr	r2, [r2, #0]
   81898:	6861      	ldr	r1, [r4, #4]
   8189a:	4291      	cmp	r1, r2
   8189c:	d910      	bls.n	818c0 <xTaskCheckForTimeOut+0x5c>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   8189e:	4a0f      	ldr	r2, [pc, #60]	; (818dc <xTaskCheckForTimeOut+0x78>)
   818a0:	6811      	ldr	r1, [r2, #0]
   818a2:	6860      	ldr	r0, [r4, #4]
   818a4:	1a09      	subs	r1, r1, r0
   818a6:	428b      	cmp	r3, r1
   818a8:	d90c      	bls.n	818c4 <xTaskCheckForTimeOut+0x60>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   818aa:	6812      	ldr	r2, [r2, #0]
   818ac:	1a12      	subs	r2, r2, r0
   818ae:	1a9b      	subs	r3, r3, r2
   818b0:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   818b2:	4620      	mov	r0, r4
   818b4:	4b0a      	ldr	r3, [pc, #40]	; (818e0 <xTaskCheckForTimeOut+0x7c>)
   818b6:	4798      	blx	r3
			xReturn = pdFALSE;
   818b8:	2400      	movs	r4, #0
   818ba:	e004      	b.n	818c6 <xTaskCheckForTimeOut+0x62>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   818bc:	2400      	movs	r4, #0
   818be:	e002      	b.n	818c6 <xTaskCheckForTimeOut+0x62>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   818c0:	2401      	movs	r4, #1
   818c2:	e000      	b.n	818c6 <xTaskCheckForTimeOut+0x62>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   818c4:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   818c6:	4b07      	ldr	r3, [pc, #28]	; (818e4 <xTaskCheckForTimeOut+0x80>)
   818c8:	4798      	blx	r3

	return xReturn;
}
   818ca:	4620      	mov	r0, r4
   818cc:	bd38      	pop	{r3, r4, r5, pc}
   818ce:	bf00      	nop
   818d0:	000808a1 	.word	0x000808a1
   818d4:	000808b1 	.word	0x000808b1
   818d8:	2007ab24 	.word	0x2007ab24
   818dc:	2007ab44 	.word	0x2007ab44
   818e0:	0008183d 	.word	0x0008183d
   818e4:	000808d1 	.word	0x000808d1

000818e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   818e8:	2201      	movs	r2, #1
   818ea:	4b01      	ldr	r3, [pc, #4]	; (818f0 <vTaskMissedYield+0x8>)
   818ec:	601a      	str	r2, [r3, #0]
   818ee:	4770      	bx	lr
   818f0:	2007ab54 	.word	0x2007ab54

000818f4 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   818f4:	4b01      	ldr	r3, [pc, #4]	; (818fc <xTaskGetCurrentTaskHandle+0x8>)
   818f6:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   818f8:	4770      	bx	lr
   818fa:	bf00      	nop
   818fc:	2007ab28 	.word	0x2007ab28

00081900 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81900:	4b05      	ldr	r3, [pc, #20]	; (81918 <xTaskGetSchedulerState+0x18>)
   81902:	681b      	ldr	r3, [r3, #0]
   81904:	b133      	cbz	r3, 81914 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81906:	4b05      	ldr	r3, [pc, #20]	; (8191c <xTaskGetSchedulerState+0x1c>)
   81908:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   8190a:	2b00      	cmp	r3, #0
   8190c:	bf0c      	ite	eq
   8190e:	2001      	moveq	r0, #1
   81910:	2002      	movne	r0, #2
   81912:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   81914:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   81916:	4770      	bx	lr
   81918:	2007aa78 	.word	0x2007aa78
   8191c:	2007ab40 	.word	0x2007ab40

00081920 <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   81920:	2800      	cmp	r0, #0
   81922:	d031      	beq.n	81988 <vTaskPriorityInherit+0x68>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   81924:	b538      	push	{r3, r4, r5, lr}

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   81926:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   81928:	4918      	ldr	r1, [pc, #96]	; (8198c <vTaskPriorityInherit+0x6c>)
   8192a:	6809      	ldr	r1, [r1, #0]
   8192c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   8192e:	428b      	cmp	r3, r1
   81930:	d229      	bcs.n	81986 <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   81932:	4916      	ldr	r1, [pc, #88]	; (8198c <vTaskPriorityInherit+0x6c>)
   81934:	6809      	ldr	r1, [r1, #0]
   81936:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   81938:	f1c1 0105 	rsb	r1, r1, #5
   8193c:	6181      	str	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   8193e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81942:	4913      	ldr	r1, [pc, #76]	; (81990 <vTaskPriorityInherit+0x70>)
   81944:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   81948:	6941      	ldr	r1, [r0, #20]
   8194a:	4299      	cmp	r1, r3
   8194c:	d117      	bne.n	8197e <vTaskPriorityInherit+0x5e>
   8194e:	4605      	mov	r5, r0
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81950:	1d04      	adds	r4, r0, #4
   81952:	4620      	mov	r0, r4
   81954:	4b0f      	ldr	r3, [pc, #60]	; (81994 <vTaskPriorityInherit+0x74>)
   81956:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81958:	4b0c      	ldr	r3, [pc, #48]	; (8198c <vTaskPriorityInherit+0x6c>)
   8195a:	681b      	ldr	r3, [r3, #0]
   8195c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   8195e:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   81960:	4b0d      	ldr	r3, [pc, #52]	; (81998 <vTaskPriorityInherit+0x78>)
   81962:	681b      	ldr	r3, [r3, #0]
   81964:	4298      	cmp	r0, r3
   81966:	bf84      	itt	hi
   81968:	4b0b      	ldrhi	r3, [pc, #44]	; (81998 <vTaskPriorityInherit+0x78>)
   8196a:	6018      	strhi	r0, [r3, #0]
   8196c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81970:	4b07      	ldr	r3, [pc, #28]	; (81990 <vTaskPriorityInherit+0x70>)
   81972:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81976:	4621      	mov	r1, r4
   81978:	4b08      	ldr	r3, [pc, #32]	; (8199c <vTaskPriorityInherit+0x7c>)
   8197a:	4798      	blx	r3
   8197c:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   8197e:	4b03      	ldr	r3, [pc, #12]	; (8198c <vTaskPriorityInherit+0x6c>)
   81980:	681b      	ldr	r3, [r3, #0]
   81982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81984:	62c3      	str	r3, [r0, #44]	; 0x2c
   81986:	bd38      	pop	{r3, r4, r5, pc}
   81988:	4770      	bx	lr
   8198a:	bf00      	nop
   8198c:	2007ab28 	.word	0x2007ab28
   81990:	2007aaac 	.word	0x2007aaac
   81994:	00080819 	.word	0x00080819
   81998:	2007aaa8 	.word	0x2007aaa8
   8199c:	000807c1 	.word	0x000807c1

000819a0 <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   819a0:	b1e8      	cbz	r0, 819de <vTaskPriorityDisinherit+0x3e>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   819a2:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   819a4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   819a6:	6c82      	ldr	r2, [r0, #72]	; 0x48
   819a8:	4291      	cmp	r1, r2
   819aa:	d017      	beq.n	819dc <vTaskPriorityDisinherit+0x3c>
   819ac:	4604      	mov	r4, r0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   819ae:	1d05      	adds	r5, r0, #4
   819b0:	4628      	mov	r0, r5
   819b2:	4b0b      	ldr	r3, [pc, #44]	; (819e0 <vTaskPriorityDisinherit+0x40>)
   819b4:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   819b6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   819b8:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   819ba:	f1c0 0305 	rsb	r3, r0, #5
   819be:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   819c0:	4b08      	ldr	r3, [pc, #32]	; (819e4 <vTaskPriorityDisinherit+0x44>)
   819c2:	681b      	ldr	r3, [r3, #0]
   819c4:	4298      	cmp	r0, r3
   819c6:	bf84      	itt	hi
   819c8:	4b06      	ldrhi	r3, [pc, #24]	; (819e4 <vTaskPriorityDisinherit+0x44>)
   819ca:	6018      	strhi	r0, [r3, #0]
   819cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   819d0:	4b05      	ldr	r3, [pc, #20]	; (819e8 <vTaskPriorityDisinherit+0x48>)
   819d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   819d6:	4629      	mov	r1, r5
   819d8:	4b04      	ldr	r3, [pc, #16]	; (819ec <vTaskPriorityDisinherit+0x4c>)
   819da:	4798      	blx	r3
   819dc:	bd38      	pop	{r3, r4, r5, pc}
   819de:	4770      	bx	lr
   819e0:	00080819 	.word	0x00080819
   819e4:	2007aaa8 	.word	0x2007aaa8
   819e8:	2007aaac 	.word	0x2007aaac
   819ec:	000807c1 	.word	0x000807c1

000819f0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   819f0:	b510      	push	{r4, lr}
   819f2:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   819f4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   819f6:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   819f8:	4291      	cmp	r1, r2
   819fa:	d80a      	bhi.n	81a12 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   819fc:	1ad2      	subs	r2, r2, r3
   819fe:	6983      	ldr	r3, [r0, #24]
   81a00:	429a      	cmp	r2, r3
   81a02:	d211      	bcs.n	81a28 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81a04:	4b0a      	ldr	r3, [pc, #40]	; (81a30 <prvInsertTimerInActiveList+0x40>)
   81a06:	6818      	ldr	r0, [r3, #0]
   81a08:	1d21      	adds	r1, r4, #4
   81a0a:	4b0a      	ldr	r3, [pc, #40]	; (81a34 <prvInsertTimerInActiveList+0x44>)
   81a0c:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81a0e:	2000      	movs	r0, #0
   81a10:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81a12:	429a      	cmp	r2, r3
   81a14:	d201      	bcs.n	81a1a <prvInsertTimerInActiveList+0x2a>
   81a16:	4299      	cmp	r1, r3
   81a18:	d208      	bcs.n	81a2c <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81a1a:	4b07      	ldr	r3, [pc, #28]	; (81a38 <prvInsertTimerInActiveList+0x48>)
   81a1c:	6818      	ldr	r0, [r3, #0]
   81a1e:	1d21      	adds	r1, r4, #4
   81a20:	4b04      	ldr	r3, [pc, #16]	; (81a34 <prvInsertTimerInActiveList+0x44>)
   81a22:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81a24:	2000      	movs	r0, #0
   81a26:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81a28:	2001      	movs	r0, #1
   81a2a:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   81a2c:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   81a2e:	bd10      	pop	{r4, pc}
   81a30:	2007ab90 	.word	0x2007ab90
   81a34:	000807dd 	.word	0x000807dd
   81a38:	2007ab5c 	.word	0x2007ab5c

00081a3c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   81a3c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   81a3e:	4b0d      	ldr	r3, [pc, #52]	; (81a74 <prvCheckForValidListAndQueue+0x38>)
   81a40:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   81a42:	4b0d      	ldr	r3, [pc, #52]	; (81a78 <prvCheckForValidListAndQueue+0x3c>)
   81a44:	681b      	ldr	r3, [r3, #0]
   81a46:	b98b      	cbnz	r3, 81a6c <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   81a48:	4d0c      	ldr	r5, [pc, #48]	; (81a7c <prvCheckForValidListAndQueue+0x40>)
   81a4a:	4628      	mov	r0, r5
   81a4c:	4e0c      	ldr	r6, [pc, #48]	; (81a80 <prvCheckForValidListAndQueue+0x44>)
   81a4e:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   81a50:	4c0c      	ldr	r4, [pc, #48]	; (81a84 <prvCheckForValidListAndQueue+0x48>)
   81a52:	4620      	mov	r0, r4
   81a54:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   81a56:	4b0c      	ldr	r3, [pc, #48]	; (81a88 <prvCheckForValidListAndQueue+0x4c>)
   81a58:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81a5a:	4b0c      	ldr	r3, [pc, #48]	; (81a8c <prvCheckForValidListAndQueue+0x50>)
   81a5c:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   81a5e:	2005      	movs	r0, #5
   81a60:	210c      	movs	r1, #12
   81a62:	2200      	movs	r2, #0
   81a64:	4b0a      	ldr	r3, [pc, #40]	; (81a90 <prvCheckForValidListAndQueue+0x54>)
   81a66:	4798      	blx	r3
   81a68:	4b03      	ldr	r3, [pc, #12]	; (81a78 <prvCheckForValidListAndQueue+0x3c>)
   81a6a:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   81a6c:	4b09      	ldr	r3, [pc, #36]	; (81a94 <prvCheckForValidListAndQueue+0x58>)
   81a6e:	4798      	blx	r3
   81a70:	bd70      	pop	{r4, r5, r6, pc}
   81a72:	bf00      	nop
   81a74:	000808b1 	.word	0x000808b1
   81a78:	2007ab8c 	.word	0x2007ab8c
   81a7c:	2007ab60 	.word	0x2007ab60
   81a80:	000807a1 	.word	0x000807a1
   81a84:	2007ab74 	.word	0x2007ab74
   81a88:	2007ab5c 	.word	0x2007ab5c
   81a8c:	2007ab90 	.word	0x2007ab90
   81a90:	00080c95 	.word	0x00080c95
   81a94:	000808d1 	.word	0x000808d1

00081a98 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   81a98:	b510      	push	{r4, lr}
   81a9a:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   81a9c:	4b0b      	ldr	r3, [pc, #44]	; (81acc <xTimerCreateTimerTask+0x34>)
   81a9e:	4798      	blx	r3

	if( xTimerQueue != NULL )
   81aa0:	4b0b      	ldr	r3, [pc, #44]	; (81ad0 <xTimerCreateTimerTask+0x38>)
   81aa2:	681b      	ldr	r3, [r3, #0]
   81aa4:	b163      	cbz	r3, 81ac0 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   81aa6:	2304      	movs	r3, #4
   81aa8:	9300      	str	r3, [sp, #0]
   81aaa:	2300      	movs	r3, #0
   81aac:	9301      	str	r3, [sp, #4]
   81aae:	9302      	str	r3, [sp, #8]
   81ab0:	9303      	str	r3, [sp, #12]
   81ab2:	4808      	ldr	r0, [pc, #32]	; (81ad4 <xTimerCreateTimerTask+0x3c>)
   81ab4:	4908      	ldr	r1, [pc, #32]	; (81ad8 <xTimerCreateTimerTask+0x40>)
   81ab6:	f44f 7282 	mov.w	r2, #260	; 0x104
   81aba:	4c08      	ldr	r4, [pc, #32]	; (81adc <xTimerCreateTimerTask+0x44>)
   81abc:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   81abe:	b918      	cbnz	r0, 81ac8 <xTimerCreateTimerTask+0x30>
   81ac0:	4b07      	ldr	r3, [pc, #28]	; (81ae0 <xTimerCreateTimerTask+0x48>)
   81ac2:	4798      	blx	r3
   81ac4:	bf00      	nop
   81ac6:	e7fd      	b.n	81ac4 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   81ac8:	b004      	add	sp, #16
   81aca:	bd10      	pop	{r4, pc}
   81acc:	00081a3d 	.word	0x00081a3d
   81ad0:	2007ab8c 	.word	0x2007ab8c
   81ad4:	00081bed 	.word	0x00081bed
   81ad8:	000876b8 	.word	0x000876b8
   81adc:	0008109d 	.word	0x0008109d
   81ae0:	000808a1 	.word	0x000808a1

00081ae4 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   81ae4:	b530      	push	{r4, r5, lr}
   81ae6:	b085      	sub	sp, #20
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   81ae8:	4c0f      	ldr	r4, [pc, #60]	; (81b28 <xTimerGenericCommand+0x44>)
   81aea:	6825      	ldr	r5, [r4, #0]
   81aec:	b1c5      	cbz	r5, 81b20 <xTimerGenericCommand+0x3c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   81aee:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   81af0:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81af2:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   81af4:	b96b      	cbnz	r3, 81b12 <xTimerGenericCommand+0x2e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81af6:	4b0d      	ldr	r3, [pc, #52]	; (81b2c <xTimerGenericCommand+0x48>)
   81af8:	4798      	blx	r3
   81afa:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   81afc:	4b0a      	ldr	r3, [pc, #40]	; (81b28 <xTimerGenericCommand+0x44>)
   81afe:	6818      	ldr	r0, [r3, #0]
   81b00:	a901      	add	r1, sp, #4
   81b02:	bf07      	ittee	eq
   81b04:	9a08      	ldreq	r2, [sp, #32]
   81b06:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81b08:	2200      	movne	r2, #0
   81b0a:	4613      	movne	r3, r2
   81b0c:	4c08      	ldr	r4, [pc, #32]	; (81b30 <xTimerGenericCommand+0x4c>)
   81b0e:	47a0      	blx	r4
   81b10:	e007      	b.n	81b22 <xTimerGenericCommand+0x3e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81b12:	4628      	mov	r0, r5
   81b14:	a901      	add	r1, sp, #4
   81b16:	461a      	mov	r2, r3
   81b18:	2300      	movs	r3, #0
   81b1a:	4c06      	ldr	r4, [pc, #24]	; (81b34 <xTimerGenericCommand+0x50>)
   81b1c:	47a0      	blx	r4
   81b1e:	e000      	b.n	81b22 <xTimerGenericCommand+0x3e>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   81b20:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   81b22:	b005      	add	sp, #20
   81b24:	bd30      	pop	{r4, r5, pc}
   81b26:	bf00      	nop
   81b28:	2007ab8c 	.word	0x2007ab8c
   81b2c:	00081901 	.word	0x00081901
   81b30:	00080ced 	.word	0x00080ced
   81b34:	00080e0d 	.word	0x00080e0d

00081b38 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   81b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81b3c:	b082      	sub	sp, #8
   81b3e:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   81b40:	4b22      	ldr	r3, [pc, #136]	; (81bcc <prvSampleTimeNow+0x94>)
   81b42:	4798      	blx	r3
   81b44:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   81b46:	4b22      	ldr	r3, [pc, #136]	; (81bd0 <prvSampleTimeNow+0x98>)
   81b48:	681b      	ldr	r3, [r3, #0]
   81b4a:	4298      	cmp	r0, r3
   81b4c:	d234      	bcs.n	81bb8 <prvSampleTimeNow+0x80>
   81b4e:	e024      	b.n	81b9a <prvSampleTimeNow+0x62>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81b50:	68da      	ldr	r2, [r3, #12]
   81b52:	f8d2 a000 	ldr.w	sl, [r2]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81b56:	68db      	ldr	r3, [r3, #12]
   81b58:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81b5a:	1d25      	adds	r5, r4, #4
   81b5c:	4628      	mov	r0, r5
   81b5e:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81b62:	4620      	mov	r0, r4
   81b64:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81b66:	69e3      	ldr	r3, [r4, #28]
   81b68:	2b01      	cmp	r3, #1
   81b6a:	d118      	bne.n	81b9e <prvSampleTimeNow+0x66>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81b6c:	69a3      	ldr	r3, [r4, #24]
   81b6e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   81b70:	4553      	cmp	r3, sl
   81b72:	d906      	bls.n	81b82 <prvSampleTimeNow+0x4a>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81b74:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81b76:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81b78:	6830      	ldr	r0, [r6, #0]
   81b7a:	4629      	mov	r1, r5
   81b7c:	4b15      	ldr	r3, [pc, #84]	; (81bd4 <prvSampleTimeNow+0x9c>)
   81b7e:	4798      	blx	r3
   81b80:	e00d      	b.n	81b9e <prvSampleTimeNow+0x66>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81b82:	2300      	movs	r3, #0
   81b84:	9300      	str	r3, [sp, #0]
   81b86:	4620      	mov	r0, r4
   81b88:	4619      	mov	r1, r3
   81b8a:	4652      	mov	r2, sl
   81b8c:	4c12      	ldr	r4, [pc, #72]	; (81bd8 <prvSampleTimeNow+0xa0>)
   81b8e:	47a0      	blx	r4
				configASSERT( xResult );
   81b90:	b928      	cbnz	r0, 81b9e <prvSampleTimeNow+0x66>
   81b92:	4b12      	ldr	r3, [pc, #72]	; (81bdc <prvSampleTimeNow+0xa4>)
   81b94:	4798      	blx	r3
   81b96:	bf00      	nop
   81b98:	e7fd      	b.n	81b96 <prvSampleTimeNow+0x5e>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81b9a:	4e11      	ldr	r6, [pc, #68]	; (81be0 <prvSampleTimeNow+0xa8>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81b9c:	4f11      	ldr	r7, [pc, #68]	; (81be4 <prvSampleTimeNow+0xac>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81b9e:	6833      	ldr	r3, [r6, #0]
   81ba0:	681a      	ldr	r2, [r3, #0]
   81ba2:	2a00      	cmp	r2, #0
   81ba4:	d1d4      	bne.n	81b50 <prvSampleTimeNow+0x18>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   81ba6:	4a10      	ldr	r2, [pc, #64]	; (81be8 <prvSampleTimeNow+0xb0>)
   81ba8:	6810      	ldr	r0, [r2, #0]
   81baa:	490d      	ldr	r1, [pc, #52]	; (81be0 <prvSampleTimeNow+0xa8>)
   81bac:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   81bae:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   81bb0:	2301      	movs	r3, #1
   81bb2:	f8c9 3000 	str.w	r3, [r9]
   81bb6:	e002      	b.n	81bbe <prvSampleTimeNow+0x86>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   81bb8:	2300      	movs	r3, #0
   81bba:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   81bbe:	4b04      	ldr	r3, [pc, #16]	; (81bd0 <prvSampleTimeNow+0x98>)
   81bc0:	f8c3 8000 	str.w	r8, [r3]

	return xTimeNow;
}
   81bc4:	4640      	mov	r0, r8
   81bc6:	b002      	add	sp, #8
   81bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81bcc:	00081319 	.word	0x00081319
   81bd0:	2007ab88 	.word	0x2007ab88
   81bd4:	000807dd 	.word	0x000807dd
   81bd8:	00081ae5 	.word	0x00081ae5
   81bdc:	000808a1 	.word	0x000808a1
   81be0:	2007ab5c 	.word	0x2007ab5c
   81be4:	00080819 	.word	0x00080819
   81be8:	2007ab90 	.word	0x2007ab90

00081bec <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   81bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81bf0:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81bf2:	4d4d      	ldr	r5, [pc, #308]	; (81d28 <prvTimerTask+0x13c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81bf4:	f8df 8160 	ldr.w	r8, [pc, #352]	; 81d58 <prvTimerTask+0x16c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81bf8:	4b4c      	ldr	r3, [pc, #304]	; (81d2c <prvTimerTask+0x140>)
   81bfa:	681b      	ldr	r3, [r3, #0]
   81bfc:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   81bfe:	2a00      	cmp	r2, #0
   81c00:	f000 8087 	beq.w	81d12 <prvTimerTask+0x126>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81c04:	68db      	ldr	r3, [r3, #12]
   81c06:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81c08:	4b49      	ldr	r3, [pc, #292]	; (81d30 <prvTimerTask+0x144>)
   81c0a:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81c0c:	a803      	add	r0, sp, #12
   81c0e:	4b49      	ldr	r3, [pc, #292]	; (81d34 <prvTimerTask+0x148>)
   81c10:	4798      	blx	r3
   81c12:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81c14:	9b03      	ldr	r3, [sp, #12]
   81c16:	2b00      	cmp	r3, #0
   81c18:	d130      	bne.n	81c7c <prvTimerTask+0x90>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   81c1a:	4286      	cmp	r6, r0
   81c1c:	d824      	bhi.n	81c68 <prvTimerTask+0x7c>
			{
				xTaskResumeAll();
   81c1e:	4b46      	ldr	r3, [pc, #280]	; (81d38 <prvTimerTask+0x14c>)
   81c20:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81c22:	4b42      	ldr	r3, [pc, #264]	; (81d2c <prvTimerTask+0x140>)
   81c24:	681b      	ldr	r3, [r3, #0]
   81c26:	68db      	ldr	r3, [r3, #12]
   81c28:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81c2a:	1d20      	adds	r0, r4, #4
   81c2c:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81c2e:	69e3      	ldr	r3, [r4, #28]
   81c30:	2b01      	cmp	r3, #1
   81c32:	d114      	bne.n	81c5e <prvTimerTask+0x72>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   81c34:	69a1      	ldr	r1, [r4, #24]
   81c36:	4620      	mov	r0, r4
   81c38:	4431      	add	r1, r6
   81c3a:	463a      	mov	r2, r7
   81c3c:	4633      	mov	r3, r6
   81c3e:	4f3f      	ldr	r7, [pc, #252]	; (81d3c <prvTimerTask+0x150>)
   81c40:	47b8      	blx	r7
   81c42:	2801      	cmp	r0, #1
   81c44:	d10b      	bne.n	81c5e <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81c46:	2300      	movs	r3, #0
   81c48:	9300      	str	r3, [sp, #0]
   81c4a:	4620      	mov	r0, r4
   81c4c:	4619      	mov	r1, r3
   81c4e:	4632      	mov	r2, r6
   81c50:	4e3b      	ldr	r6, [pc, #236]	; (81d40 <prvTimerTask+0x154>)
   81c52:	47b0      	blx	r6
			configASSERT( xResult );
   81c54:	b918      	cbnz	r0, 81c5e <prvTimerTask+0x72>
   81c56:	4b3b      	ldr	r3, [pc, #236]	; (81d44 <prvTimerTask+0x158>)
   81c58:	4798      	blx	r3
   81c5a:	bf00      	nop
   81c5c:	e7fd      	b.n	81c5a <prvTimerTask+0x6e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81c60:	4620      	mov	r0, r4
   81c62:	4798      	blx	r3
   81c64:	e00c      	b.n	81c80 <prvTimerTask+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   81c66:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81c68:	6828      	ldr	r0, [r5, #0]
   81c6a:	1bf1      	subs	r1, r6, r7
   81c6c:	4b36      	ldr	r3, [pc, #216]	; (81d48 <prvTimerTask+0x15c>)
   81c6e:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   81c70:	4b31      	ldr	r3, [pc, #196]	; (81d38 <prvTimerTask+0x14c>)
   81c72:	4798      	blx	r3
   81c74:	b920      	cbnz	r0, 81c80 <prvTimerTask+0x94>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   81c76:	4b35      	ldr	r3, [pc, #212]	; (81d4c <prvTimerTask+0x160>)
   81c78:	4798      	blx	r3
   81c7a:	e001      	b.n	81c80 <prvTimerTask+0x94>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   81c7c:	4b2e      	ldr	r3, [pc, #184]	; (81d38 <prvTimerTask+0x14c>)
   81c7e:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81c80:	a802      	add	r0, sp, #8
   81c82:	4b2c      	ldr	r3, [pc, #176]	; (81d34 <prvTimerTask+0x148>)
   81c84:	4798      	blx	r3
   81c86:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81c88:	4e31      	ldr	r6, [pc, #196]	; (81d50 <prvTimerTask+0x164>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81c8a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 81d3c <prvTimerTask+0x150>
   81c8e:	e038      	b.n	81d02 <prvTimerTask+0x116>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   81c90:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   81c92:	b11c      	cbz	r4, 81c9c <prvTimerTask+0xb0>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   81c94:	6963      	ldr	r3, [r4, #20]
   81c96:	b10b      	cbz	r3, 81c9c <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   81c98:	1d20      	adds	r0, r4, #4
   81c9a:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   81c9c:	9b03      	ldr	r3, [sp, #12]
   81c9e:	2b02      	cmp	r3, #2
   81ca0:	d01f      	beq.n	81ce2 <prvTimerTask+0xf6>
   81ca2:	2b03      	cmp	r3, #3
   81ca4:	d02a      	beq.n	81cfc <prvTimerTask+0x110>
   81ca6:	2b00      	cmp	r3, #0
   81ca8:	d12b      	bne.n	81d02 <prvTimerTask+0x116>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   81caa:	9b04      	ldr	r3, [sp, #16]
   81cac:	69a1      	ldr	r1, [r4, #24]
   81cae:	4620      	mov	r0, r4
   81cb0:	4419      	add	r1, r3
   81cb2:	463a      	mov	r2, r7
   81cb4:	47c8      	blx	r9
   81cb6:	2801      	cmp	r0, #1
   81cb8:	d123      	bne.n	81d02 <prvTimerTask+0x116>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81cba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81cbc:	4620      	mov	r0, r4
   81cbe:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81cc0:	69e3      	ldr	r3, [r4, #28]
   81cc2:	2b01      	cmp	r3, #1
   81cc4:	d11d      	bne.n	81d02 <prvTimerTask+0x116>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   81cc6:	69a2      	ldr	r2, [r4, #24]
   81cc8:	2300      	movs	r3, #0
   81cca:	9300      	str	r3, [sp, #0]
   81ccc:	4620      	mov	r0, r4
   81cce:	4619      	mov	r1, r3
   81cd0:	9c04      	ldr	r4, [sp, #16]
   81cd2:	4422      	add	r2, r4
   81cd4:	4c1a      	ldr	r4, [pc, #104]	; (81d40 <prvTimerTask+0x154>)
   81cd6:	47a0      	blx	r4
						configASSERT( xResult );
   81cd8:	b998      	cbnz	r0, 81d02 <prvTimerTask+0x116>
   81cda:	4b1a      	ldr	r3, [pc, #104]	; (81d44 <prvTimerTask+0x158>)
   81cdc:	4798      	blx	r3
   81cde:	bf00      	nop
   81ce0:	e7fd      	b.n	81cde <prvTimerTask+0xf2>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   81ce2:	9904      	ldr	r1, [sp, #16]
   81ce4:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81ce6:	b919      	cbnz	r1, 81cf0 <prvTimerTask+0x104>
   81ce8:	4b16      	ldr	r3, [pc, #88]	; (81d44 <prvTimerTask+0x158>)
   81cea:	4798      	blx	r3
   81cec:	bf00      	nop
   81cee:	e7fd      	b.n	81cec <prvTimerTask+0x100>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81cf0:	4620      	mov	r0, r4
   81cf2:	4439      	add	r1, r7
   81cf4:	463a      	mov	r2, r7
   81cf6:	463b      	mov	r3, r7
   81cf8:	47c8      	blx	r9
   81cfa:	e002      	b.n	81d02 <prvTimerTask+0x116>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   81cfc:	4620      	mov	r0, r4
   81cfe:	4b15      	ldr	r3, [pc, #84]	; (81d54 <prvTimerTask+0x168>)
   81d00:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81d02:	6828      	ldr	r0, [r5, #0]
   81d04:	a903      	add	r1, sp, #12
   81d06:	2200      	movs	r2, #0
   81d08:	4613      	mov	r3, r2
   81d0a:	47b0      	blx	r6
   81d0c:	2800      	cmp	r0, #0
   81d0e:	d1bf      	bne.n	81c90 <prvTimerTask+0xa4>
   81d10:	e772      	b.n	81bf8 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81d12:	4b07      	ldr	r3, [pc, #28]	; (81d30 <prvTimerTask+0x144>)
   81d14:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81d16:	a803      	add	r0, sp, #12
   81d18:	4b06      	ldr	r3, [pc, #24]	; (81d34 <prvTimerTask+0x148>)
   81d1a:	4798      	blx	r3
   81d1c:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81d1e:	9b03      	ldr	r3, [sp, #12]
   81d20:	2b00      	cmp	r3, #0
   81d22:	d0a0      	beq.n	81c66 <prvTimerTask+0x7a>
   81d24:	e7aa      	b.n	81c7c <prvTimerTask+0x90>
   81d26:	bf00      	nop
   81d28:	2007ab8c 	.word	0x2007ab8c
   81d2c:	2007ab5c 	.word	0x2007ab5c
   81d30:	00081309 	.word	0x00081309
   81d34:	00081b39 	.word	0x00081b39
   81d38:	00081459 	.word	0x00081459
   81d3c:	000819f1 	.word	0x000819f1
   81d40:	00081ae5 	.word	0x00081ae5
   81d44:	000808a1 	.word	0x000808a1
   81d48:	00080ff9 	.word	0x00080ff9
   81d4c:	00080891 	.word	0x00080891
   81d50:	00080e9d 	.word	0x00080e9d
   81d54:	00080ac5 	.word	0x00080ac5
   81d58:	00080819 	.word	0x00080819

00081d5c <initPin6>:
	   initPin6();
	   initPin7();

   }
   
   void initPin6 (void){
   81d5c:	b538      	push	{r3, r4, r5, lr}
	   pio_configure_pin(PIN_24, PIO_TYPE_PIO_PERIPH_B);
   81d5e:	2058      	movs	r0, #88	; 0x58
   81d60:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81d64:	4b0b      	ldr	r3, [pc, #44]	; (81d94 <initPin6+0x38>)
   81d66:	4798      	blx	r3
	   PWM_pin_6.channel = PWM_CHANNEL_7;
   81d68:	490b      	ldr	r1, [pc, #44]	; (81d98 <initPin6+0x3c>)
   81d6a:	2407      	movs	r4, #7
   81d6c:	600c      	str	r4, [r1, #0]
	   PWM_pin_6.alignment = PWM_ALIGN_LEFT;
   81d6e:	2300      	movs	r3, #0
   81d70:	810b      	strh	r3, [r1, #8]
	   PWM_pin_6.polarity = PWM_LOW;
   81d72:	728b      	strb	r3, [r1, #10]
	   PWM_pin_6.ul_prescaler = PWM_CMR_CPRE_CLKA;
   81d74:	220b      	movs	r2, #11
   81d76:	604a      	str	r2, [r1, #4]
	   PWM_pin_6.ul_period = 7500;
   81d78:	f641 524c 	movw	r2, #7500	; 0x1d4c
   81d7c:	610a      	str	r2, [r1, #16]
	   PWM_pin_6.ul_duty = 0;	   
   81d7e:	60cb      	str	r3, [r1, #12]
	   pwm_channel_init(PWM, &PWM_pin_6);
   81d80:	4d06      	ldr	r5, [pc, #24]	; (81d9c <initPin6+0x40>)
   81d82:	4628      	mov	r0, r5
   81d84:	4b06      	ldr	r3, [pc, #24]	; (81da0 <initPin6+0x44>)
   81d86:	4798      	blx	r3
	   pwm_channel_enable(PWM, PWM_CHANNEL_7);
   81d88:	4628      	mov	r0, r5
   81d8a:	4621      	mov	r1, r4
   81d8c:	4b05      	ldr	r3, [pc, #20]	; (81da4 <initPin6+0x48>)
   81d8e:	4798      	blx	r3
   81d90:	bd38      	pop	{r3, r4, r5, pc}
   81d92:	bf00      	nop
   81d94:	00082d01 	.word	0x00082d01
   81d98:	2007ad40 	.word	0x2007ad40
   81d9c:	40094000 	.word	0x40094000
   81da0:	00080611 	.word	0x00080611
   81da4:	0008073d 	.word	0x0008073d

00081da8 <initPin7>:

   }
   void initPin7 (void){
   81da8:	b538      	push	{r3, r4, r5, lr}
	   pio_configure_pin(PIN_23, PIO_TYPE_PIO_PERIPH_B);
   81daa:	2057      	movs	r0, #87	; 0x57
   81dac:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81db0:	4b0b      	ldr	r3, [pc, #44]	; (81de0 <initPin7+0x38>)
   81db2:	4798      	blx	r3
	   PWM_pin_7.alignment = PWM_ALIGN_LEFT;
   81db4:	490b      	ldr	r1, [pc, #44]	; (81de4 <initPin7+0x3c>)
   81db6:	2300      	movs	r3, #0
   81db8:	810b      	strh	r3, [r1, #8]
	   PWM_pin_7.polarity = PWM_LOW;
   81dba:	728b      	strb	r3, [r1, #10]
	   PWM_pin_7.ul_prescaler = PWM_CMR_CPRE_CLKA;
   81dbc:	220b      	movs	r2, #11
   81dbe:	604a      	str	r2, [r1, #4]
	   PWM_pin_7.ul_period = 7500;
   81dc0:	f641 524c 	movw	r2, #7500	; 0x1d4c
   81dc4:	610a      	str	r2, [r1, #16]
	   PWM_pin_7.ul_duty = 0;
   81dc6:	60cb      	str	r3, [r1, #12]
	   PWM_pin_7.channel = PWM_CHANNEL_6 ;
   81dc8:	2406      	movs	r4, #6
   81dca:	600c      	str	r4, [r1, #0]
	   pwm_channel_init(PWM, &PWM_pin_7);
   81dcc:	4d06      	ldr	r5, [pc, #24]	; (81de8 <initPin7+0x40>)
   81dce:	4628      	mov	r0, r5
   81dd0:	4b06      	ldr	r3, [pc, #24]	; (81dec <initPin7+0x44>)
   81dd2:	4798      	blx	r3
	   pwm_channel_enable(PWM, PWM_CHANNEL_6);
   81dd4:	4628      	mov	r0, r5
   81dd6:	4621      	mov	r1, r4
   81dd8:	4b05      	ldr	r3, [pc, #20]	; (81df0 <initPin7+0x48>)
   81dda:	4798      	blx	r3
   81ddc:	bd38      	pop	{r3, r4, r5, pc}
   81dde:	bf00      	nop
   81de0:	00082d01 	.word	0x00082d01
   81de4:	2007ad18 	.word	0x2007ad18
   81de8:	40094000 	.word	0x40094000
   81dec:	00080611 	.word	0x00080611
   81df0:	0008073d 	.word	0x0008073d

00081df4 <PWM_init>:

   pwm_channel_t PWM_pin_6;
   pwm_channel_t  PWM_pin_7;
  

   void PWM_init(void){
   81df4:	b530      	push	{r4, r5, lr}
   81df6:	b085      	sub	sp, #20
	   pmc_enable_periph_clk(ID_PWM);
   81df8:	2024      	movs	r0, #36	; 0x24
   81dfa:	4b0d      	ldr	r3, [pc, #52]	; (81e30 <PWM_init+0x3c>)
   81dfc:	4798      	blx	r3
	   pwm_channel_disable(PWM,PWM_CHANNEL_7);
   81dfe:	4c0d      	ldr	r4, [pc, #52]	; (81e34 <PWM_init+0x40>)
   81e00:	4620      	mov	r0, r4
   81e02:	2107      	movs	r1, #7
   81e04:	4d0c      	ldr	r5, [pc, #48]	; (81e38 <PWM_init+0x44>)
   81e06:	47a8      	blx	r5
	   pwm_channel_disable(PWM,PWM_CHANNEL_6);
   81e08:	4620      	mov	r0, r4
   81e0a:	2106      	movs	r1, #6
   81e0c:	47a8      	blx	r5

	   pwm_clock_t PWMDAC_clock_config = {
   81e0e:	4b0b      	ldr	r3, [pc, #44]	; (81e3c <PWM_init+0x48>)
   81e10:	9301      	str	r3, [sp, #4]
   81e12:	2300      	movs	r3, #0
   81e14:	9302      	str	r3, [sp, #8]
   81e16:	4b0a      	ldr	r3, [pc, #40]	; (81e40 <PWM_init+0x4c>)
   81e18:	9303      	str	r3, [sp, #12]
		   .ul_clka = 1000000,
		   .ul_clkb = 0,
		   .ul_mck = sysclk_get_cpu_hz()
	   };
	   
	   pwm_init(PWM, &PWMDAC_clock_config);
   81e1a:	4620      	mov	r0, r4
   81e1c:	a901      	add	r1, sp, #4
   81e1e:	4b09      	ldr	r3, [pc, #36]	; (81e44 <PWM_init+0x50>)
   81e20:	4798      	blx	r3
	   initPin6();
   81e22:	4b09      	ldr	r3, [pc, #36]	; (81e48 <PWM_init+0x54>)
   81e24:	4798      	blx	r3
	   initPin7();
   81e26:	4b09      	ldr	r3, [pc, #36]	; (81e4c <PWM_init+0x58>)
   81e28:	4798      	blx	r3

   }
   81e2a:	b005      	add	sp, #20
   81e2c:	bd30      	pop	{r4, r5, pc}
   81e2e:	bf00      	nop
   81e30:	0008306d 	.word	0x0008306d
   81e34:	40094000 	.word	0x40094000
   81e38:	00080745 	.word	0x00080745
   81e3c:	000f4240 	.word	0x000f4240
   81e40:	0501bd00 	.word	0x0501bd00
   81e44:	000805c5 	.word	0x000805c5
   81e48:	00081d5d 	.word	0x00081d5d
   81e4c:	00081da9 	.word	0x00081da9

00081e50 <pwm_pin_6>:
	   pwm_channel_init(PWM, &PWM_pin_7);
	   pwm_channel_enable(PWM, PWM_CHANNEL_6);
   }
   
   
   void pwm_pin_6(uint32_t speed1){
   81e50:	b508      	push	{r3, lr}
	    if(speed1<800){
   81e52:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   81e56:	d306      	bcc.n	81e66 <pwm_pin_6+0x16>
   81e58:	f640 0398 	movw	r3, #2200	; 0x898
   81e5c:	4602      	mov	r2, r0
   81e5e:	4298      	cmp	r0, r3
   81e60:	bf28      	it	cs
   81e62:	461a      	movcs	r2, r3
   81e64:	e001      	b.n	81e6a <pwm_pin_6+0x1a>
		    speed1=800;
   81e66:	f44f 7248 	mov.w	r2, #800	; 0x320
	    }
	    else if(speed1>2200){
		    speed1=2200;
	    }
     pwm_channel_update_duty(PWM, &PWM_pin_6, speed1); 
   81e6a:	4802      	ldr	r0, [pc, #8]	; (81e74 <pwm_pin_6+0x24>)
   81e6c:	4902      	ldr	r1, [pc, #8]	; (81e78 <pwm_pin_6+0x28>)
   81e6e:	4b03      	ldr	r3, [pc, #12]	; (81e7c <pwm_pin_6+0x2c>)
   81e70:	4798      	blx	r3
   81e72:	bd08      	pop	{r3, pc}
   81e74:	40094000 	.word	0x40094000
   81e78:	2007ad40 	.word	0x2007ad40
   81e7c:	00080719 	.word	0x00080719

00081e80 <pwm_pin_7>:
}

  void pwm_pin_7(uint32_t speed2){
   81e80:	b508      	push	{r3, lr}
	if(speed2<800){
   81e82:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   81e86:	d306      	bcc.n	81e96 <pwm_pin_7+0x16>
   81e88:	f640 0398 	movw	r3, #2200	; 0x898
   81e8c:	4602      	mov	r2, r0
   81e8e:	4298      	cmp	r0, r3
   81e90:	bf28      	it	cs
   81e92:	461a      	movcs	r2, r3
   81e94:	e001      	b.n	81e9a <pwm_pin_7+0x1a>
		speed2=800;
   81e96:	f44f 7248 	mov.w	r2, #800	; 0x320
	}
	else if(speed2>2200){
		speed2=2200;
	}
	pwm_channel_update_duty(PWM, & PWM_pin_7, speed2 );
   81e9a:	4802      	ldr	r0, [pc, #8]	; (81ea4 <pwm_pin_7+0x24>)
   81e9c:	4902      	ldr	r1, [pc, #8]	; (81ea8 <pwm_pin_7+0x28>)
   81e9e:	4b03      	ldr	r3, [pc, #12]	; (81eac <pwm_pin_7+0x2c>)
   81ea0:	4798      	blx	r3
   81ea2:	bd08      	pop	{r3, pc}
   81ea4:	40094000 	.word	0x40094000
   81ea8:	2007ad18 	.word	0x2007ad18
   81eac:	00080719 	.word	0x00080719

00081eb0 <pio_interruptA>:
	counterB = 0;
}

void pio_interruptA(void) {
	// Save all triggered interrupts
	uint32_t status1 = PIOA->PIO_ISR;
   81eb0:	4b03      	ldr	r3, [pc, #12]	; (81ec0 <pio_interruptA+0x10>)
   81eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	counterA++;
   81eb4:	4a03      	ldr	r2, [pc, #12]	; (81ec4 <pio_interruptA+0x14>)
   81eb6:	6813      	ldr	r3, [r2, #0]
   81eb8:	3301      	adds	r3, #1
   81eba:	6013      	str	r3, [r2, #0]
   81ebc:	4770      	bx	lr
   81ebe:	bf00      	nop
   81ec0:	400e0e00 	.word	0x400e0e00
   81ec4:	2007ab94 	.word	0x2007ab94

00081ec8 <pio_interruptB>:
}

void pio_interruptB(void) {
	// Save all triggered interrupts
	uint32_t status2 = PIOD->PIO_ISR;
   81ec8:	4b03      	ldr	r3, [pc, #12]	; (81ed8 <pio_interruptB+0x10>)
   81eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	counterB++;
   81ecc:	4a03      	ldr	r2, [pc, #12]	; (81edc <pio_interruptB+0x14>)
   81ece:	6813      	ldr	r3, [r2, #0]
   81ed0:	3301      	adds	r3, #1
   81ed2:	6013      	str	r3, [r2, #0]
   81ed4:	4770      	bx	lr
   81ed6:	bf00      	nop
   81ed8:	400e1400 	.word	0x400e1400
   81edc:	2007ab98 	.word	0x2007ab98

00081ee0 <get_counterA>:
static volatile int counterA = 0;
static volatile int counterB = 0;


int get_counterA(void) {
	return counterA;
   81ee0:	4b01      	ldr	r3, [pc, #4]	; (81ee8 <get_counterA+0x8>)
   81ee2:	6818      	ldr	r0, [r3, #0]
}
   81ee4:	4770      	bx	lr
   81ee6:	bf00      	nop
   81ee8:	2007ab94 	.word	0x2007ab94

00081eec <get_counterB>:

int get_counterB(void) {
	return counterB;
   81eec:	4b01      	ldr	r3, [pc, #4]	; (81ef4 <get_counterB+0x8>)
   81eee:	6818      	ldr	r0, [r3, #0]
}
   81ef0:	4770      	bx	lr
   81ef2:	bf00      	nop
   81ef4:	2007ab98 	.word	0x2007ab98

00081ef8 <resetCounterA>:

void resetCounterA() {
	counterA = 0;
   81ef8:	2200      	movs	r2, #0
   81efa:	4b01      	ldr	r3, [pc, #4]	; (81f00 <resetCounterA+0x8>)
   81efc:	601a      	str	r2, [r3, #0]
   81efe:	4770      	bx	lr
   81f00:	2007ab94 	.word	0x2007ab94

00081f04 <resetCounterB>:
}

void resetCounterB() {
	counterB = 0;
   81f04:	2200      	movs	r2, #0
   81f06:	4b01      	ldr	r3, [pc, #4]	; (81f0c <resetCounterB+0x8>)
   81f08:	601a      	str	r2, [r3, #0]
   81f0a:	4770      	bx	lr
   81f0c:	2007ab98 	.word	0x2007ab98

00081f10 <encoder_init>:
	// Save all triggered interrupts
	uint32_t status2 = PIOD->PIO_ISR;
	counterB++;
}

void encoder_init(void) {
   81f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81f14:	b082      	sub	sp, #8
	// Enable Clock for PIOB - needed for sampling falling edge
	pmc_enable_periph_clk(ID_PIOA);
   81f16:	200b      	movs	r0, #11
   81f18:	4c1c      	ldr	r4, [pc, #112]	; (81f8c <encoder_init+0x7c>)
   81f1a:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOD);
   81f1c:	200e      	movs	r0, #14
   81f1e:	47a0      	blx	r4
	
	pio_set_input(PIOA, PIO_PA15, PIO_PULLUP); 
   81f20:	4d1b      	ldr	r5, [pc, #108]	; (81f90 <encoder_init+0x80>)
   81f22:	4628      	mov	r0, r5
   81f24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   81f28:	2201      	movs	r2, #1
   81f2a:	4e1a      	ldr	r6, [pc, #104]	; (81f94 <encoder_init+0x84>)
   81f2c:	47b0      	blx	r6
	pio_set_input(PIOD, PIO_PD0, PIO_PULLUP);
   81f2e:	4c1a      	ldr	r4, [pc, #104]	; (81f98 <encoder_init+0x88>)
   81f30:	4620      	mov	r0, r4
   81f32:	2101      	movs	r1, #1
   81f34:	460a      	mov	r2, r1
   81f36:	47b0      	blx	r6
	
	// Enable Glitch/Debouncing filter
	PIOA->PIO_IFER = PIO_PA15;
   81f38:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   81f3c:	622f      	str	r7, [r5, #32]
	PIOD->PIO_IFER = PIO_PD0;
   81f3e:	2601      	movs	r6, #1
   81f40:	6226      	str	r6, [r4, #32]
	
	// Select Debouncing filter
	PIOA->PIO_DIFSR = PIO_PA15;
   81f42:	f8c5 7084 	str.w	r7, [r5, #132]	; 0x84
	PIOD->PIO_DIFSR = PIO_PD0;
   81f46:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
	
// 	if(getVenster() < 1500){
// 		pio_handler_set(PIOA, ID_PIOA, PIO_PA15, PIO_IT_FALL_EDGE, pio_interruptA);
// 	}
// 	else{
		pio_handler_set(PIOA, ID_PIOA, PIO_PA15, PIO_IT_RISE_EDGE, pio_interruptA);
   81f4a:	4b14      	ldr	r3, [pc, #80]	; (81f9c <encoder_init+0x8c>)
   81f4c:	9300      	str	r3, [sp, #0]
   81f4e:	4628      	mov	r0, r5
   81f50:	210b      	movs	r1, #11
   81f52:	463a      	mov	r2, r7
   81f54:	2370      	movs	r3, #112	; 0x70
   81f56:	f8df 8054 	ldr.w	r8, [pc, #84]	; 81fac <encoder_init+0x9c>
   81f5a:	47c0      	blx	r8
//	}
	pio_enable_interrupt(PIOA, PIO_PA15);
   81f5c:	4628      	mov	r0, r5
   81f5e:	4639      	mov	r1, r7
   81f60:	4d0f      	ldr	r5, [pc, #60]	; (81fa0 <encoder_init+0x90>)
   81f62:	47a8      	blx	r5

// 	if(getHoger() < 1500){
// 		pio_handler_set(PIOD, ID_PIOD, PIO_PD0, PIO_IT_FALL_EDGE, pio_interruptB);
// 	}
// 	else{
		pio_handler_set(PIOD, ID_PIOD, PIO_PD0, PIO_IT_RISE_EDGE, pio_interruptB);
   81f64:	4b0f      	ldr	r3, [pc, #60]	; (81fa4 <encoder_init+0x94>)
   81f66:	9300      	str	r3, [sp, #0]
   81f68:	4620      	mov	r0, r4
   81f6a:	210e      	movs	r1, #14
   81f6c:	4632      	mov	r2, r6
   81f6e:	2370      	movs	r3, #112	; 0x70
   81f70:	47c0      	blx	r8
//	}
	
	pio_enable_interrupt(PIOD, PIO_PD0);
   81f72:	4620      	mov	r0, r4
   81f74:	4631      	mov	r1, r6
   81f76:	47a8      	blx	r5
   81f78:	4b0b      	ldr	r3, [pc, #44]	; (81fa8 <encoder_init+0x98>)
   81f7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   81f7e:	601a      	str	r2, [r3, #0]
   81f80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   81f84:	601a      	str	r2, [r3, #0]
	
	// Enable Interrupt Handling in NVIC
	NVIC_EnableIRQ(PIOA_IRQn);
	NVIC_EnableIRQ(PIOD_IRQn);
}
   81f86:	b002      	add	sp, #8
   81f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f8c:	0008306d 	.word	0x0008306d
   81f90:	400e0e00 	.word	0x400e0e00
   81f94:	00082c69 	.word	0x00082c69
   81f98:	400e1400 	.word	0x400e1400
   81f9c:	00081eb1 	.word	0x00081eb1
   81fa0:	00082cf5 	.word	0x00082cf5
   81fa4:	00081ec9 	.word	0x00081ec9
   81fa8:	e000e100 	.word	0xe000e100
   81fac:	00082ec5 	.word	0x00082ec5

00081fb0 <math_get_angle_deg>:
#define PI 3.141592653589

double X = 0;
double Y = 0;
/* Takes an angle in radians and converts to degrees (from 0 to 360) */
double math_get_angle_deg(double rad){
   81fb0:	b510      	push	{r4, lr}
	return (rad * (180/PI));
   81fb2:	a303      	add	r3, pc, #12	; (adr r3, 81fc0 <math_get_angle_deg+0x10>)
   81fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   81fb8:	4c03      	ldr	r4, [pc, #12]	; (81fc8 <math_get_angle_deg+0x18>)
   81fba:	47a0      	blx	r4
}
   81fbc:	bd10      	pop	{r4, pc}
   81fbe:	bf00      	nop
   81fc0:	1a63c9ec 	.word	0x1a63c9ec
   81fc4:	404ca5dc 	.word	0x404ca5dc
   81fc8:	00083dc1 	.word	0x00083dc1

00081fcc <get_euclid_distance>:
double math_get_angle_rad(double deg){
	return (deg * (PI/180));
}

/* Get euclidean distance between two points (see Pythagorean theorem) */
uint16_t get_euclid_distance(uint16_t x, uint16_t y, uint16_t x1, uint16_t y1) {
   81fcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81fd0:	4688      	mov	r8, r1
   81fd2:	461d      	mov	r5, r3
	X = x - x1;
   81fd4:	4c15      	ldr	r4, [pc, #84]	; (8202c <get_euclid_distance+0x60>)
   81fd6:	1a80      	subs	r0, r0, r2
   81fd8:	47a0      	blx	r4
   81fda:	4606      	mov	r6, r0
   81fdc:	460f      	mov	r7, r1
   81fde:	4b14      	ldr	r3, [pc, #80]	; (82030 <get_euclid_distance+0x64>)
   81fe0:	e9c3 6700 	strd	r6, r7, [r3]
	Y = y - y1;
   81fe4:	ebc5 0008 	rsb	r0, r5, r8
   81fe8:	47a0      	blx	r4
   81fea:	4604      	mov	r4, r0
   81fec:	460d      	mov	r5, r1
   81fee:	4b11      	ldr	r3, [pc, #68]	; (82034 <get_euclid_distance+0x68>)
   81ff0:	e9c3 4500 	strd	r4, r5, [r3]
	return sqrt((X*X) + (Y*Y));
   81ff4:	f8df a048 	ldr.w	sl, [pc, #72]	; 82040 <get_euclid_distance+0x74>
   81ff8:	f8df b048 	ldr.w	fp, [pc, #72]	; 82044 <get_euclid_distance+0x78>
   81ffc:	4630      	mov	r0, r6
   81ffe:	4639      	mov	r1, r7
   82000:	4632      	mov	r2, r6
   82002:	463b      	mov	r3, r7
   82004:	47d0      	blx	sl
   82006:	4606      	mov	r6, r0
   82008:	460f      	mov	r7, r1
   8200a:	4620      	mov	r0, r4
   8200c:	4629      	mov	r1, r5
   8200e:	4622      	mov	r2, r4
   82010:	462b      	mov	r3, r5
   82012:	47d0      	blx	sl
   82014:	4602      	mov	r2, r0
   82016:	460b      	mov	r3, r1
   82018:	4630      	mov	r0, r6
   8201a:	4639      	mov	r1, r7
   8201c:	47d8      	blx	fp
   8201e:	4b06      	ldr	r3, [pc, #24]	; (82038 <get_euclid_distance+0x6c>)
   82020:	4798      	blx	r3
   82022:	4b06      	ldr	r3, [pc, #24]	; (8203c <get_euclid_distance+0x70>)
   82024:	4798      	blx	r3
}
   82026:	b280      	uxth	r0, r0
   82028:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8202c:	00083cf5 	.word	0x00083cf5
   82030:	2007aba0 	.word	0x2007aba0
   82034:	2007aba8 	.word	0x2007aba8
   82038:	000837bd 	.word	0x000837bd
   8203c:	00084345 	.word	0x00084345
   82040:	00083dc1 	.word	0x00083dc1
   82044:	00083a5d 	.word	0x00083a5d

00082048 <math_atan2>:

/* Return the angle in radians, see atan2 Wikipedia for reference */
double math_atan2(double x, double y, double x1, double y1) {
   82048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8204c:	4690      	mov	r8, r2
   8204e:	4699      	mov	r9, r3
	X = x - x1;
   82050:	4e51      	ldr	r6, [pc, #324]	; (82198 <math_atan2+0x150>)
   82052:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   82056:	47b0      	blx	r6
   82058:	4604      	mov	r4, r0
   8205a:	460d      	mov	r5, r1
   8205c:	4b4f      	ldr	r3, [pc, #316]	; (8219c <math_atan2+0x154>)
   8205e:	e9c3 4500 	strd	r4, r5, [r3]
	Y = y - y1;
   82062:	4640      	mov	r0, r8
   82064:	4649      	mov	r1, r9
   82066:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   8206a:	47b0      	blx	r6
   8206c:	4606      	mov	r6, r0
   8206e:	460f      	mov	r7, r1
   82070:	4b4b      	ldr	r3, [pc, #300]	; (821a0 <math_atan2+0x158>)
   82072:	e9c3 6700 	strd	r6, r7, [r3]
	if (X == 0 && Y == 0){
   82076:	4620      	mov	r0, r4
   82078:	4629      	mov	r1, r5
   8207a:	2200      	movs	r2, #0
   8207c:	2300      	movs	r3, #0
   8207e:	f8df c130 	ldr.w	ip, [pc, #304]	; 821b0 <math_atan2+0x168>
   82082:	47e0      	blx	ip
   82084:	b140      	cbz	r0, 82098 <math_atan2+0x50>
   82086:	4630      	mov	r0, r6
   82088:	4639      	mov	r1, r7
   8208a:	2200      	movs	r2, #0
   8208c:	2300      	movs	r3, #0
   8208e:	f8df c120 	ldr.w	ip, [pc, #288]	; 821b0 <math_atan2+0x168>
   82092:	47e0      	blx	ip
   82094:	2800      	cmp	r0, #0
   82096:	d162      	bne.n	8215e <math_atan2+0x116>
		return 0;
	}

	if (X > 0)
   82098:	4620      	mov	r0, r4
   8209a:	4629      	mov	r1, r5
   8209c:	2200      	movs	r2, #0
   8209e:	2300      	movs	r3, #0
   820a0:	f8df c110 	ldr.w	ip, [pc, #272]	; 821b4 <math_atan2+0x16c>
   820a4:	47e0      	blx	ip
   820a6:	b148      	cbz	r0, 820bc <math_atan2+0x74>
		return atan(Y/X);
   820a8:	4630      	mov	r0, r6
   820aa:	4639      	mov	r1, r7
   820ac:	4622      	mov	r2, r4
   820ae:	462b      	mov	r3, r5
   820b0:	4c3c      	ldr	r4, [pc, #240]	; (821a4 <math_atan2+0x15c>)
   820b2:	47a0      	blx	r4
   820b4:	4b3c      	ldr	r3, [pc, #240]	; (821a8 <math_atan2+0x160>)
   820b6:	4798      	blx	r3
   820b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	else if (X < 0 && Y >= 0)
   820bc:	4620      	mov	r0, r4
   820be:	4629      	mov	r1, r5
   820c0:	2200      	movs	r2, #0
   820c2:	2300      	movs	r3, #0
   820c4:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 821b8 <math_atan2+0x170>
   820c8:	47e0      	blx	ip
   820ca:	b1b0      	cbz	r0, 820fa <math_atan2+0xb2>
   820cc:	4630      	mov	r0, r6
   820ce:	4639      	mov	r1, r7
   820d0:	2200      	movs	r2, #0
   820d2:	2300      	movs	r3, #0
   820d4:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 821bc <math_atan2+0x174>
   820d8:	47e0      	blx	ip
   820da:	b1b0      	cbz	r0, 8210a <math_atan2+0xc2>
		return (atan(Y/X) + PI);
   820dc:	4630      	mov	r0, r6
   820de:	4639      	mov	r1, r7
   820e0:	4622      	mov	r2, r4
   820e2:	462b      	mov	r3, r5
   820e4:	4c2f      	ldr	r4, [pc, #188]	; (821a4 <math_atan2+0x15c>)
   820e6:	47a0      	blx	r4
   820e8:	4b2f      	ldr	r3, [pc, #188]	; (821a8 <math_atan2+0x160>)
   820ea:	4798      	blx	r3
   820ec:	a324      	add	r3, pc, #144	; (adr r3, 82180 <math_atan2+0x138>)
   820ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   820f2:	4c2e      	ldr	r4, [pc, #184]	; (821ac <math_atan2+0x164>)
   820f4:	47a0      	blx	r4
   820f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	else if (X < 0 && Y < 0)
   820fa:	4620      	mov	r0, r4
   820fc:	4629      	mov	r1, r5
   820fe:	2200      	movs	r2, #0
   82100:	2300      	movs	r3, #0
   82102:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 821b8 <math_atan2+0x170>
   82106:	47e0      	blx	ip
   82108:	b1b0      	cbz	r0, 82138 <math_atan2+0xf0>
   8210a:	4630      	mov	r0, r6
   8210c:	4639      	mov	r1, r7
   8210e:	2200      	movs	r2, #0
   82110:	2300      	movs	r3, #0
   82112:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 821b8 <math_atan2+0x170>
   82116:	47e0      	blx	ip
   82118:	b170      	cbz	r0, 82138 <math_atan2+0xf0>
		return (atan(Y/X) - PI);
   8211a:	4630      	mov	r0, r6
   8211c:	4639      	mov	r1, r7
   8211e:	4622      	mov	r2, r4
   82120:	462b      	mov	r3, r5
   82122:	4c20      	ldr	r4, [pc, #128]	; (821a4 <math_atan2+0x15c>)
   82124:	47a0      	blx	r4
   82126:	4b20      	ldr	r3, [pc, #128]	; (821a8 <math_atan2+0x160>)
   82128:	4798      	blx	r3
   8212a:	a315      	add	r3, pc, #84	; (adr r3, 82180 <math_atan2+0x138>)
   8212c:	e9d3 2300 	ldrd	r2, r3, [r3]
   82130:	4c19      	ldr	r4, [pc, #100]	; (82198 <math_atan2+0x150>)
   82132:	47a0      	blx	r4
   82134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	else if (X == 0 && Y > 0)
   82138:	4620      	mov	r0, r4
   8213a:	4629      	mov	r1, r5
   8213c:	2200      	movs	r2, #0
   8213e:	2300      	movs	r3, #0
   82140:	4c1b      	ldr	r4, [pc, #108]	; (821b0 <math_atan2+0x168>)
   82142:	47a0      	blx	r4
   82144:	b178      	cbz	r0, 82166 <math_atan2+0x11e>
   82146:	4630      	mov	r0, r6
   82148:	4639      	mov	r1, r7
   8214a:	2200      	movs	r2, #0
   8214c:	2300      	movs	r3, #0
   8214e:	4c19      	ldr	r4, [pc, #100]	; (821b4 <math_atan2+0x16c>)
   82150:	47a0      	blx	r4
   82152:	b168      	cbz	r0, 82170 <math_atan2+0x128>
		return (PI/2);
   82154:	a10c      	add	r1, pc, #48	; (adr r1, 82188 <math_atan2+0x140>)
   82156:	e9d1 0100 	ldrd	r0, r1, [r1]
   8215a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
/* Return the angle in radians, see atan2 Wikipedia for reference */
double math_atan2(double x, double y, double x1, double y1) {
	X = x - x1;
	Y = y - y1;
	if (X == 0 && Y == 0){
		return 0;
   8215e:	2000      	movs	r0, #0
   82160:	2100      	movs	r1, #0
   82162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	else if (X < 0 && Y < 0)
		return (atan(Y/X) - PI);
	else if (X == 0 && Y > 0)
		return (PI/2);
	else
		return (-PI/2);
   82166:	a10a      	add	r1, pc, #40	; (adr r1, 82190 <math_atan2+0x148>)
   82168:	e9d1 0100 	ldrd	r0, r1, [r1]
   8216c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82170:	a107      	add	r1, pc, #28	; (adr r1, 82190 <math_atan2+0x148>)
   82172:	e9d1 0100 	ldrd	r0, r1, [r1]
}
   82176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8217a:	bf00      	nop
   8217c:	f3af 8000 	nop.w
   82180:	5444261e 	.word	0x5444261e
   82184:	400921fb 	.word	0x400921fb
   82188:	5444261e 	.word	0x5444261e
   8218c:	3ff921fb 	.word	0x3ff921fb
   82190:	5444261e 	.word	0x5444261e
   82194:	bff921fb 	.word	0xbff921fb
   82198:	00083a59 	.word	0x00083a59
   8219c:	2007aba0 	.word	0x2007aba0
   821a0:	2007aba8 	.word	0x2007aba8
   821a4:	00084015 	.word	0x00084015
   821a8:	00083481 	.word	0x00083481
   821ac:	00083a5d 	.word	0x00083a5d
   821b0:	00084291 	.word	0x00084291
   821b4:	000842e1 	.word	0x000842e1
   821b8:	000842a5 	.word	0x000842a5
   821bc:	000842cd 	.word	0x000842cd

000821c0 <convertDistance>:
	 pwm_pin_6(speed2);
 }
 /************************************************************************/
 /* This function converts a specific distance to pulses for the motor                                                                  */
 /************************************************************************/
 uint16_t convertDistance(uint16_t cm){
   821c0:	b510      	push	{r4, lr}
	return cm/1.396;
   821c2:	4b07      	ldr	r3, [pc, #28]	; (821e0 <convertDistance+0x20>)
   821c4:	4798      	blx	r3
   821c6:	a304      	add	r3, pc, #16	; (adr r3, 821d8 <convertDistance+0x18>)
   821c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   821cc:	4c05      	ldr	r4, [pc, #20]	; (821e4 <convertDistance+0x24>)
   821ce:	47a0      	blx	r4
   821d0:	4b05      	ldr	r3, [pc, #20]	; (821e8 <convertDistance+0x28>)
   821d2:	4798      	blx	r3
 }
   821d4:	b280      	uxth	r0, r0
   821d6:	bd10      	pop	{r4, pc}
   821d8:	189374bc 	.word	0x189374bc
   821dc:	3ff65604 	.word	0x3ff65604
   821e0:	00083cf5 	.word	0x00083cf5
   821e4:	00084015 	.word	0x00084015
   821e8:	00084345 	.word	0x00084345

000821ec <drive>:
 
 /************************************************************************/
 /* This function gives power to both of the motors and keeps them
 /* moving at he same speed
 /************************************************************************/
 void drive(uint16_t U0v, uint16_t U0h){
   821ec:	b570      	push	{r4, r5, r6, lr}
   821ee:	4604      	mov	r4, r0
   821f0:	460d      	mov	r5, r1
	 e = (get_counterA() - get_counterB());
   821f2:	4b0e      	ldr	r3, [pc, #56]	; (8222c <drive+0x40>)
   821f4:	4798      	blx	r3
   821f6:	4606      	mov	r6, r0
   821f8:	4b0d      	ldr	r3, [pc, #52]	; (82230 <drive+0x44>)
   821fa:	4798      	blx	r3
   821fc:	1a30      	subs	r0, r6, r0
   821fe:	b281      	uxth	r1, r0
   82200:	4b0c      	ldr	r3, [pc, #48]	; (82234 <drive+0x48>)
   82202:	8019      	strh	r1, [r3, #0]
	 u = (k*e);
   82204:	4b0c      	ldr	r3, [pc, #48]	; (82238 <drive+0x4c>)
   82206:	781b      	ldrb	r3, [r3, #0]
   82208:	fb03 f101 	mul.w	r1, r3, r1
   8220c:	b289      	uxth	r1, r1
   8220e:	4b0b      	ldr	r3, [pc, #44]	; (8223c <drive+0x50>)
   82210:	8019      	strh	r1, [r3, #0]
	 
	 Uv = U0v - u;
   82212:	1a60      	subs	r0, r4, r1
   82214:	b280      	uxth	r0, r0
   82216:	4b0a      	ldr	r3, [pc, #40]	; (82240 <drive+0x54>)
   82218:	8018      	strh	r0, [r3, #0]
	 Uh = u + U0h;
   8221a:	4c0a      	ldr	r4, [pc, #40]	; (82244 <drive+0x58>)
   8221c:	4429      	add	r1, r5
   8221e:	8021      	strh	r1, [r4, #0]

 /************************************************************************/
 /* A funktion that gives power to motor A                                                                     */
 /************************************************************************/
 void motorA(uint16_t speed1){
	 pwm_pin_7(speed1);
   82220:	4b09      	ldr	r3, [pc, #36]	; (82248 <drive+0x5c>)
   82222:	4798      	blx	r3
 
 /************************************************************************/
 /* A funktion that gives power to motor B                                                                     */
 /************************************************************************/
 void motorB(uint16_t speed2){
	 pwm_pin_6(speed2);
   82224:	8820      	ldrh	r0, [r4, #0]
   82226:	4b09      	ldr	r3, [pc, #36]	; (8224c <drive+0x60>)
   82228:	4798      	blx	r3
   8222a:	bd70      	pop	{r4, r5, r6, pc}
   8222c:	00081ee1 	.word	0x00081ee1
   82230:	00081eed 	.word	0x00081eed
   82234:	2007abb6 	.word	0x2007abb6
   82238:	20070158 	.word	0x20070158
   8223c:	2007abb2 	.word	0x2007abb2
   82240:	2007abb4 	.word	0x2007abb4
   82244:	2007abb0 	.word	0x2007abb0
   82248:	00081e81 	.word	0x00081e81
   8224c:	00081e51 	.word	0x00081e51

00082250 <driveVinkel>:
 
 /************************************************************************/
 /* This function rotates the robot and keeps it in its place, one motor */
 /* rotates forward the other motor rotates backwards                    */
 /************************************************************************/
 void driveVinkel(int riktning){
   82250:	b508      	push	{r3, lr}
	 if(riktning == 1){
   82252:	2801      	cmp	r0, #1
   82254:	d106      	bne.n	82264 <driveVinkel+0x14>
		 drive(1400, 1575);
   82256:	f44f 60af 	mov.w	r0, #1400	; 0x578
   8225a:	f240 6127 	movw	r1, #1575	; 0x627
   8225e:	4b08      	ldr	r3, [pc, #32]	; (82280 <driveVinkel+0x30>)
   82260:	4798      	blx	r3
   82262:	bd08      	pop	{r3, pc}
	 }else if (riktning == -1){
   82264:	f1b0 3fff 	cmp.w	r0, #4294967295
		 drive(1575, 1400);
   82268:	bf07      	ittee	eq
   8226a:	f240 6027 	movweq	r0, #1575	; 0x627
   8226e:	f44f 61af 	moveq.w	r1, #1400	; 0x578
	 }else{
		 drive(1500, 1500);
   82272:	f240 50dc 	movwne	r0, #1500	; 0x5dc
   82276:	4601      	movne	r1, r0
   82278:	4b01      	ldr	r3, [pc, #4]	; (82280 <driveVinkel+0x30>)
   8227a:	4798      	blx	r3
   8227c:	bd08      	pop	{r3, pc}
   8227e:	bf00      	nop
   82280:	000821ed 	.word	0x000821ed

00082284 <forDelay>:
#include "drivers/TWI.h"
#include "main_task.h"

#define MOTOR_TASK_PERIODICITY 4 /* The number on the macro will decide the periodicity of the task */

static void forDelay(){
   82284:	b570      	push	{r4, r5, r6, lr}
   82286:	4c05      	ldr	r4, [pc, #20]	; (8229c <forDelay+0x18>)
	for(int i = 0;i < 200000;i++){
		drive(1500,1500);
   82288:	f240 56dc 	movw	r6, #1500	; 0x5dc
   8228c:	4d04      	ldr	r5, [pc, #16]	; (822a0 <forDelay+0x1c>)
   8228e:	4630      	mov	r0, r6
   82290:	4631      	mov	r1, r6
   82292:	47a8      	blx	r5
#include "main_task.h"

#define MOTOR_TASK_PERIODICITY 4 /* The number on the macro will decide the periodicity of the task */

static void forDelay(){
	for(int i = 0;i < 200000;i++){
   82294:	3c01      	subs	r4, #1
   82296:	d1fa      	bne.n	8228e <forDelay+0xa>
		drive(1500,1500);
	}
}
   82298:	bd70      	pop	{r4, r5, r6, pc}
   8229a:	bf00      	nop
   8229c:	00030d40 	.word	0x00030d40
   822a0:	000821ed 	.word	0x000821ed
   822a4:	00000000 	.word	0x00000000

000822a8 <motor_task>:

void motor_task(void *pvParameters) {
   822a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   822ac:	b087      	sub	sp, #28
	const portTickType xTimeIncrement = MOTOR_TASK_PERIODICITY;
 	int16_t angle = 0;
 	int16_t distance = 0;
	uint8_t flagg = 0;
	uint8_t flaggu = 0;
	uint8_t accelerate = 200;
   822ae:	f04f 08c8 	mov.w	r8, #200	; 0xc8
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = MOTOR_TASK_PERIODICITY;
 	int16_t angle = 0;
 	int16_t distance = 0;
	uint8_t flagg = 0;
	uint8_t flaggu = 0;
   822b2:	f04f 0900 	mov.w	r9, #0
	
	struct motor_task_instruction current_instruction;
	
	while(1){
		/* Get current tick count */
		xLastWakeTime = xTaskGetTickCount();
   822b6:	f8df a148 	ldr.w	sl, [pc, #328]	; 82400 <motor_task+0x158>
		
		while(!xQueuePeek(motor_task_instruction_handle, &current_instruction, 10));
   822ba:	4d43      	ldr	r5, [pc, #268]	; (823c8 <motor_task+0x120>)
   822bc:	4c43      	ldr	r4, [pc, #268]	; (823cc <motor_task+0x124>)
	
	struct motor_task_instruction current_instruction;
	
	while(1){
		/* Get current tick count */
		xLastWakeTime = xTaskGetTickCount();
   822be:	47d0      	blx	sl
   822c0:	9005      	str	r0, [sp, #20]
		
		while(!xQueuePeek(motor_task_instruction_handle, &current_instruction, 10));
   822c2:	6828      	ldr	r0, [r5, #0]
   822c4:	4669      	mov	r1, sp
   822c6:	220a      	movs	r2, #10
   822c8:	2301      	movs	r3, #1
   822ca:	47a0      	blx	r4
   822cc:	2800      	cmp	r0, #0
   822ce:	d0f8      	beq.n	822c2 <motor_task+0x1a>
		
		angle = (int16_t)current_instruction.angle/3.809;
   822d0:	4e3f      	ldr	r6, [pc, #252]	; (823d0 <motor_task+0x128>)
   822d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   822d6:	47b0      	blx	r6
   822d8:	b200      	sxth	r0, r0
   822da:	4b3e      	ldr	r3, [pc, #248]	; (823d4 <motor_task+0x12c>)
   822dc:	4798      	blx	r3
   822de:	a338      	add	r3, pc, #224	; (adr r3, 823c0 <motor_task+0x118>)
   822e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   822e4:	4f3c      	ldr	r7, [pc, #240]	; (823d8 <motor_task+0x130>)
   822e6:	47b8      	blx	r7
   822e8:	47b0      	blx	r6
   822ea:	b287      	uxth	r7, r0
		distance = convertDistance(current_instruction.distance);
   822ec:	f8bd 0000 	ldrh.w	r0, [sp]
   822f0:	4b3a      	ldr	r3, [pc, #232]	; (823dc <motor_task+0x134>)
   822f2:	4798      	blx	r3
   822f4:	b286      	uxth	r6, r0
		
		if(angle<0){
   822f6:	f417 4f00 	tst.w	r7, #32768	; 0x8000
			angle = angle * -1;
   822fa:	bf1d      	ittte	ne
   822fc:	427f      	negne	r7, r7
   822fe:	b2bf      	uxthne	r7, r7
			flagg = 3;
   82300:	f04f 0b03 	movne.w	fp, #3
		}else{
			flagg = 0;
   82304:	f04f 0b00 	moveq.w	fp, #0
		}
		if(get_counterA() < angle + distance && get_counterB() < angle + distance){
   82308:	4b35      	ldr	r3, [pc, #212]	; (823e0 <motor_task+0x138>)
   8230a:	4798      	blx	r3
   8230c:	b23f      	sxth	r7, r7
   8230e:	b236      	sxth	r6, r6
   82310:	443e      	add	r6, r7
   82312:	42b0      	cmp	r0, r6
   82314:	da3d      	bge.n	82392 <motor_task+0xea>
   82316:	4b33      	ldr	r3, [pc, #204]	; (823e4 <motor_task+0x13c>)
   82318:	4798      	blx	r3
   8231a:	4286      	cmp	r6, r0
   8231c:	dd39      	ble.n	82392 <motor_task+0xea>
			
			
			if(get_counterA() < (angle) && get_counterB() < (angle) && flagg == 0){
   8231e:	4b30      	ldr	r3, [pc, #192]	; (823e0 <motor_task+0x138>)
   82320:	4798      	blx	r3
   82322:	4287      	cmp	r7, r0
   82324:	dd0a      	ble.n	8233c <motor_task+0x94>
   82326:	4b2f      	ldr	r3, [pc, #188]	; (823e4 <motor_task+0x13c>)
   82328:	4798      	blx	r3
   8232a:	4287      	cmp	r7, r0
   8232c:	dd06      	ble.n	8233c <motor_task+0x94>
   8232e:	f1bb 0f00 	cmp.w	fp, #0
   82332:	d103      	bne.n	8233c <motor_task+0x94>
				driveVinkel(1);
   82334:	2001      	movs	r0, #1
   82336:	4b2c      	ldr	r3, [pc, #176]	; (823e8 <motor_task+0x140>)
   82338:	4798      	blx	r3
   8233a:	e03c      	b.n	823b6 <motor_task+0x10e>
			}else if(get_counterA() < (angle) && get_counterB() < (angle) && flagg == 3){
   8233c:	4b28      	ldr	r3, [pc, #160]	; (823e0 <motor_task+0x138>)
   8233e:	4798      	blx	r3
   82340:	4287      	cmp	r7, r0
   82342:	dd0b      	ble.n	8235c <motor_task+0xb4>
   82344:	4b27      	ldr	r3, [pc, #156]	; (823e4 <motor_task+0x13c>)
   82346:	4798      	blx	r3
   82348:	4287      	cmp	r7, r0
   8234a:	dd07      	ble.n	8235c <motor_task+0xb4>
   8234c:	f1bb 0f03 	cmp.w	fp, #3
   82350:	d104      	bne.n	8235c <motor_task+0xb4>
				driveVinkel(-1);
   82352:	f04f 30ff 	mov.w	r0, #4294967295
   82356:	4b24      	ldr	r3, [pc, #144]	; (823e8 <motor_task+0x140>)
   82358:	4798      	blx	r3
   8235a:	e02c      	b.n	823b6 <motor_task+0x10e>
			}else{
				if(flaggu != 1){
   8235c:	f1b9 0f00 	cmp.w	r9, #0
   82360:	d101      	bne.n	82366 <motor_task+0xbe>
					forDelay();
   82362:	4b22      	ldr	r3, [pc, #136]	; (823ec <motor_task+0x144>)
   82364:	4798      	blx	r3
					flaggu = 1;
				}
				drive(1753 - accelerate,1793 - accelerate);
   82366:	fa1f f188 	uxth.w	r1, r8
   8236a:	f5c1 60db 	rsb	r0, r1, #1752	; 0x6d8
   8236e:	3001      	adds	r0, #1
   82370:	f5c1 61e0 	rsb	r1, r1, #1792	; 0x700
   82374:	3101      	adds	r1, #1
   82376:	b280      	uxth	r0, r0
   82378:	b289      	uxth	r1, r1
   8237a:	4b1d      	ldr	r3, [pc, #116]	; (823f0 <motor_task+0x148>)
   8237c:	4798      	blx	r3
				if(accelerate > 0){
   8237e:	f1b8 0f00 	cmp.w	r8, #0
   82382:	d016      	beq.n	823b2 <motor_task+0x10a>
					accelerate = accelerate - 1;
   82384:	f108 38ff 	add.w	r8, r8, #4294967295
   82388:	fa5f f888 	uxtb.w	r8, r8
   8238c:	f04f 0901 	mov.w	r9, #1
   82390:	e011      	b.n	823b6 <motor_task+0x10e>
					}
				}
			}
		}
		else{
			forDelay();
   82392:	4b16      	ldr	r3, [pc, #88]	; (823ec <motor_task+0x144>)
   82394:	4798      	blx	r3
			flagg = 1;
			flaggu = 0;
			accelerate = 200;
			/* Finished driving the distance, empty queue for new instruction */
			xQueueReceive(motor_task_instruction_handle, &current_instruction, 10);
   82396:	6828      	ldr	r0, [r5, #0]
   82398:	4669      	mov	r1, sp
   8239a:	220a      	movs	r2, #10
   8239c:	2300      	movs	r3, #0
   8239e:	47a0      	blx	r4
			resetCounterA();
   823a0:	4b14      	ldr	r3, [pc, #80]	; (823f4 <motor_task+0x14c>)
   823a2:	4798      	blx	r3
			resetCounterB();
   823a4:	4b14      	ldr	r3, [pc, #80]	; (823f8 <motor_task+0x150>)
   823a6:	4798      	blx	r3
		}
		else{
			forDelay();
			flagg = 1;
			flaggu = 0;
			accelerate = 200;
   823a8:	f04f 08c8 	mov.w	r8, #200	; 0xc8
			}
		}
		else{
			forDelay();
			flagg = 1;
			flaggu = 0;
   823ac:	f04f 0900 	mov.w	r9, #0
   823b0:	e001      	b.n	823b6 <motor_task+0x10e>
   823b2:	f04f 0901 	mov.w	r9, #1
			resetCounterA();
			resetCounterB();
		}
	
		/* The task is now done, go to sleep until it's time again */
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   823b6:	a805      	add	r0, sp, #20
   823b8:	2104      	movs	r1, #4
   823ba:	4b10      	ldr	r3, [pc, #64]	; (823fc <motor_task+0x154>)
   823bc:	4798      	blx	r3
	}
   823be:	e77e      	b.n	822be <motor_task+0x16>
   823c0:	fdf3b646 	.word	0xfdf3b646
   823c4:	400e78d4 	.word	0x400e78d4
   823c8:	2007ad68 	.word	0x2007ad68
   823cc:	00080e9d 	.word	0x00080e9d
   823d0:	000842f5 	.word	0x000842f5
   823d4:	00083cf5 	.word	0x00083cf5
   823d8:	00084015 	.word	0x00084015
   823dc:	000821c1 	.word	0x000821c1
   823e0:	00081ee1 	.word	0x00081ee1
   823e4:	00081eed 	.word	0x00081eed
   823e8:	00082251 	.word	0x00082251
   823ec:	00082285 	.word	0x00082285
   823f0:	000821ed 	.word	0x000821ed
   823f4:	00081ef9 	.word	0x00081ef9
   823f8:	00081f05 	.word	0x00081f05
   823fc:	0008155d 	.word	0x0008155d
   82400:	00081319 	.word	0x00081319

00082404 <check_samples.8810>:
	float rotate = 0; // How much has the robot rotated in degree
	float const rotation_deg = 22.8; // The motor task can only rotate 3.8 degree as minimum
	int moved_counter = 0; // How many times the robot will move forward when it doesn't find an object
	int const max_moved_times = 5; // Max times the robot will move forward in attempt to find an object
	
	int check_samples(void) { // filtering (doesn't have to be a function)
   82404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82406:	240a      	movs	r4, #10
		int max_value = 25;
		int min_value = 5;
		int check_sample = 0;
		int legit_sample_counter = 0;
		int sum_values = 0;
   82408:	2500      	movs	r5, #0
	
	int check_samples(void) { // filtering (doesn't have to be a function)
		int max_value = 25;
		int min_value = 5;
		int check_sample = 0;
		int legit_sample_counter = 0;
   8240a:	462f      	mov	r7, r5
		int sum_values = 0;
		
		for (int i = 0; i < 10; i++) {
			check_sample = hcsr04_get_distance();
   8240c:	4e09      	ldr	r6, [pc, #36]	; (82434 <check_samples.8810+0x30>)
   8240e:	47b0      	blx	r6
			sum_values += check_sample;
   82410:	4405      	add	r5, r0
			
			if (check_sample > min_value && check_sample < max_value)
   82412:	3806      	subs	r0, #6
   82414:	2812      	cmp	r0, #18
			{
				legit_sample_counter++;
   82416:	bf98      	it	ls
   82418:	3701      	addls	r7, #1
		int min_value = 5;
		int check_sample = 0;
		int legit_sample_counter = 0;
		int sum_values = 0;
		
		for (int i = 0; i < 10; i++) {
   8241a:	3c01      	subs	r4, #1
   8241c:	d1f7      	bne.n	8240e <check_samples.8810+0xa>
			{
				legit_sample_counter++;
			}
		}
		
		if (legit_sample_counter > 7) {
   8241e:	2f07      	cmp	r7, #7
   82420:	dd06      	ble.n	82430 <check_samples.8810+0x2c>
			return sum_values / 10;
   82422:	4805      	ldr	r0, [pc, #20]	; (82438 <check_samples.8810+0x34>)
   82424:	fb80 3005 	smull	r3, r0, r0, r5
   82428:	17ed      	asrs	r5, r5, #31
   8242a:	ebc5 00a0 	rsb	r0, r5, r0, asr #2
   8242e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		return 0;
   82430:	2000      	movs	r0, #0
	}
   82432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82434:	00080205 	.word	0x00080205
   82438:	66666667 	.word	0x66666667

0008243c <main_task>:
	{ 120, 50 },
	{ 140, 150 },
	{ 280, 260 },
};

void main_task(void *pvParameters) {
   8243c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82440:	b091      	sub	sp, #68	; 0x44
	int16_t distance, minimum_distance_to_object; /* In cm */
	double alpha, beta, correction_angle, minimum_angle = 1; /* In degrees */
	uint8_t mock_pos_index = 0;
	
	/* Read first time package and set static coordinates */
	update_positions();
   82442:	4b94      	ldr	r3, [pc, #592]	; (82694 <main_task+0x258>)
   82444:	4798      	blx	r3
	current_pos = get_pos();
   82446:	4b94      	ldr	r3, [pc, #592]	; (82698 <main_task+0x25c>)
   82448:	4798      	blx	r3
   8244a:	4b94      	ldr	r3, [pc, #592]	; (8269c <main_task+0x260>)
   8244c:	6018      	str	r0, [r3, #0]
	box = get_box();
   8244e:	4b94      	ldr	r3, [pc, #592]	; (826a0 <main_task+0x264>)
   82450:	4798      	blx	r3
   82452:	4b94      	ldr	r3, [pc, #592]	; (826a4 <main_task+0x268>)
   82454:	6018      	str	r0, [r3, #0]
	
	if (ioport_get_pin_level(pin_mapper(SWITCH_CURIE_NOETHER_PIN))) {
   82456:	2005      	movs	r0, #5
   82458:	4b93      	ldr	r3, [pc, #588]	; (826a8 <main_task+0x26c>)
   8245a:	4798      	blx	r3
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   8245c:	0943      	lsrs	r3, r0, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8245e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82462:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82466:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   82468:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   8246a:	f000 001f 	and.w	r0, r0, #31
   8246e:	2301      	movs	r3, #1
   82470:	4083      	lsls	r3, r0
   82472:	4213      	tst	r3, r2
   82474:	d009      	beq.n	8248a <main_task+0x4e>
		/* Marie Curie */
		object = get_cube();
   82476:	4b8d      	ldr	r3, [pc, #564]	; (826ac <main_task+0x270>)
   82478:	4798      	blx	r3
   8247a:	4b8d      	ldr	r3, [pc, #564]	; (826b0 <main_task+0x274>)
   8247c:	6018      	str	r0, [r3, #0]
		minimum_distance_to_object = 25; // The distance in front of the platform to the ball for picking it up
		printf("Curie");
   8247e:	488d      	ldr	r0, [pc, #564]	; (826b4 <main_task+0x278>)
   82480:	4b8d      	ldr	r3, [pc, #564]	; (826b8 <main_task+0x27c>)
   82482:	4798      	blx	r3
	box = get_box();
	
	if (ioport_get_pin_level(pin_mapper(SWITCH_CURIE_NOETHER_PIN))) {
		/* Marie Curie */
		object = get_cube();
		minimum_distance_to_object = 25; // The distance in front of the platform to the ball for picking it up
   82484:	2319      	movs	r3, #25
   82486:	930b      	str	r3, [sp, #44]	; 0x2c
   82488:	e008      	b.n	8249c <main_task+0x60>
		printf("Curie");
	}
	else{
		/* Emmy Noether */
		object = get_ball();
   8248a:	4b8c      	ldr	r3, [pc, #560]	; (826bc <main_task+0x280>)
   8248c:	4798      	blx	r3
   8248e:	4b88      	ldr	r3, [pc, #544]	; (826b0 <main_task+0x274>)
   82490:	6018      	str	r0, [r3, #0]
		minimum_distance_to_object = 20; // The distance in front of the platform to the steel ball for picking it up
		printf("Noether");
   82492:	488b      	ldr	r0, [pc, #556]	; (826c0 <main_task+0x284>)
   82494:	4b88      	ldr	r3, [pc, #544]	; (826b8 <main_task+0x27c>)
   82496:	4798      	blx	r3
		printf("Curie");
	}
	else{
		/* Emmy Noether */
		object = get_ball();
		minimum_distance_to_object = 20; // The distance in front of the platform to the steel ball for picking it up
   82498:	2314      	movs	r3, #20
   8249a:	930b      	str	r3, [sp, #44]	; 0x2c
		printf("Noether");
	}
		
	update_positions();
   8249c:	4b7d      	ldr	r3, [pc, #500]	; (82694 <main_task+0x258>)
   8249e:	4798      	blx	r3
	current_pos = get_pos();
   824a0:	4b7d      	ldr	r3, [pc, #500]	; (82698 <main_task+0x25c>)
   824a2:	4798      	blx	r3
   824a4:	4603      	mov	r3, r0
   824a6:	4d7d      	ldr	r5, [pc, #500]	; (8269c <main_task+0x260>)
   824a8:	6028      	str	r0, [r5, #0]

	/* Drive only half the distance */
	distance = get_euclid_distance(object.x, object.y, current_pos.x, current_pos.y) / 2;
   824aa:	4e81      	ldr	r6, [pc, #516]	; (826b0 <main_task+0x274>)
   824ac:	8830      	ldrh	r0, [r6, #0]
   824ae:	8871      	ldrh	r1, [r6, #2]
   824b0:	b29a      	uxth	r2, r3
   824b2:	0c1b      	lsrs	r3, r3, #16
   824b4:	4c83      	ldr	r4, [pc, #524]	; (826c4 <main_task+0x288>)
   824b6:	47a0      	blx	r4
   824b8:	f3c0 044f 	ubfx	r4, r0, #1, #16
	alpha = math_get_angle_deg(math_atan2(object.x, object.y, current_pos.x, current_pos.y));
   824bc:	4f82      	ldr	r7, [pc, #520]	; (826c8 <main_task+0x28c>)
   824be:	8830      	ldrh	r0, [r6, #0]
   824c0:	47b8      	blx	r7
   824c2:	4680      	mov	r8, r0
   824c4:	4689      	mov	r9, r1
   824c6:	8870      	ldrh	r0, [r6, #2]
   824c8:	47b8      	blx	r7
   824ca:	4682      	mov	sl, r0
   824cc:	468b      	mov	fp, r1
   824ce:	8828      	ldrh	r0, [r5, #0]
   824d0:	47b8      	blx	r7
   824d2:	e9cd 0100 	strd	r0, r1, [sp]
   824d6:	8868      	ldrh	r0, [r5, #2]
   824d8:	47b8      	blx	r7
   824da:	e9cd 0102 	strd	r0, r1, [sp, #8]
   824de:	4640      	mov	r0, r8
   824e0:	4649      	mov	r1, r9
   824e2:	4652      	mov	r2, sl
   824e4:	465b      	mov	r3, fp
   824e6:	4e79      	ldr	r6, [pc, #484]	; (826cc <main_task+0x290>)
   824e8:	47b0      	blx	r6
   824ea:	4b79      	ldr	r3, [pc, #484]	; (826d0 <main_task+0x294>)
   824ec:	4798      	blx	r3
   824ee:	4606      	mov	r6, r0
   824f0:	460f      	mov	r7, r1
		
	struct motor_task_instruction inst = {
   824f2:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
   824f6:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
		.distance = distance,
		.angle = alpha
	};
		
	xQueueSend(motor_task_instruction_handle, &inst, 10);
   824fa:	4b76      	ldr	r3, [pc, #472]	; (826d4 <main_task+0x298>)
   824fc:	6818      	ldr	r0, [r3, #0]
   824fe:	a90c      	add	r1, sp, #48	; 0x30
   82500:	220a      	movs	r2, #10
   82502:	2300      	movs	r3, #0
   82504:	f8df c204 	ldr.w	ip, [pc, #516]	; 8270c <main_task+0x2d0>
   82508:	47e0      	blx	ip
	earlier_pos = current_pos;
   8250a:	682a      	ldr	r2, [r5, #0]
   8250c:	4b72      	ldr	r3, [pc, #456]	; (826d8 <main_task+0x29c>)
   8250e:	601a      	str	r2, [r3, #0]
	
	printf("First run, angle: %d, d: %d", (int16_t)alpha, distance);
   82510:	4630      	mov	r0, r6
   82512:	4639      	mov	r1, r7
   82514:	4b71      	ldr	r3, [pc, #452]	; (826dc <main_task+0x2a0>)
   82516:	4798      	blx	r3
   82518:	b201      	sxth	r1, r0
   8251a:	b224      	sxth	r4, r4
   8251c:	4870      	ldr	r0, [pc, #448]	; (826e0 <main_task+0x2a4>)
   8251e:	4622      	mov	r2, r4
   82520:	4b65      	ldr	r3, [pc, #404]	; (826b8 <main_task+0x27c>)
   82522:	4798      	blx	r3

	while(distance > minimum_distance_to_object) {
   82524:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
   82528:	42a3      	cmp	r3, r4
   8252a:	f280 80a1 	bge.w	82670 <main_task+0x234>
   8252e:	2300      	movs	r3, #0
   82530:	930a      	str	r3, [sp, #40]	; 0x28
		/* Wait for motor task to complete */
		while(xQueuePeek(motor_task_instruction_handle, &inst, 2));
   82532:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 826d4 <main_task+0x298>
   82536:	4e6b      	ldr	r6, [pc, #428]	; (826e4 <main_task+0x2a8>)

		//I2C_master_read(TWI1, &packet_pos);
		//PSEUDO: Get robot's new position and update current_pos
		current_pos = mock_positions[mock_pos_index];
   82538:	462f      	mov	r7, r5
	
	printf("First run, angle: %d, d: %d", (int16_t)alpha, distance);

	while(distance > minimum_distance_to_object) {
		/* Wait for motor task to complete */
		while(xQueuePeek(motor_task_instruction_handle, &inst, 2));
   8253a:	f8db 0000 	ldr.w	r0, [fp]
   8253e:	a90c      	add	r1, sp, #48	; 0x30
   82540:	2202      	movs	r2, #2
   82542:	2301      	movs	r3, #1
   82544:	47b0      	blx	r6
   82546:	2800      	cmp	r0, #0
   82548:	d1f7      	bne.n	8253a <main_task+0xfe>

		//I2C_master_read(TWI1, &packet_pos);
		//PSEUDO: Get robot's new position and update current_pos
		current_pos = mock_positions[mock_pos_index];
   8254a:	4b67      	ldr	r3, [pc, #412]	; (826e8 <main_task+0x2ac>)
   8254c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8254e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   82552:	603a      	str	r2, [r7, #0]
		printf("Current pos: (%d, %d)\n", current_pos.x, current_pos.y);
   82554:	4865      	ldr	r0, [pc, #404]	; (826ec <main_task+0x2b0>)
   82556:	b291      	uxth	r1, r2
   82558:	0c12      	lsrs	r2, r2, #16
   8255a:	f8df 815c 	ldr.w	r8, [pc, #348]	; 826b8 <main_task+0x27c>
   8255e:	47c0      	blx	r8
		printf("Earlier pos: (%d, %d)\n", earlier_pos.x, earlier_pos.y);
   82560:	f8df 9174 	ldr.w	r9, [pc, #372]	; 826d8 <main_task+0x29c>
   82564:	4862      	ldr	r0, [pc, #392]	; (826f0 <main_task+0x2b4>)
   82566:	f8b9 1000 	ldrh.w	r1, [r9]
   8256a:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   8256e:	47c0      	blx	r8
		
		distance = get_euclid_distance(object.x, object.y, current_pos.x, current_pos.y) / 2;
   82570:	4b4f      	ldr	r3, [pc, #316]	; (826b0 <main_task+0x274>)
   82572:	8818      	ldrh	r0, [r3, #0]
   82574:	8859      	ldrh	r1, [r3, #2]
   82576:	883a      	ldrh	r2, [r7, #0]
   82578:	887b      	ldrh	r3, [r7, #2]
   8257a:	4c52      	ldr	r4, [pc, #328]	; (826c4 <main_task+0x288>)
   8257c:	47a0      	blx	r4
   8257e:	f3c0 0a4f 	ubfx	sl, r0, #1, #16
		/* Calculate the actual angle that was driven */
		beta = math_get_angle_deg(math_atan2(current_pos.x, current_pos.y, earlier_pos.x, earlier_pos.y));
   82582:	4c51      	ldr	r4, [pc, #324]	; (826c8 <main_task+0x28c>)
   82584:	8838      	ldrh	r0, [r7, #0]
   82586:	47a0      	blx	r4
   82588:	e9cd 0104 	strd	r0, r1, [sp, #16]
   8258c:	8878      	ldrh	r0, [r7, #2]
   8258e:	47a0      	blx	r4
   82590:	e9cd 0106 	strd	r0, r1, [sp, #24]
   82594:	f8b9 0000 	ldrh.w	r0, [r9]
   82598:	47a0      	blx	r4
   8259a:	e9cd 0100 	strd	r0, r1, [sp]
   8259e:	f8b9 0002 	ldrh.w	r0, [r9, #2]
   825a2:	47a0      	blx	r4
   825a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   825a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   825ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   825b0:	4d46      	ldr	r5, [pc, #280]	; (826cc <main_task+0x290>)
   825b2:	47a8      	blx	r5
   825b4:	f8df 9118 	ldr.w	r9, [pc, #280]	; 826d0 <main_task+0x294>
   825b8:	47c8      	blx	r9
   825ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
		alpha = math_get_angle_deg(math_atan2(object.x, object.y, current_pos.x, current_pos.y));
   825be:	4b3c      	ldr	r3, [pc, #240]	; (826b0 <main_task+0x274>)
   825c0:	8818      	ldrh	r0, [r3, #0]
   825c2:	47a0      	blx	r4
   825c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   825c8:	4b39      	ldr	r3, [pc, #228]	; (826b0 <main_task+0x274>)
   825ca:	8858      	ldrh	r0, [r3, #2]
   825cc:	47a0      	blx	r4
   825ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
   825d2:	8838      	ldrh	r0, [r7, #0]
   825d4:	47a0      	blx	r4
   825d6:	e9cd 0100 	strd	r0, r1, [sp]
   825da:	8878      	ldrh	r0, [r7, #2]
   825dc:	47a0      	blx	r4
   825de:	e9cd 0102 	strd	r0, r1, [sp, #8]
   825e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   825e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   825ea:	47a8      	blx	r5
   825ec:	47c8      	blx	r9
   825ee:	4602      	mov	r2, r0
   825f0:	460b      	mov	r3, r1
		correction_angle = beta - alpha;
   825f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   825f6:	4c3f      	ldr	r4, [pc, #252]	; (826f4 <main_task+0x2b8>)
   825f8:	47a0      	blx	r4
   825fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
		
		printf("correction: %d, d: %d\n", (int16_t)correction_angle, distance);
   825fe:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 826dc <main_task+0x2a0>
   82602:	47c8      	blx	r9
   82604:	4604      	mov	r4, r0
   82606:	483c      	ldr	r0, [pc, #240]	; (826f8 <main_task+0x2bc>)
   82608:	b221      	sxth	r1, r4
   8260a:	fa0f f28a 	sxth.w	r2, sl
   8260e:	47c0      	blx	r8
		printf("Object: (%d, %d)\n", object.x, object.y);
   82610:	483a      	ldr	r0, [pc, #232]	; (826fc <main_task+0x2c0>)
   82612:	4b27      	ldr	r3, [pc, #156]	; (826b0 <main_task+0x274>)
   82614:	8819      	ldrh	r1, [r3, #0]
   82616:	885a      	ldrh	r2, [r3, #2]
   82618:	47c0      	blx	r8

		if (abs(correction_angle) < minimum_angle){
   8261a:	ea84 70e4 	eor.w	r0, r4, r4, asr #31
   8261e:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
   82622:	4b37      	ldr	r3, [pc, #220]	; (82700 <main_task+0x2c4>)
   82624:	4798      	blx	r3
   82626:	2200      	movs	r2, #0
   82628:	4b36      	ldr	r3, [pc, #216]	; (82704 <main_task+0x2c8>)
   8262a:	4c37      	ldr	r4, [pc, #220]	; (82708 <main_task+0x2cc>)
   8262c:	47a0      	blx	r4
   8262e:	b118      	cbz	r0, 82638 <main_task+0x1fc>
			correction_angle = 0;
   82630:	2200      	movs	r2, #0
   82632:	2300      	movs	r3, #0
   82634:	e9cd 2304 	strd	r2, r3, [sp, #16]
		}
			
		inst.distance = distance;
   82638:	f8ad a030 	strh.w	sl, [sp, #48]	; 0x30
		inst.angle = correction_angle;
   8263c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   82640:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38

		if (xQueueSend(motor_task_instruction_handle, &inst, 5)) {
   82644:	f8db 0000 	ldr.w	r0, [fp]
   82648:	a90c      	add	r1, sp, #48	; 0x30
   8264a:	2205      	movs	r2, #5
   8264c:	2300      	movs	r3, #0
   8264e:	4c2f      	ldr	r4, [pc, #188]	; (8270c <main_task+0x2d0>)
   82650:	47a0      	blx	r4
   82652:	b130      	cbz	r0, 82662 <main_task+0x226>
			/* Instruction successfully sent to motor task */
			earlier_pos = current_pos;
   82654:	683a      	ldr	r2, [r7, #0]
   82656:	4b20      	ldr	r3, [pc, #128]	; (826d8 <main_task+0x29c>)
   82658:	601a      	str	r2, [r3, #0]
			mock_pos_index++;
   8265a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8265c:	3301      	adds	r3, #1
   8265e:	b2db      	uxtb	r3, r3
   82660:	930a      	str	r3, [sp, #40]	; 0x28
	xQueueSend(motor_task_instruction_handle, &inst, 10);
	earlier_pos = current_pos;
	
	printf("First run, angle: %d, d: %d", (int16_t)alpha, distance);

	while(distance > minimum_distance_to_object) {
   82662:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
   82666:	fa0f f38a 	sxth.w	r3, sl
   8266a:	429a      	cmp	r2, r3
   8266c:	f6ff af65 	blt.w	8253a <main_task+0xfe>
				if (moved_counter < max_moved_times) {
					rotate += rotation_deg;
					
					if (rotate > 360) {
						distance_to_move = step_forward;
						rotate = 0;
   82670:	2500      	movs	r5, #0
   82672:	2600      	movs	r6, #0
		return 0;
	}
	
	while (1)
	{
		if (hcsr04_sample_ready()) {
   82674:	4c26      	ldr	r4, [pc, #152]	; (82710 <main_task+0x2d4>)
			if (check_samples() != 0) {
   82676:	4f27      	ldr	r7, [pc, #156]	; (82714 <main_task+0x2d8>)
				distance_to_move = (check_samples() + distance_from_plattform) - minimum_distance_to_object; // Distance the robot has to move for picking up an object
				break;
			}
			else {
				if (moved_counter < max_moved_times) {
					rotate += rotation_deg;
   82678:	f8df 909c 	ldr.w	r9, [pc, #156]	; 82718 <main_task+0x2dc>
					
					if (rotate > 360) {
   8267c:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8271c <main_task+0x2e0>
						distance_to_move = step_forward;
						rotate = 0;
   82680:	46b2      	mov	sl, r6
		return 0;
	}
	
	while (1)
	{
		if (hcsr04_sample_ready()) {
   82682:	47a0      	blx	r4
   82684:	2800      	cmp	r0, #0
   82686:	d0fc      	beq.n	82682 <main_task+0x246>
			if (check_samples() != 0) {
   82688:	47b8      	blx	r7
   8268a:	2800      	cmp	r0, #0
   8268c:	d048      	beq.n	82720 <main_task+0x2e4>
				distance_to_move = (check_samples() + distance_from_plattform) - minimum_distance_to_object; // Distance the robot has to move for picking up an object
   8268e:	4b21      	ldr	r3, [pc, #132]	; (82714 <main_task+0x2d8>)
   82690:	4798      	blx	r3
   82692:	e054      	b.n	8273e <main_task+0x302>
   82694:	0008051d 	.word	0x0008051d
   82698:	000804f1 	.word	0x000804f1
   8269c:	2007abc4 	.word	0x2007abc4
   826a0:	000804f9 	.word	0x000804f9
   826a4:	2007abbc 	.word	0x2007abbc
   826a8:	0008274d 	.word	0x0008274d
   826ac:	00080511 	.word	0x00080511
   826b0:	2007abc0 	.word	0x2007abc0
   826b4:	000876c0 	.word	0x000876c0
   826b8:	000846e9 	.word	0x000846e9
   826bc:	00080505 	.word	0x00080505
   826c0:	000876c8 	.word	0x000876c8
   826c4:	00081fcd 	.word	0x00081fcd
   826c8:	00083cd5 	.word	0x00083cd5
   826cc:	00082049 	.word	0x00082049
   826d0:	00081fb1 	.word	0x00081fb1
   826d4:	2007ad68 	.word	0x2007ad68
   826d8:	2007abb8 	.word	0x2007abb8
   826dc:	000842f5 	.word	0x000842f5
   826e0:	000876d0 	.word	0x000876d0
   826e4:	00080e9d 	.word	0x00080e9d
   826e8:	2007015c 	.word	0x2007015c
   826ec:	000876ec 	.word	0x000876ec
   826f0:	00087704 	.word	0x00087704
   826f4:	00083a59 	.word	0x00083a59
   826f8:	0008771c 	.word	0x0008771c
   826fc:	00087734 	.word	0x00087734
   82700:	00083cf5 	.word	0x00083cf5
   82704:	3ff00000 	.word	0x3ff00000
   82708:	000842a5 	.word	0x000842a5
   8270c:	00080ced 	.word	0x00080ced
   82710:	000801f9 	.word	0x000801f9
   82714:	00082405 	.word	0x00082405
   82718:	41b66666 	.word	0x41b66666
   8271c:	43b40000 	.word	0x43b40000
				break;
			}
			else {
				if (moved_counter < max_moved_times) {
   82720:	2d04      	cmp	r5, #4
   82722:	dcae      	bgt.n	82682 <main_task+0x246>
					rotate += rotation_deg;
   82724:	4630      	mov	r0, r6
   82726:	4649      	mov	r1, r9
   82728:	4b06      	ldr	r3, [pc, #24]	; (82744 <main_task+0x308>)
   8272a:	4798      	blx	r3
   8272c:	4606      	mov	r6, r0
					
					if (rotate > 360) {
   8272e:	4641      	mov	r1, r8
   82730:	4b05      	ldr	r3, [pc, #20]	; (82748 <main_task+0x30c>)
   82732:	4798      	blx	r3
   82734:	2800      	cmp	r0, #0
   82736:	d0a4      	beq.n	82682 <main_task+0x246>
						distance_to_move = step_forward;
						rotate = 0;
						moved_counter++;
   82738:	3501      	adds	r5, #1
				if (moved_counter < max_moved_times) {
					rotate += rotation_deg;
					
					if (rotate > 360) {
						distance_to_move = step_forward;
						rotate = 0;
   8273a:	4656      	mov	r6, sl
   8273c:	e7a1      	b.n	82682 <main_task+0x246>
		// Find the object and pick it up
		if (hcsr04_sample_ready()){
			printf("Distance: %d\n", hcsr04_get_distance());
		}
	}*/
}
   8273e:	b011      	add	sp, #68	; 0x44
   82740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82744:	00084391 	.word	0x00084391
   82748:	00084679 	.word	0x00084679

0008274c <pin_mapper>:
					PIO_PA22_IDX,PIO_PA6_IDX,PIO_PA4_IDX,PIO_PA3_IDX,PIO_PA2_IDX,PIO_PB17_IDX,
					PIO_PB18_IDX,PIO_PB19_IDX,PIO_PB20_IDX};
					
uint8_t pin_mapper(uint8_t pin){
	return pin_table[pin];
}
   8274c:	4b01      	ldr	r3, [pc, #4]	; (82754 <pin_mapper+0x8>)
   8274e:	5c18      	ldrb	r0, [r3, r0]
   82750:	4770      	bx	lr
   82752:	bf00      	nop
   82754:	2007016c 	.word	0x2007016c

00082758 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   82758:	6943      	ldr	r3, [r0, #20]
   8275a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8275e:	bf1d      	ittte	ne
   82760:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   82764:	61c1      	strne	r1, [r0, #28]
	return 0;
   82766:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   82768:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8276a:	4770      	bx	lr

0008276c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8276c:	6943      	ldr	r3, [r0, #20]
   8276e:	f013 0f01 	tst.w	r3, #1
   82772:	d005      	beq.n	82780 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   82774:	6983      	ldr	r3, [r0, #24]
   82776:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8277a:	600b      	str	r3, [r1, #0]

	return 0;
   8277c:	2000      	movs	r0, #0
   8277e:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   82780:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   82782:	4770      	bx	lr

00082784 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   82784:	b500      	push	{lr}
   82786:	b083      	sub	sp, #12
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
   82788:	4811      	ldr	r0, [pc, #68]	; (827d0 <USART0_Handler+0x4c>)
   8278a:	f10d 0107 	add.w	r1, sp, #7
   8278e:	2201      	movs	r2, #1
   82790:	4b10      	ldr	r3, [pc, #64]	; (827d4 <USART0_Handler+0x50>)
   82792:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   82794:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   82796:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   8279a:	2200      	movs	r2, #0
   8279c:	4b0e      	ldr	r3, [pc, #56]	; (827d8 <USART0_Handler+0x54>)
   8279e:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   827a0:	4b0e      	ldr	r3, [pc, #56]	; (827dc <USART0_Handler+0x58>)
   827a2:	781b      	ldrb	r3, [r3, #0]
   827a4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   827a8:	4a0d      	ldr	r2, [pc, #52]	; (827e0 <USART0_Handler+0x5c>)
   827aa:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   827ac:	2b9b      	cmp	r3, #155	; 0x9b
   827ae:	d103      	bne.n	827b8 <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   827b0:	2200      	movs	r2, #0
   827b2:	4b0a      	ldr	r3, [pc, #40]	; (827dc <USART0_Handler+0x58>)
   827b4:	701a      	strb	r2, [r3, #0]
   827b6:	e002      	b.n	827be <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   827b8:	3301      	adds	r3, #1
   827ba:	4a08      	ldr	r2, [pc, #32]	; (827dc <USART0_Handler+0x58>)
   827bc:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   827be:	2201      	movs	r2, #1
   827c0:	4b05      	ldr	r3, [pc, #20]	; (827d8 <USART0_Handler+0x54>)
   827c2:	701a      	strb	r2, [r3, #0]
   827c4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   827c8:	b662      	cpsie	i
}
   827ca:	b003      	add	sp, #12
   827cc:	f85d fb04 	ldr.w	pc, [sp], #4
   827d0:	40098000 	.word	0x40098000
   827d4:	00082a0d 	.word	0x00082a0d
   827d8:	200701ae 	.word	0x200701ae
   827dc:	2007ac64 	.word	0x2007ac64
   827e0:	2007abc8 	.word	0x2007abc8

000827e4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   827e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   827e6:	b083      	sub	sp, #12
   827e8:	4604      	mov	r4, r0
   827ea:	460d      	mov	r5, r1
	uint32_t val = 0;
   827ec:	2300      	movs	r3, #0
   827ee:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   827f0:	4b1f      	ldr	r3, [pc, #124]	; (82870 <usart_serial_getchar+0x8c>)
   827f2:	4298      	cmp	r0, r3
   827f4:	d107      	bne.n	82806 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   827f6:	461f      	mov	r7, r3
   827f8:	4e1e      	ldr	r6, [pc, #120]	; (82874 <usart_serial_getchar+0x90>)
   827fa:	4638      	mov	r0, r7
   827fc:	4629      	mov	r1, r5
   827fe:	47b0      	blx	r6
   82800:	2800      	cmp	r0, #0
   82802:	d1fa      	bne.n	827fa <usart_serial_getchar+0x16>
   82804:	e019      	b.n	8283a <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   82806:	4b1c      	ldr	r3, [pc, #112]	; (82878 <usart_serial_getchar+0x94>)
   82808:	4298      	cmp	r0, r3
   8280a:	d109      	bne.n	82820 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   8280c:	461f      	mov	r7, r3
   8280e:	4e1b      	ldr	r6, [pc, #108]	; (8287c <usart_serial_getchar+0x98>)
   82810:	4638      	mov	r0, r7
   82812:	a901      	add	r1, sp, #4
   82814:	47b0      	blx	r6
   82816:	2800      	cmp	r0, #0
   82818:	d1fa      	bne.n	82810 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   8281a:	9b01      	ldr	r3, [sp, #4]
   8281c:	702b      	strb	r3, [r5, #0]
   8281e:	e019      	b.n	82854 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   82820:	4b17      	ldr	r3, [pc, #92]	; (82880 <usart_serial_getchar+0x9c>)
   82822:	4298      	cmp	r0, r3
   82824:	d109      	bne.n	8283a <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   82826:	461e      	mov	r6, r3
   82828:	4c14      	ldr	r4, [pc, #80]	; (8287c <usart_serial_getchar+0x98>)
   8282a:	4630      	mov	r0, r6
   8282c:	a901      	add	r1, sp, #4
   8282e:	47a0      	blx	r4
   82830:	2800      	cmp	r0, #0
   82832:	d1fa      	bne.n	8282a <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   82834:	9b01      	ldr	r3, [sp, #4]
   82836:	702b      	strb	r3, [r5, #0]
   82838:	e018      	b.n	8286c <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8283a:	4b12      	ldr	r3, [pc, #72]	; (82884 <usart_serial_getchar+0xa0>)
   8283c:	429c      	cmp	r4, r3
   8283e:	d109      	bne.n	82854 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   82840:	461e      	mov	r6, r3
   82842:	4c0e      	ldr	r4, [pc, #56]	; (8287c <usart_serial_getchar+0x98>)
   82844:	4630      	mov	r0, r6
   82846:	a901      	add	r1, sp, #4
   82848:	47a0      	blx	r4
   8284a:	2800      	cmp	r0, #0
   8284c:	d1fa      	bne.n	82844 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   8284e:	9b01      	ldr	r3, [sp, #4]
   82850:	702b      	strb	r3, [r5, #0]
   82852:	e00b      	b.n	8286c <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   82854:	4b0c      	ldr	r3, [pc, #48]	; (82888 <usart_serial_getchar+0xa4>)
   82856:	429c      	cmp	r4, r3
   82858:	d108      	bne.n	8286c <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   8285a:	461e      	mov	r6, r3
   8285c:	4c07      	ldr	r4, [pc, #28]	; (8287c <usart_serial_getchar+0x98>)
   8285e:	4630      	mov	r0, r6
   82860:	a901      	add	r1, sp, #4
   82862:	47a0      	blx	r4
   82864:	2800      	cmp	r0, #0
   82866:	d1fa      	bne.n	8285e <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   82868:	9b01      	ldr	r3, [sp, #4]
   8286a:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8286c:	b003      	add	sp, #12
   8286e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82870:	400e0800 	.word	0x400e0800
   82874:	00082b19 	.word	0x00082b19
   82878:	40098000 	.word	0x40098000
   8287c:	0008276d 	.word	0x0008276d
   82880:	4009c000 	.word	0x4009c000
   82884:	400a0000 	.word	0x400a0000
   82888:	400a4000 	.word	0x400a4000

0008288c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   8288c:	b570      	push	{r4, r5, r6, lr}
   8288e:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   82890:	4b1e      	ldr	r3, [pc, #120]	; (8290c <usart_serial_putchar+0x80>)
   82892:	4298      	cmp	r0, r3
   82894:	d108      	bne.n	828a8 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
   82896:	461e      	mov	r6, r3
   82898:	4d1d      	ldr	r5, [pc, #116]	; (82910 <usart_serial_putchar+0x84>)
   8289a:	4630      	mov	r0, r6
   8289c:	4621      	mov	r1, r4
   8289e:	47a8      	blx	r5
   828a0:	2800      	cmp	r0, #0
   828a2:	d1fa      	bne.n	8289a <usart_serial_putchar+0xe>
		return 1;
   828a4:	2001      	movs	r0, #1
   828a6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   828a8:	4b1a      	ldr	r3, [pc, #104]	; (82914 <usart_serial_putchar+0x88>)
   828aa:	4298      	cmp	r0, r3
   828ac:	d108      	bne.n	828c0 <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
   828ae:	461e      	mov	r6, r3
   828b0:	4d19      	ldr	r5, [pc, #100]	; (82918 <usart_serial_putchar+0x8c>)
   828b2:	4630      	mov	r0, r6
   828b4:	4621      	mov	r1, r4
   828b6:	47a8      	blx	r5
   828b8:	2800      	cmp	r0, #0
   828ba:	d1fa      	bne.n	828b2 <usart_serial_putchar+0x26>
		return 1;
   828bc:	2001      	movs	r0, #1
   828be:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   828c0:	4b16      	ldr	r3, [pc, #88]	; (8291c <usart_serial_putchar+0x90>)
   828c2:	4298      	cmp	r0, r3
   828c4:	d108      	bne.n	828d8 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
   828c6:	461e      	mov	r6, r3
   828c8:	4d13      	ldr	r5, [pc, #76]	; (82918 <usart_serial_putchar+0x8c>)
   828ca:	4630      	mov	r0, r6
   828cc:	4621      	mov	r1, r4
   828ce:	47a8      	blx	r5
   828d0:	2800      	cmp	r0, #0
   828d2:	d1fa      	bne.n	828ca <usart_serial_putchar+0x3e>
		return 1;
   828d4:	2001      	movs	r0, #1
   828d6:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   828d8:	4b11      	ldr	r3, [pc, #68]	; (82920 <usart_serial_putchar+0x94>)
   828da:	4298      	cmp	r0, r3
   828dc:	d108      	bne.n	828f0 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
   828de:	461e      	mov	r6, r3
   828e0:	4d0d      	ldr	r5, [pc, #52]	; (82918 <usart_serial_putchar+0x8c>)
   828e2:	4630      	mov	r0, r6
   828e4:	4621      	mov	r1, r4
   828e6:	47a8      	blx	r5
   828e8:	2800      	cmp	r0, #0
   828ea:	d1fa      	bne.n	828e2 <usart_serial_putchar+0x56>
		return 1;
   828ec:	2001      	movs	r0, #1
   828ee:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   828f0:	4b0c      	ldr	r3, [pc, #48]	; (82924 <usart_serial_putchar+0x98>)
   828f2:	4298      	cmp	r0, r3
   828f4:	d108      	bne.n	82908 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
   828f6:	461e      	mov	r6, r3
   828f8:	4d07      	ldr	r5, [pc, #28]	; (82918 <usart_serial_putchar+0x8c>)
   828fa:	4630      	mov	r0, r6
   828fc:	4621      	mov	r1, r4
   828fe:	47a8      	blx	r5
   82900:	2800      	cmp	r0, #0
   82902:	d1fa      	bne.n	828fa <usart_serial_putchar+0x6e>
		return 1;
   82904:	2001      	movs	r0, #1
   82906:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   82908:	2000      	movs	r0, #0
}
   8290a:	bd70      	pop	{r4, r5, r6, pc}
   8290c:	400e0800 	.word	0x400e0800
   82910:	00082b09 	.word	0x00082b09
   82914:	40098000 	.word	0x40098000
   82918:	00082759 	.word	0x00082759
   8291c:	4009c000 	.word	0x4009c000
   82920:	400a0000 	.word	0x400a0000
   82924:	400a4000 	.word	0x400a4000

00082928 <console_init>:
#include "console_driver.h"

void console_init(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
/* Note that  the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h */
{
   82928:	b530      	push	{r4, r5, lr}
   8292a:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8292c:	2008      	movs	r0, #8
   8292e:	4d15      	ldr	r5, [pc, #84]	; (82984 <console_init+0x5c>)
   82930:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   82932:	4c15      	ldr	r4, [pc, #84]	; (82988 <console_init+0x60>)
   82934:	4b15      	ldr	r3, [pc, #84]	; (8298c <console_init+0x64>)
   82936:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   82938:	4a15      	ldr	r2, [pc, #84]	; (82990 <console_init+0x68>)
   8293a:	4b16      	ldr	r3, [pc, #88]	; (82994 <console_init+0x6c>)
   8293c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8293e:	4a16      	ldr	r2, [pc, #88]	; (82998 <console_init+0x70>)
   82940:	4b16      	ldr	r3, [pc, #88]	; (8299c <console_init+0x74>)
   82942:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   82944:	4b16      	ldr	r3, [pc, #88]	; (829a0 <console_init+0x78>)
   82946:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   82948:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   8294c:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   8294e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82952:	9303      	str	r3, [sp, #12]
   82954:	2008      	movs	r0, #8
   82956:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   82958:	4620      	mov	r0, r4
   8295a:	a901      	add	r1, sp, #4
   8295c:	4b11      	ldr	r3, [pc, #68]	; (829a4 <console_init+0x7c>)
   8295e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   82960:	4d11      	ldr	r5, [pc, #68]	; (829a8 <console_init+0x80>)
   82962:	682b      	ldr	r3, [r5, #0]
   82964:	6898      	ldr	r0, [r3, #8]
   82966:	2100      	movs	r1, #0
   82968:	4c10      	ldr	r4, [pc, #64]	; (829ac <console_init+0x84>)
   8296a:	47a0      	blx	r4
	setbuf(stdin, NULL);
   8296c:	682b      	ldr	r3, [r5, #0]
   8296e:	6858      	ldr	r0, [r3, #4]
   82970:	2100      	movs	r1, #0
   82972:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   82974:	480e      	ldr	r0, [pc, #56]	; (829b0 <console_init+0x88>)
   82976:	4c0f      	ldr	r4, [pc, #60]	; (829b4 <console_init+0x8c>)
   82978:	47a0      	blx	r4
	printf("=============\n");
   8297a:	480f      	ldr	r0, [pc, #60]	; (829b8 <console_init+0x90>)
   8297c:	47a0      	blx	r4
   8297e:	b005      	add	sp, #20
   82980:	bd30      	pop	{r4, r5, pc}
   82982:	bf00      	nop
   82984:	0008306d 	.word	0x0008306d
   82988:	400e0800 	.word	0x400e0800
   8298c:	2007ad70 	.word	0x2007ad70
   82990:	0008288d 	.word	0x0008288d
   82994:	2007ad6c 	.word	0x2007ad6c
   82998:	000827e5 	.word	0x000827e5
   8299c:	2007ad14 	.word	0x2007ad14
   829a0:	0501bd00 	.word	0x0501bd00
   829a4:	00082ad1 	.word	0x00082ad1
   829a8:	200705e0 	.word	0x200705e0
   829ac:	00084899 	.word	0x00084899
   829b0:	00087748 	.word	0x00087748
   829b4:	000846e9 	.word	0x000846e9
   829b8:	00087758 	.word	0x00087758

000829bc <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   829bc:	3801      	subs	r0, #1
   829be:	2802      	cmp	r0, #2
   829c0:	d818      	bhi.n	829f4 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   829c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   829c6:	460e      	mov	r6, r1
   829c8:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   829ca:	b182      	cbz	r2, 829ee <_write+0x32>
   829cc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   829ce:	f8df 8038 	ldr.w	r8, [pc, #56]	; 82a08 <_write+0x4c>
   829d2:	4f0c      	ldr	r7, [pc, #48]	; (82a04 <_write+0x48>)
   829d4:	f8d8 0000 	ldr.w	r0, [r8]
   829d8:	f815 1b01 	ldrb.w	r1, [r5], #1
   829dc:	683b      	ldr	r3, [r7, #0]
   829de:	4798      	blx	r3
   829e0:	2800      	cmp	r0, #0
   829e2:	db0a      	blt.n	829fa <_write+0x3e>
   829e4:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   829e6:	3c01      	subs	r4, #1
   829e8:	d1f4      	bne.n	829d4 <_write+0x18>
   829ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   829ee:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   829f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   829f4:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   829f8:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   829fa:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   829fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82a02:	bf00      	nop
   82a04:	2007ad6c 	.word	0x2007ad6c
   82a08:	2007ad70 	.word	0x2007ad70

00082a0c <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   82a0c:	2a00      	cmp	r2, #0
   82a0e:	d04e      	beq.n	82aae <usart_serial_read_packet+0xa2>
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   82a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82a14:	b085      	sub	sp, #20
   82a16:	4606      	mov	r6, r0
   82a18:	460d      	mov	r5, r1
   82a1a:	4617      	mov	r7, r2

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   82a1c:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 82ac4 <usart_serial_read_packet+0xb8>
		while (uart_read((Uart*)p_usart, data));
   82a20:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 82ac8 <usart_serial_read_packet+0xbc>
   82a24:	f8cd a000 	str.w	sl, [sp]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   82a28:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 82acc <usart_serial_read_packet+0xc0>
		while (usart_read(p_usart, &val));
   82a2c:	4c21      	ldr	r4, [pc, #132]	; (82ab4 <usart_serial_read_packet+0xa8>)
   82a2e:	f8cd b004 	str.w	fp, [sp, #4]
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   82a32:	2300      	movs	r3, #0
   82a34:	9303      	str	r3, [sp, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   82a36:	4556      	cmp	r6, sl
   82a38:	d105      	bne.n	82a46 <usart_serial_read_packet+0x3a>
		while (uart_read((Uart*)p_usart, data));
   82a3a:	9800      	ldr	r0, [sp, #0]
   82a3c:	4629      	mov	r1, r5
   82a3e:	47c8      	blx	r9
   82a40:	2800      	cmp	r0, #0
   82a42:	d1fa      	bne.n	82a3a <usart_serial_read_packet+0x2e>
   82a44:	e015      	b.n	82a72 <usart_serial_read_packet+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   82a46:	455e      	cmp	r6, fp
   82a48:	d107      	bne.n	82a5a <usart_serial_read_packet+0x4e>
		while (usart_read(p_usart, &val));
   82a4a:	9801      	ldr	r0, [sp, #4]
   82a4c:	a903      	add	r1, sp, #12
   82a4e:	47a0      	blx	r4
   82a50:	2800      	cmp	r0, #0
   82a52:	d1fa      	bne.n	82a4a <usart_serial_read_packet+0x3e>
		*data = (uint8_t)(val & 0xFF);
   82a54:	9b03      	ldr	r3, [sp, #12]
   82a56:	702b      	strb	r3, [r5, #0]
   82a58:	e017      	b.n	82a8a <usart_serial_read_packet+0x7e>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   82a5a:	4b17      	ldr	r3, [pc, #92]	; (82ab8 <usart_serial_read_packet+0xac>)
   82a5c:	429e      	cmp	r6, r3
   82a5e:	d108      	bne.n	82a72 <usart_serial_read_packet+0x66>
		while (usart_read(p_usart, &val));
   82a60:	4698      	mov	r8, r3
   82a62:	4640      	mov	r0, r8
   82a64:	a903      	add	r1, sp, #12
   82a66:	47a0      	blx	r4
   82a68:	2800      	cmp	r0, #0
   82a6a:	d1fa      	bne.n	82a62 <usart_serial_read_packet+0x56>
		*data = (uint8_t)(val & 0xFF);
   82a6c:	9b03      	ldr	r3, [sp, #12]
   82a6e:	702b      	strb	r3, [r5, #0]
   82a70:	e016      	b.n	82aa0 <usart_serial_read_packet+0x94>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   82a72:	4b12      	ldr	r3, [pc, #72]	; (82abc <usart_serial_read_packet+0xb0>)
   82a74:	429e      	cmp	r6, r3
   82a76:	d108      	bne.n	82a8a <usart_serial_read_packet+0x7e>
		while (usart_read(p_usart, &val));
   82a78:	4698      	mov	r8, r3
   82a7a:	4640      	mov	r0, r8
   82a7c:	a903      	add	r1, sp, #12
   82a7e:	47a0      	blx	r4
   82a80:	2800      	cmp	r0, #0
   82a82:	d1fa      	bne.n	82a7a <usart_serial_read_packet+0x6e>
		*data = (uint8_t)(val & 0xFF);
   82a84:	9b03      	ldr	r3, [sp, #12]
   82a86:	702b      	strb	r3, [r5, #0]
   82a88:	e00a      	b.n	82aa0 <usart_serial_read_packet+0x94>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   82a8a:	4b0d      	ldr	r3, [pc, #52]	; (82ac0 <usart_serial_read_packet+0xb4>)
   82a8c:	429e      	cmp	r6, r3
   82a8e:	d107      	bne.n	82aa0 <usart_serial_read_packet+0x94>
		while (usart_read(p_usart, &val));
   82a90:	4698      	mov	r8, r3
   82a92:	4640      	mov	r0, r8
   82a94:	a903      	add	r1, sp, #12
   82a96:	47a0      	blx	r4
   82a98:	2800      	cmp	r0, #0
   82a9a:	d1fa      	bne.n	82a92 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   82a9c:	9b03      	ldr	r3, [sp, #12]
   82a9e:	702b      	strb	r3, [r5, #0]
	while (len) {
		usart_serial_getchar(usart, data);
		len--;
		data++;
   82aa0:	3501      	adds	r5, #1
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   82aa2:	3f01      	subs	r7, #1
   82aa4:	d1c5      	bne.n	82a32 <usart_serial_read_packet+0x26>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   82aa6:	2000      	movs	r0, #0
   82aa8:	b005      	add	sp, #20
   82aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82aae:	2000      	movs	r0, #0
   82ab0:	4770      	bx	lr
   82ab2:	bf00      	nop
   82ab4:	0008276d 	.word	0x0008276d
   82ab8:	4009c000 	.word	0x4009c000
   82abc:	400a0000 	.word	0x400a0000
   82ac0:	400a4000 	.word	0x400a4000
   82ac4:	400e0800 	.word	0x400e0800
   82ac8:	00082b19 	.word	0x00082b19
   82acc:	40098000 	.word	0x40098000

00082ad0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   82ad0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   82ad2:	23ac      	movs	r3, #172	; 0xac
   82ad4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   82ad6:	680b      	ldr	r3, [r1, #0]
   82ad8:	684a      	ldr	r2, [r1, #4]
   82ada:	fbb3 f3f2 	udiv	r3, r3, r2
   82ade:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   82ae0:	1e5c      	subs	r4, r3, #1
   82ae2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   82ae6:	4294      	cmp	r4, r2
   82ae8:	d80a      	bhi.n	82b00 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   82aea:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   82aec:	688b      	ldr	r3, [r1, #8]
   82aee:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   82af0:	f240 2302 	movw	r3, #514	; 0x202
   82af4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   82af8:	2350      	movs	r3, #80	; 0x50
   82afa:	6003      	str	r3, [r0, #0]

	return 0;
   82afc:	2000      	movs	r0, #0
   82afe:	e000      	b.n	82b02 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   82b00:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   82b02:	f85d 4b04 	ldr.w	r4, [sp], #4
   82b06:	4770      	bx	lr

00082b08 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   82b08:	6943      	ldr	r3, [r0, #20]
   82b0a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   82b0e:	bf1a      	itte	ne
   82b10:	61c1      	strne	r1, [r0, #28]
	return 0;
   82b12:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   82b14:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   82b16:	4770      	bx	lr

00082b18 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   82b18:	6943      	ldr	r3, [r0, #20]
   82b1a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   82b1e:	bf1d      	ittte	ne
   82b20:	6983      	ldrne	r3, [r0, #24]
   82b22:	700b      	strbne	r3, [r1, #0]
	return 0;
   82b24:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   82b26:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   82b28:	4770      	bx	lr
   82b2a:	bf00      	nop

00082b2c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82b2c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   82b2e:	480e      	ldr	r0, [pc, #56]	; (82b68 <sysclk_init+0x3c>)
   82b30:	4b0e      	ldr	r3, [pc, #56]	; (82b6c <sysclk_init+0x40>)
   82b32:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82b34:	2000      	movs	r0, #0
   82b36:	213e      	movs	r1, #62	; 0x3e
   82b38:	4b0d      	ldr	r3, [pc, #52]	; (82b70 <sysclk_init+0x44>)
   82b3a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   82b3c:	4c0d      	ldr	r4, [pc, #52]	; (82b74 <sysclk_init+0x48>)
   82b3e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   82b40:	2800      	cmp	r0, #0
   82b42:	d0fc      	beq.n	82b3e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   82b44:	4b0c      	ldr	r3, [pc, #48]	; (82b78 <sysclk_init+0x4c>)
   82b46:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82b48:	4a0c      	ldr	r2, [pc, #48]	; (82b7c <sysclk_init+0x50>)
   82b4a:	4b0d      	ldr	r3, [pc, #52]	; (82b80 <sysclk_init+0x54>)
   82b4c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   82b4e:	4c0d      	ldr	r4, [pc, #52]	; (82b84 <sysclk_init+0x58>)
   82b50:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82b52:	2800      	cmp	r0, #0
   82b54:	d0fc      	beq.n	82b50 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82b56:	2010      	movs	r0, #16
   82b58:	4b0b      	ldr	r3, [pc, #44]	; (82b88 <sysclk_init+0x5c>)
   82b5a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82b5c:	4b0b      	ldr	r3, [pc, #44]	; (82b8c <sysclk_init+0x60>)
   82b5e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82b60:	4801      	ldr	r0, [pc, #4]	; (82b68 <sysclk_init+0x3c>)
   82b62:	4b02      	ldr	r3, [pc, #8]	; (82b6c <sysclk_init+0x40>)
   82b64:	4798      	blx	r3
   82b66:	bd10      	pop	{r4, pc}
   82b68:	0501bd00 	.word	0x0501bd00
   82b6c:	200700b1 	.word	0x200700b1
   82b70:	00082fe9 	.word	0x00082fe9
   82b74:	0008303d 	.word	0x0008303d
   82b78:	0008304d 	.word	0x0008304d
   82b7c:	200d3f01 	.word	0x200d3f01
   82b80:	400e0600 	.word	0x400e0600
   82b84:	0008305d 	.word	0x0008305d
   82b88:	00082f81 	.word	0x00082f81
   82b8c:	00083175 	.word	0x00083175

00082b90 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   82b90:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   82b92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82b96:	4b16      	ldr	r3, [pc, #88]	; (82bf0 <board_init+0x60>)
   82b98:	605a      	str	r2, [r3, #4]
   82b9a:	200b      	movs	r0, #11
   82b9c:	4c15      	ldr	r4, [pc, #84]	; (82bf4 <board_init+0x64>)
   82b9e:	47a0      	blx	r4
   82ba0:	200c      	movs	r0, #12
   82ba2:	47a0      	blx	r4
   82ba4:	200d      	movs	r0, #13
   82ba6:	47a0      	blx	r4
   82ba8:	200e      	movs	r0, #14
   82baa:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   82bac:	203b      	movs	r0, #59	; 0x3b
   82bae:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82bb2:	4c11      	ldr	r4, [pc, #68]	; (82bf8 <board_init+0x68>)
   82bb4:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   82bb6:	2055      	movs	r0, #85	; 0x55
   82bb8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82bbc:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   82bbe:	2056      	movs	r0, #86	; 0x56
   82bc0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82bc4:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   82bc6:	2068      	movs	r0, #104	; 0x68
   82bc8:	490c      	ldr	r1, [pc, #48]	; (82bfc <board_init+0x6c>)
   82bca:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82bcc:	205c      	movs	r0, #92	; 0x5c
   82bce:	490c      	ldr	r1, [pc, #48]	; (82c00 <board_init+0x70>)
   82bd0:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   82bd2:	480c      	ldr	r0, [pc, #48]	; (82c04 <board_init+0x74>)
   82bd4:	f44f 7140 	mov.w	r1, #768	; 0x300
   82bd8:	4a0b      	ldr	r2, [pc, #44]	; (82c08 <board_init+0x78>)
   82bda:	4b0c      	ldr	r3, [pc, #48]	; (82c0c <board_init+0x7c>)
   82bdc:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   82bde:	202b      	movs	r0, #43	; 0x2b
   82be0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82be4:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   82be6:	202a      	movs	r0, #42	; 0x2a
   82be8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82bec:	47a0      	blx	r4
   82bee:	bd10      	pop	{r4, pc}
   82bf0:	400e1a50 	.word	0x400e1a50
   82bf4:	0008306d 	.word	0x0008306d
   82bf8:	00082d01 	.word	0x00082d01
   82bfc:	28000079 	.word	0x28000079
   82c00:	28000001 	.word	0x28000001
   82c04:	400e0e00 	.word	0x400e0e00
   82c08:	08000001 	.word	0x08000001
   82c0c:	00082dd5 	.word	0x00082dd5

00082c10 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   82c10:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   82c14:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   82c18:	bf0c      	ite	eq
   82c1a:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   82c1c:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   82c1e:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   82c20:	bf14      	ite	ne
   82c22:	2001      	movne	r0, #1
   82c24:	2000      	moveq	r0, #0
   82c26:	4770      	bx	lr

00082c28 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82c28:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82c2a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   82c2e:	d016      	beq.n	82c5e <pio_set_peripheral+0x36>
   82c30:	d804      	bhi.n	82c3c <pio_set_peripheral+0x14>
   82c32:	b1c1      	cbz	r1, 82c66 <pio_set_peripheral+0x3e>
   82c34:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   82c38:	d00a      	beq.n	82c50 <pio_set_peripheral+0x28>
   82c3a:	e013      	b.n	82c64 <pio_set_peripheral+0x3c>
   82c3c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   82c40:	d011      	beq.n	82c66 <pio_set_peripheral+0x3e>
   82c42:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   82c46:	d00e      	beq.n	82c66 <pio_set_peripheral+0x3e>
   82c48:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   82c4c:	d10a      	bne.n	82c64 <pio_set_peripheral+0x3c>
   82c4e:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82c50:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82c52:	6f01      	ldr	r1, [r0, #112]	; 0x70
   82c54:	400b      	ands	r3, r1
   82c56:	ea23 0302 	bic.w	r3, r3, r2
   82c5a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   82c5c:	e002      	b.n	82c64 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   82c5e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82c60:	4313      	orrs	r3, r2
   82c62:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82c64:	6042      	str	r2, [r0, #4]
   82c66:	4770      	bx	lr

00082c68 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82c68:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82c6a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   82c6e:	bf14      	ite	ne
   82c70:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82c72:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82c74:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   82c78:	bf14      	ite	ne
   82c7a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   82c7c:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   82c7e:	f012 0f02 	tst.w	r2, #2
   82c82:	d002      	beq.n	82c8a <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   82c84:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   82c88:	e004      	b.n	82c94 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   82c8a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   82c8e:	bf18      	it	ne
   82c90:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82c94:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   82c96:	6001      	str	r1, [r0, #0]
   82c98:	4770      	bx	lr
   82c9a:	bf00      	nop

00082c9c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   82c9c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82c9e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82ca0:	9c01      	ldr	r4, [sp, #4]
   82ca2:	b10c      	cbz	r4, 82ca8 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   82ca4:	6641      	str	r1, [r0, #100]	; 0x64
   82ca6:	e000      	b.n	82caa <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82ca8:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   82caa:	b10b      	cbz	r3, 82cb0 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   82cac:	6501      	str	r1, [r0, #80]	; 0x50
   82cae:	e000      	b.n	82cb2 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82cb0:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   82cb2:	b10a      	cbz	r2, 82cb8 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   82cb4:	6301      	str	r1, [r0, #48]	; 0x30
   82cb6:	e000      	b.n	82cba <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   82cb8:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   82cba:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   82cbc:	6001      	str	r1, [r0, #0]
}
   82cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
   82cc2:	4770      	bx	lr

00082cc4 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   82cc4:	f012 0f10 	tst.w	r2, #16
   82cc8:	d010      	beq.n	82cec <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   82cca:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   82cce:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   82cd2:	bf14      	ite	ne
   82cd4:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   82cd8:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   82cdc:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   82ce0:	bf14      	ite	ne
   82ce2:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   82ce6:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   82cea:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   82cec:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   82cf0:	4770      	bx	lr
   82cf2:	bf00      	nop

00082cf4 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
   82cf4:	6401      	str	r1, [r0, #64]	; 0x40
   82cf6:	4770      	bx	lr

00082cf8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   82cf8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   82cfa:	4770      	bx	lr

00082cfc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   82cfc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   82cfe:	4770      	bx	lr

00082d00 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82d00:	b570      	push	{r4, r5, r6, lr}
   82d02:	b082      	sub	sp, #8
   82d04:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82d06:	0943      	lsrs	r3, r0, #5
   82d08:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82d0c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82d10:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82d12:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   82d16:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82d1a:	d030      	beq.n	82d7e <pio_configure_pin+0x7e>
   82d1c:	d806      	bhi.n	82d2c <pio_configure_pin+0x2c>
   82d1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82d22:	d00a      	beq.n	82d3a <pio_configure_pin+0x3a>
   82d24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82d28:	d018      	beq.n	82d5c <pio_configure_pin+0x5c>
   82d2a:	e049      	b.n	82dc0 <pio_configure_pin+0xc0>
   82d2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82d30:	d030      	beq.n	82d94 <pio_configure_pin+0x94>
   82d32:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82d36:	d02d      	beq.n	82d94 <pio_configure_pin+0x94>
   82d38:	e042      	b.n	82dc0 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82d3a:	f000 001f 	and.w	r0, r0, #31
   82d3e:	2601      	movs	r6, #1
   82d40:	4086      	lsls	r6, r0
   82d42:	4620      	mov	r0, r4
   82d44:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82d48:	4632      	mov	r2, r6
   82d4a:	4b1f      	ldr	r3, [pc, #124]	; (82dc8 <pio_configure_pin+0xc8>)
   82d4c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82d4e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82d52:	bf14      	ite	ne
   82d54:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82d56:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82d58:	2001      	movs	r0, #1
   82d5a:	e032      	b.n	82dc2 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82d5c:	f000 001f 	and.w	r0, r0, #31
   82d60:	2601      	movs	r6, #1
   82d62:	4086      	lsls	r6, r0
   82d64:	4620      	mov	r0, r4
   82d66:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82d6a:	4632      	mov	r2, r6
   82d6c:	4b16      	ldr	r3, [pc, #88]	; (82dc8 <pio_configure_pin+0xc8>)
   82d6e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82d70:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82d74:	bf14      	ite	ne
   82d76:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82d78:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82d7a:	2001      	movs	r0, #1
   82d7c:	e021      	b.n	82dc2 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82d7e:	f000 031f 	and.w	r3, r0, #31
   82d82:	2601      	movs	r6, #1
   82d84:	4620      	mov	r0, r4
   82d86:	fa06 f103 	lsl.w	r1, r6, r3
   82d8a:	462a      	mov	r2, r5
   82d8c:	4b0f      	ldr	r3, [pc, #60]	; (82dcc <pio_configure_pin+0xcc>)
   82d8e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   82d90:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   82d92:	e016      	b.n	82dc2 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82d94:	f000 031f 	and.w	r3, r0, #31
   82d98:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82d9a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82d9e:	ea05 0106 	and.w	r1, r5, r6
   82da2:	9100      	str	r1, [sp, #0]
   82da4:	4620      	mov	r0, r4
   82da6:	fa06 f103 	lsl.w	r1, r6, r3
   82daa:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82dae:	bf14      	ite	ne
   82db0:	2200      	movne	r2, #0
   82db2:	2201      	moveq	r2, #1
   82db4:	f3c5 0380 	ubfx	r3, r5, #2, #1
   82db8:	4c05      	ldr	r4, [pc, #20]	; (82dd0 <pio_configure_pin+0xd0>)
   82dba:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   82dbc:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82dbe:	e000      	b.n	82dc2 <pio_configure_pin+0xc2>

	default:
		return 0;
   82dc0:	2000      	movs	r0, #0
	}

	return 1;
}
   82dc2:	b002      	add	sp, #8
   82dc4:	bd70      	pop	{r4, r5, r6, pc}
   82dc6:	bf00      	nop
   82dc8:	00082c29 	.word	0x00082c29
   82dcc:	00082c69 	.word	0x00082c69
   82dd0:	00082c9d 	.word	0x00082c9d

00082dd4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82dd4:	b570      	push	{r4, r5, r6, lr}
   82dd6:	b082      	sub	sp, #8
   82dd8:	4606      	mov	r6, r0
   82dda:	460d      	mov	r5, r1
   82ddc:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82dde:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   82de2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82de6:	d026      	beq.n	82e36 <pio_configure_pin_group+0x62>
   82de8:	d806      	bhi.n	82df8 <pio_configure_pin_group+0x24>
   82dea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82dee:	d00a      	beq.n	82e06 <pio_configure_pin_group+0x32>
   82df0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82df4:	d013      	beq.n	82e1e <pio_configure_pin_group+0x4a>
   82df6:	e034      	b.n	82e62 <pio_configure_pin_group+0x8e>
   82df8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82dfc:	d01f      	beq.n	82e3e <pio_configure_pin_group+0x6a>
   82dfe:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82e02:	d01c      	beq.n	82e3e <pio_configure_pin_group+0x6a>
   82e04:	e02d      	b.n	82e62 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82e06:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82e0a:	462a      	mov	r2, r5
   82e0c:	4b16      	ldr	r3, [pc, #88]	; (82e68 <pio_configure_pin_group+0x94>)
   82e0e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82e10:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   82e14:	bf14      	ite	ne
   82e16:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82e18:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82e1a:	2001      	movs	r0, #1
   82e1c:	e022      	b.n	82e64 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82e1e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82e22:	462a      	mov	r2, r5
   82e24:	4b10      	ldr	r3, [pc, #64]	; (82e68 <pio_configure_pin_group+0x94>)
   82e26:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82e28:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   82e2c:	bf14      	ite	ne
   82e2e:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82e30:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82e32:	2001      	movs	r0, #1
   82e34:	e016      	b.n	82e64 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82e36:	4b0d      	ldr	r3, [pc, #52]	; (82e6c <pio_configure_pin_group+0x98>)
   82e38:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   82e3a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   82e3c:	e012      	b.n	82e64 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82e3e:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82e42:	f004 0301 	and.w	r3, r4, #1
   82e46:	9300      	str	r3, [sp, #0]
   82e48:	4630      	mov	r0, r6
   82e4a:	4629      	mov	r1, r5
   82e4c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82e50:	bf14      	ite	ne
   82e52:	2200      	movne	r2, #0
   82e54:	2201      	moveq	r2, #1
   82e56:	f3c4 0380 	ubfx	r3, r4, #2, #1
   82e5a:	4c05      	ldr	r4, [pc, #20]	; (82e70 <pio_configure_pin_group+0x9c>)
   82e5c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   82e5e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82e60:	e000      	b.n	82e64 <pio_configure_pin_group+0x90>

	default:
		return 0;
   82e62:	2000      	movs	r0, #0
	}

	return 1;
}
   82e64:	b002      	add	sp, #8
   82e66:	bd70      	pop	{r4, r5, r6, pc}
   82e68:	00082c29 	.word	0x00082c29
   82e6c:	00082c69 	.word	0x00082c69
   82e70:	00082c9d 	.word	0x00082c9d

00082e74 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82e78:	4604      	mov	r4, r0
   82e7a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82e7c:	4b0e      	ldr	r3, [pc, #56]	; (82eb8 <pio_handler_process+0x44>)
   82e7e:	4798      	blx	r3
   82e80:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   82e82:	4620      	mov	r0, r4
   82e84:	4b0d      	ldr	r3, [pc, #52]	; (82ebc <pio_handler_process+0x48>)
   82e86:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   82e88:	4005      	ands	r5, r0
   82e8a:	d013      	beq.n	82eb4 <pio_handler_process+0x40>
   82e8c:	4c0c      	ldr	r4, [pc, #48]	; (82ec0 <pio_handler_process+0x4c>)
   82e8e:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82e92:	6823      	ldr	r3, [r4, #0]
   82e94:	4543      	cmp	r3, r8
   82e96:	d108      	bne.n	82eaa <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82e98:	6861      	ldr	r1, [r4, #4]
   82e9a:	4229      	tst	r1, r5
   82e9c:	d005      	beq.n	82eaa <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82e9e:	68e3      	ldr	r3, [r4, #12]
   82ea0:	4640      	mov	r0, r8
   82ea2:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82ea4:	6863      	ldr	r3, [r4, #4]
   82ea6:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82eaa:	42b4      	cmp	r4, r6
   82eac:	d002      	beq.n	82eb4 <pio_handler_process+0x40>
   82eae:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   82eb0:	2d00      	cmp	r5, #0
   82eb2:	d1ee      	bne.n	82e92 <pio_handler_process+0x1e>
   82eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82eb8:	00082cf9 	.word	0x00082cf9
   82ebc:	00082cfd 	.word	0x00082cfd
   82ec0:	2007ac6c 	.word	0x2007ac6c

00082ec4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   82ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   82ec6:	4c17      	ldr	r4, [pc, #92]	; (82f24 <pio_handler_set+0x60>)
   82ec8:	6827      	ldr	r7, [r4, #0]
   82eca:	2f06      	cmp	r7, #6
   82ecc:	d827      	bhi.n	82f1e <pio_handler_set+0x5a>
   82ece:	f04f 0c00 	mov.w	ip, #0
   82ed2:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
   82ed4:	4e14      	ldr	r6, [pc, #80]	; (82f28 <pio_handler_set+0x64>)
   82ed6:	0125      	lsls	r5, r4, #4
   82ed8:	eb06 0e05 	add.w	lr, r6, r5
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   82edc:	5975      	ldr	r5, [r6, r5]
   82ede:	428d      	cmp	r5, r1
   82ee0:	d104      	bne.n	82eec <pio_handler_set+0x28>
   82ee2:	eb06 1504 	add.w	r5, r6, r4, lsl #4
   82ee6:	686d      	ldr	r5, [r5, #4]
   82ee8:	4295      	cmp	r5, r2
   82eea:	d004      	beq.n	82ef6 <pio_handler_set+0x32>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   82eec:	3401      	adds	r4, #1
   82eee:	b2e4      	uxtb	r4, r4
   82ef0:	46a4      	mov	ip, r4
   82ef2:	42a7      	cmp	r7, r4
   82ef4:	d2ef      	bcs.n	82ed6 <pio_handler_set+0x12>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   82ef6:	f8ce 1000 	str.w	r1, [lr]
	pSource->mask = ul_mask;
   82efa:	f8ce 2004 	str.w	r2, [lr, #4]
	pSource->attr = ul_attr;
   82efe:	f8ce 3008 	str.w	r3, [lr, #8]
	pSource->handler = p_handler;
   82f02:	9906      	ldr	r1, [sp, #24]
   82f04:	f8ce 100c 	str.w	r1, [lr, #12]
	if (i == gs_ul_nb_sources + 1) {
   82f08:	3701      	adds	r7, #1
   82f0a:	4567      	cmp	r7, ip
		gs_ul_nb_sources++;
   82f0c:	bf04      	itt	eq
   82f0e:	4905      	ldreq	r1, [pc, #20]	; (82f24 <pio_handler_set+0x60>)
   82f10:	600f      	streq	r7, [r1, #0]
   82f12:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   82f14:	461a      	mov	r2, r3
   82f16:	4b05      	ldr	r3, [pc, #20]	; (82f2c <pio_handler_set+0x68>)
   82f18:	4798      	blx	r3

	return 0;
   82f1a:	2000      	movs	r0, #0
   82f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   82f1e:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   82f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82f22:	bf00      	nop
   82f24:	2007ac68 	.word	0x2007ac68
   82f28:	2007ac6c 	.word	0x2007ac6c
   82f2c:	00082cc5 	.word	0x00082cc5

00082f30 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82f30:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   82f32:	4802      	ldr	r0, [pc, #8]	; (82f3c <PIOA_Handler+0xc>)
   82f34:	210b      	movs	r1, #11
   82f36:	4b02      	ldr	r3, [pc, #8]	; (82f40 <PIOA_Handler+0x10>)
   82f38:	4798      	blx	r3
   82f3a:	bd08      	pop	{r3, pc}
   82f3c:	400e0e00 	.word	0x400e0e00
   82f40:	00082e75 	.word	0x00082e75

00082f44 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82f44:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   82f46:	4802      	ldr	r0, [pc, #8]	; (82f50 <PIOB_Handler+0xc>)
   82f48:	210c      	movs	r1, #12
   82f4a:	4b02      	ldr	r3, [pc, #8]	; (82f54 <PIOB_Handler+0x10>)
   82f4c:	4798      	blx	r3
   82f4e:	bd08      	pop	{r3, pc}
   82f50:	400e1000 	.word	0x400e1000
   82f54:	00082e75 	.word	0x00082e75

00082f58 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82f58:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   82f5a:	4802      	ldr	r0, [pc, #8]	; (82f64 <PIOC_Handler+0xc>)
   82f5c:	210d      	movs	r1, #13
   82f5e:	4b02      	ldr	r3, [pc, #8]	; (82f68 <PIOC_Handler+0x10>)
   82f60:	4798      	blx	r3
   82f62:	bd08      	pop	{r3, pc}
   82f64:	400e1200 	.word	0x400e1200
   82f68:	00082e75 	.word	0x00082e75

00082f6c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82f6c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   82f6e:	4802      	ldr	r0, [pc, #8]	; (82f78 <PIOD_Handler+0xc>)
   82f70:	210e      	movs	r1, #14
   82f72:	4b02      	ldr	r3, [pc, #8]	; (82f7c <PIOD_Handler+0x10>)
   82f74:	4798      	blx	r3
   82f76:	bd08      	pop	{r3, pc}
   82f78:	400e1400 	.word	0x400e1400
   82f7c:	00082e75 	.word	0x00082e75

00082f80 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82f80:	4a18      	ldr	r2, [pc, #96]	; (82fe4 <pmc_switch_mck_to_pllack+0x64>)
   82f82:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82f88:	4318      	orrs	r0, r3
   82f8a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82f8c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82f8e:	f013 0f08 	tst.w	r3, #8
   82f92:	d003      	beq.n	82f9c <pmc_switch_mck_to_pllack+0x1c>
   82f94:	e009      	b.n	82faa <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82f96:	3b01      	subs	r3, #1
   82f98:	d103      	bne.n	82fa2 <pmc_switch_mck_to_pllack+0x22>
   82f9a:	e01e      	b.n	82fda <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82f9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82fa0:	4910      	ldr	r1, [pc, #64]	; (82fe4 <pmc_switch_mck_to_pllack+0x64>)
   82fa2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82fa4:	f012 0f08 	tst.w	r2, #8
   82fa8:	d0f5      	beq.n	82f96 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82faa:	4a0e      	ldr	r2, [pc, #56]	; (82fe4 <pmc_switch_mck_to_pllack+0x64>)
   82fac:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82fae:	f023 0303 	bic.w	r3, r3, #3
   82fb2:	f043 0302 	orr.w	r3, r3, #2
   82fb6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82fb8:	6e90      	ldr	r0, [r2, #104]	; 0x68
   82fba:	f010 0008 	ands.w	r0, r0, #8
   82fbe:	d004      	beq.n	82fca <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   82fc0:	2000      	movs	r0, #0
   82fc2:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   82fc4:	3b01      	subs	r3, #1
   82fc6:	d103      	bne.n	82fd0 <pmc_switch_mck_to_pllack+0x50>
   82fc8:	e009      	b.n	82fde <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82fca:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82fce:	4905      	ldr	r1, [pc, #20]	; (82fe4 <pmc_switch_mck_to_pllack+0x64>)
   82fd0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82fd2:	f012 0f08 	tst.w	r2, #8
   82fd6:	d0f5      	beq.n	82fc4 <pmc_switch_mck_to_pllack+0x44>
   82fd8:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   82fda:	2001      	movs	r0, #1
   82fdc:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   82fde:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   82fe0:	4770      	bx	lr
   82fe2:	bf00      	nop
   82fe4:	400e0600 	.word	0x400e0600

00082fe8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82fe8:	b138      	cbz	r0, 82ffa <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82fea:	4911      	ldr	r1, [pc, #68]	; (83030 <pmc_switch_mainck_to_xtal+0x48>)
   82fec:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82fee:	4a11      	ldr	r2, [pc, #68]	; (83034 <pmc_switch_mainck_to_xtal+0x4c>)
   82ff0:	401a      	ands	r2, r3
   82ff2:	4b11      	ldr	r3, [pc, #68]	; (83038 <pmc_switch_mainck_to_xtal+0x50>)
   82ff4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82ff6:	620b      	str	r3, [r1, #32]
   82ff8:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82ffa:	4a0d      	ldr	r2, [pc, #52]	; (83030 <pmc_switch_mainck_to_xtal+0x48>)
   82ffc:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82ffe:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83002:	f023 0303 	bic.w	r3, r3, #3
   83006:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8300a:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8300e:	0209      	lsls	r1, r1, #8
   83010:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83012:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83014:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83016:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83018:	f013 0f01 	tst.w	r3, #1
   8301c:	d0fb      	beq.n	83016 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8301e:	4a04      	ldr	r2, [pc, #16]	; (83030 <pmc_switch_mainck_to_xtal+0x48>)
   83020:	6a13      	ldr	r3, [r2, #32]
   83022:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   83026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8302a:	6213      	str	r3, [r2, #32]
   8302c:	4770      	bx	lr
   8302e:	bf00      	nop
   83030:	400e0600 	.word	0x400e0600
   83034:	fec8fffc 	.word	0xfec8fffc
   83038:	01370002 	.word	0x01370002

0008303c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   8303c:	4b02      	ldr	r3, [pc, #8]	; (83048 <pmc_osc_is_ready_mainck+0xc>)
   8303e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83040:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   83044:	4770      	bx	lr
   83046:	bf00      	nop
   83048:	400e0600 	.word	0x400e0600

0008304c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   8304c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83050:	4b01      	ldr	r3, [pc, #4]	; (83058 <pmc_disable_pllack+0xc>)
   83052:	629a      	str	r2, [r3, #40]	; 0x28
   83054:	4770      	bx	lr
   83056:	bf00      	nop
   83058:	400e0600 	.word	0x400e0600

0008305c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8305c:	4b02      	ldr	r3, [pc, #8]	; (83068 <pmc_is_locked_pllack+0xc>)
   8305e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83060:	f000 0002 	and.w	r0, r0, #2
   83064:	4770      	bx	lr
   83066:	bf00      	nop
   83068:	400e0600 	.word	0x400e0600

0008306c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   8306c:	282c      	cmp	r0, #44	; 0x2c
   8306e:	d81e      	bhi.n	830ae <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   83070:	281f      	cmp	r0, #31
   83072:	d80c      	bhi.n	8308e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   83074:	4b11      	ldr	r3, [pc, #68]	; (830bc <pmc_enable_periph_clk+0x50>)
   83076:	699a      	ldr	r2, [r3, #24]
   83078:	2301      	movs	r3, #1
   8307a:	4083      	lsls	r3, r0
   8307c:	401a      	ands	r2, r3
   8307e:	4293      	cmp	r3, r2
   83080:	d017      	beq.n	830b2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   83082:	2301      	movs	r3, #1
   83084:	4083      	lsls	r3, r0
   83086:	4a0d      	ldr	r2, [pc, #52]	; (830bc <pmc_enable_periph_clk+0x50>)
   83088:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8308a:	2000      	movs	r0, #0
   8308c:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8308e:	4b0b      	ldr	r3, [pc, #44]	; (830bc <pmc_enable_periph_clk+0x50>)
   83090:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   83094:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   83096:	2301      	movs	r3, #1
   83098:	4083      	lsls	r3, r0
   8309a:	401a      	ands	r2, r3
   8309c:	4293      	cmp	r3, r2
   8309e:	d00a      	beq.n	830b6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   830a0:	2301      	movs	r3, #1
   830a2:	4083      	lsls	r3, r0
   830a4:	4a05      	ldr	r2, [pc, #20]	; (830bc <pmc_enable_periph_clk+0x50>)
   830a6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   830aa:	2000      	movs	r0, #0
   830ac:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   830ae:	2001      	movs	r0, #1
   830b0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   830b2:	2000      	movs	r0, #0
   830b4:	4770      	bx	lr
   830b6:	2000      	movs	r0, #0
}
   830b8:	4770      	bx	lr
   830ba:	bf00      	nop
   830bc:	400e0600 	.word	0x400e0600

000830c0 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
   830c0:	e7fe      	b.n	830c0 <Dummy_Handler>
   830c2:	bf00      	nop

000830c4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   830c4:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   830c6:	4b1f      	ldr	r3, [pc, #124]	; (83144 <Reset_Handler+0x80>)
   830c8:	4a1f      	ldr	r2, [pc, #124]	; (83148 <Reset_Handler+0x84>)
   830ca:	429a      	cmp	r2, r3
   830cc:	d003      	beq.n	830d6 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   830ce:	4b1f      	ldr	r3, [pc, #124]	; (8314c <Reset_Handler+0x88>)
   830d0:	4a1c      	ldr	r2, [pc, #112]	; (83144 <Reset_Handler+0x80>)
   830d2:	429a      	cmp	r2, r3
   830d4:	d304      	bcc.n	830e0 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   830d6:	4b1e      	ldr	r3, [pc, #120]	; (83150 <Reset_Handler+0x8c>)
   830d8:	4a1e      	ldr	r2, [pc, #120]	; (83154 <Reset_Handler+0x90>)
   830da:	429a      	cmp	r2, r3
   830dc:	d310      	bcc.n	83100 <Reset_Handler+0x3c>
   830de:	e01b      	b.n	83118 <Reset_Handler+0x54>
   830e0:	4918      	ldr	r1, [pc, #96]	; (83144 <Reset_Handler+0x80>)
   830e2:	1d0a      	adds	r2, r1, #4
   830e4:	4b1c      	ldr	r3, [pc, #112]	; (83158 <Reset_Handler+0x94>)
   830e6:	1a9b      	subs	r3, r3, r2
   830e8:	f023 0303 	bic.w	r3, r3, #3
   830ec:	3304      	adds	r3, #4
   830ee:	4a16      	ldr	r2, [pc, #88]	; (83148 <Reset_Handler+0x84>)
   830f0:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   830f2:	f852 0b04 	ldr.w	r0, [r2], #4
   830f6:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   830fa:	429a      	cmp	r2, r3
   830fc:	d1f9      	bne.n	830f2 <Reset_Handler+0x2e>
   830fe:	e7ea      	b.n	830d6 <Reset_Handler+0x12>
   83100:	4b16      	ldr	r3, [pc, #88]	; (8315c <Reset_Handler+0x98>)
   83102:	4a17      	ldr	r2, [pc, #92]	; (83160 <Reset_Handler+0x9c>)
   83104:	1ad2      	subs	r2, r2, r3
   83106:	f022 0203 	bic.w	r2, r2, #3
   8310a:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8310c:	3b04      	subs	r3, #4
		*pDest++ = 0;
   8310e:	2100      	movs	r1, #0
   83110:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83114:	4293      	cmp	r3, r2
   83116:	d1fb      	bne.n	83110 <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   83118:	4b12      	ldr	r3, [pc, #72]	; (83164 <Reset_Handler+0xa0>)
   8311a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8311e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   83122:	4911      	ldr	r1, [pc, #68]	; (83168 <Reset_Handler+0xa4>)
   83124:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   83126:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8312a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   8312e:	d203      	bcs.n	83138 <Reset_Handler+0x74>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   83130:	688b      	ldr	r3, [r1, #8]
   83132:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83136:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   83138:	4b0c      	ldr	r3, [pc, #48]	; (8316c <Reset_Handler+0xa8>)
   8313a:	4798      	blx	r3

	/* Branch to main function */
	main();
   8313c:	4b0c      	ldr	r3, [pc, #48]	; (83170 <Reset_Handler+0xac>)
   8313e:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   83140:	e7fe      	b.n	83140 <Reset_Handler+0x7c>
   83142:	bf00      	nop
   83144:	20070000 	.word	0x20070000
   83148:	0008784c 	.word	0x0008784c
   8314c:	20070a1c 	.word	0x20070a1c
   83150:	2007ad78 	.word	0x2007ad78
   83154:	20070a20 	.word	0x20070a20
   83158:	20070a1f 	.word	0x20070a1f
   8315c:	20070a24 	.word	0x20070a24
   83160:	2007ad7b 	.word	0x2007ad7b
   83164:	00080000 	.word	0x00080000
   83168:	e000ed00 	.word	0xe000ed00
   8316c:	00084699 	.word	0x00084699
   83170:	000832e1 	.word	0x000832e1

00083174 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   83174:	4b3e      	ldr	r3, [pc, #248]	; (83270 <SystemCoreClockUpdate+0xfc>)
   83176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83178:	f003 0303 	and.w	r3, r3, #3
   8317c:	2b03      	cmp	r3, #3
   8317e:	d85f      	bhi.n	83240 <SystemCoreClockUpdate+0xcc>
   83180:	e8df f003 	tbb	[pc, r3]
   83184:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   83188:	4b3a      	ldr	r3, [pc, #232]	; (83274 <SystemCoreClockUpdate+0x100>)
   8318a:	695b      	ldr	r3, [r3, #20]
   8318c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   83190:	bf14      	ite	ne
   83192:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   83196:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8319a:	4b37      	ldr	r3, [pc, #220]	; (83278 <SystemCoreClockUpdate+0x104>)
   8319c:	601a      	str	r2, [r3, #0]
   8319e:	e04f      	b.n	83240 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   831a0:	4b33      	ldr	r3, [pc, #204]	; (83270 <SystemCoreClockUpdate+0xfc>)
   831a2:	6a1b      	ldr	r3, [r3, #32]
   831a4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   831a8:	d003      	beq.n	831b2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   831aa:	4a34      	ldr	r2, [pc, #208]	; (8327c <SystemCoreClockUpdate+0x108>)
   831ac:	4b32      	ldr	r3, [pc, #200]	; (83278 <SystemCoreClockUpdate+0x104>)
   831ae:	601a      	str	r2, [r3, #0]
   831b0:	e046      	b.n	83240 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   831b2:	4a33      	ldr	r2, [pc, #204]	; (83280 <SystemCoreClockUpdate+0x10c>)
   831b4:	4b30      	ldr	r3, [pc, #192]	; (83278 <SystemCoreClockUpdate+0x104>)
   831b6:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   831b8:	4b2d      	ldr	r3, [pc, #180]	; (83270 <SystemCoreClockUpdate+0xfc>)
   831ba:	6a1b      	ldr	r3, [r3, #32]
   831bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   831c0:	2b10      	cmp	r3, #16
   831c2:	d002      	beq.n	831ca <SystemCoreClockUpdate+0x56>
   831c4:	2b20      	cmp	r3, #32
   831c6:	d004      	beq.n	831d2 <SystemCoreClockUpdate+0x5e>
   831c8:	e03a      	b.n	83240 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   831ca:	4a2e      	ldr	r2, [pc, #184]	; (83284 <SystemCoreClockUpdate+0x110>)
   831cc:	4b2a      	ldr	r3, [pc, #168]	; (83278 <SystemCoreClockUpdate+0x104>)
   831ce:	601a      	str	r2, [r3, #0]
				break;
   831d0:	e036      	b.n	83240 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   831d2:	4a2a      	ldr	r2, [pc, #168]	; (8327c <SystemCoreClockUpdate+0x108>)
   831d4:	4b28      	ldr	r3, [pc, #160]	; (83278 <SystemCoreClockUpdate+0x104>)
   831d6:	601a      	str	r2, [r3, #0]
				break;
   831d8:	e032      	b.n	83240 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   831da:	4b25      	ldr	r3, [pc, #148]	; (83270 <SystemCoreClockUpdate+0xfc>)
   831dc:	6a1b      	ldr	r3, [r3, #32]
   831de:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   831e2:	d003      	beq.n	831ec <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   831e4:	4a25      	ldr	r2, [pc, #148]	; (8327c <SystemCoreClockUpdate+0x108>)
   831e6:	4b24      	ldr	r3, [pc, #144]	; (83278 <SystemCoreClockUpdate+0x104>)
   831e8:	601a      	str	r2, [r3, #0]
   831ea:	e012      	b.n	83212 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   831ec:	4a24      	ldr	r2, [pc, #144]	; (83280 <SystemCoreClockUpdate+0x10c>)
   831ee:	4b22      	ldr	r3, [pc, #136]	; (83278 <SystemCoreClockUpdate+0x104>)
   831f0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   831f2:	4b1f      	ldr	r3, [pc, #124]	; (83270 <SystemCoreClockUpdate+0xfc>)
   831f4:	6a1b      	ldr	r3, [r3, #32]
   831f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   831fa:	2b10      	cmp	r3, #16
   831fc:	d002      	beq.n	83204 <SystemCoreClockUpdate+0x90>
   831fe:	2b20      	cmp	r3, #32
   83200:	d004      	beq.n	8320c <SystemCoreClockUpdate+0x98>
   83202:	e006      	b.n	83212 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   83204:	4a1f      	ldr	r2, [pc, #124]	; (83284 <SystemCoreClockUpdate+0x110>)
   83206:	4b1c      	ldr	r3, [pc, #112]	; (83278 <SystemCoreClockUpdate+0x104>)
   83208:	601a      	str	r2, [r3, #0]
				break;
   8320a:	e002      	b.n	83212 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8320c:	4a1b      	ldr	r2, [pc, #108]	; (8327c <SystemCoreClockUpdate+0x108>)
   8320e:	4b1a      	ldr	r3, [pc, #104]	; (83278 <SystemCoreClockUpdate+0x104>)
   83210:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   83212:	4b17      	ldr	r3, [pc, #92]	; (83270 <SystemCoreClockUpdate+0xfc>)
   83214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83216:	f003 0303 	and.w	r3, r3, #3
   8321a:	2b02      	cmp	r3, #2
   8321c:	d10d      	bne.n	8323a <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8321e:	4a14      	ldr	r2, [pc, #80]	; (83270 <SystemCoreClockUpdate+0xfc>)
   83220:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   83222:	6a92      	ldr	r2, [r2, #40]	; 0x28
   83224:	4814      	ldr	r0, [pc, #80]	; (83278 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83226:	f3c3 410a 	ubfx	r1, r3, #16, #11
   8322a:	6803      	ldr	r3, [r0, #0]
   8322c:	fb01 3303 	mla	r3, r1, r3, r3
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   83230:	b2d2      	uxtb	r2, r2
   83232:	fbb3 f3f2 	udiv	r3, r3, r2
   83236:	6003      	str	r3, [r0, #0]
   83238:	e002      	b.n	83240 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8323a:	4a13      	ldr	r2, [pc, #76]	; (83288 <SystemCoreClockUpdate+0x114>)
   8323c:	4b0e      	ldr	r3, [pc, #56]	; (83278 <SystemCoreClockUpdate+0x104>)
   8323e:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   83240:	4b0b      	ldr	r3, [pc, #44]	; (83270 <SystemCoreClockUpdate+0xfc>)
   83242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83244:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83248:	2b70      	cmp	r3, #112	; 0x70
   8324a:	d107      	bne.n	8325c <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   8324c:	4a0a      	ldr	r2, [pc, #40]	; (83278 <SystemCoreClockUpdate+0x104>)
   8324e:	6813      	ldr	r3, [r2, #0]
   83250:	490e      	ldr	r1, [pc, #56]	; (8328c <SystemCoreClockUpdate+0x118>)
   83252:	fba1 1303 	umull	r1, r3, r1, r3
   83256:	085b      	lsrs	r3, r3, #1
   83258:	6013      	str	r3, [r2, #0]
   8325a:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8325c:	4b04      	ldr	r3, [pc, #16]	; (83270 <SystemCoreClockUpdate+0xfc>)
   8325e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   83260:	4905      	ldr	r1, [pc, #20]	; (83278 <SystemCoreClockUpdate+0x104>)
   83262:	f3c2 1202 	ubfx	r2, r2, #4, #3
   83266:	680b      	ldr	r3, [r1, #0]
   83268:	40d3      	lsrs	r3, r2
   8326a:	600b      	str	r3, [r1, #0]
   8326c:	4770      	bx	lr
   8326e:	bf00      	nop
   83270:	400e0600 	.word	0x400e0600
   83274:	400e1a10 	.word	0x400e1a10
   83278:	200701b0 	.word	0x200701b0
   8327c:	00b71b00 	.word	0x00b71b00
   83280:	003d0900 	.word	0x003d0900
   83284:	007a1200 	.word	0x007a1200
   83288:	0e4e1c00 	.word	0x0e4e1c00
   8328c:	aaaaaaab 	.word	0xaaaaaaab

00083290 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   83290:	4b09      	ldr	r3, [pc, #36]	; (832b8 <_sbrk+0x28>)
   83292:	681b      	ldr	r3, [r3, #0]
   83294:	b913      	cbnz	r3, 8329c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   83296:	4a09      	ldr	r2, [pc, #36]	; (832bc <_sbrk+0x2c>)
   83298:	4b07      	ldr	r3, [pc, #28]	; (832b8 <_sbrk+0x28>)
   8329a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8329c:	4b06      	ldr	r3, [pc, #24]	; (832b8 <_sbrk+0x28>)
   8329e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   832a0:	181a      	adds	r2, r3, r0
   832a2:	4907      	ldr	r1, [pc, #28]	; (832c0 <_sbrk+0x30>)
   832a4:	4291      	cmp	r1, r2
   832a6:	db04      	blt.n	832b2 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   832a8:	4610      	mov	r0, r2
   832aa:	4a03      	ldr	r2, [pc, #12]	; (832b8 <_sbrk+0x28>)
   832ac:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   832ae:	4618      	mov	r0, r3
   832b0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   832b2:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   832b6:	4770      	bx	lr
   832b8:	2007acdc 	.word	0x2007acdc
   832bc:	2007cd78 	.word	0x2007cd78
   832c0:	20087ffc 	.word	0x20087ffc

000832c4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   832c4:	f04f 30ff 	mov.w	r0, #4294967295
   832c8:	4770      	bx	lr
   832ca:	bf00      	nop

000832cc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   832cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   832d0:	604b      	str	r3, [r1, #4]

	return 0;
}
   832d2:	2000      	movs	r0, #0
   832d4:	4770      	bx	lr
   832d6:	bf00      	nop

000832d8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   832d8:	2001      	movs	r0, #1
   832da:	4770      	bx	lr

000832dc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   832dc:	2000      	movs	r0, #0
   832de:	4770      	bx	lr

000832e0 <main>:
#include "drivers/TWI.h"
#include "drivers/hcsr04.h"
#include "drivers/delay_driver.h"

int main (void)
{
   832e0:	b570      	push	{r4, r5, r6, lr}
   832e2:	b084      	sub	sp, #16
	sysclk_init();
   832e4:	4b52      	ldr	r3, [pc, #328]	; (83430 <main+0x150>)
   832e6:	4798      	blx	r3
	board_init();
   832e8:	4b52      	ldr	r3, [pc, #328]	; (83434 <main+0x154>)
   832ea:	4798      	blx	r3
	delay_driver_init();
   832ec:	4b52      	ldr	r3, [pc, #328]	; (83438 <main+0x158>)
   832ee:	4798      	blx	r3
   832f0:	200b      	movs	r0, #11
   832f2:	4c52      	ldr	r4, [pc, #328]	; (8343c <main+0x15c>)
   832f4:	47a0      	blx	r4
   832f6:	200c      	movs	r0, #12
   832f8:	47a0      	blx	r4
   832fa:	200d      	movs	r0, #13
   832fc:	47a0      	blx	r4
   832fe:	200e      	movs	r0, #14
   83300:	47a0      	blx	r4
	ioport_init();
	console_init();
   83302:	4b4f      	ldr	r3, [pc, #316]	; (83440 <main+0x160>)
   83304:	4798      	blx	r3
	encoder_init();
   83306:	4b4f      	ldr	r3, [pc, #316]	; (83444 <main+0x164>)
   83308:	4798      	blx	r3
	PWM_init();
   8330a:	4b4f      	ldr	r3, [pc, #316]	; (83448 <main+0x168>)
   8330c:	4798      	blx	r3
	Twi_master_init(TWI1);
   8330e:	484f      	ldr	r0, [pc, #316]	; (8344c <main+0x16c>)
   83310:	4b4f      	ldr	r3, [pc, #316]	; (83450 <main+0x170>)
   83312:	4798      	blx	r3
	hcsr04_init();
   83314:	4b4f      	ldr	r3, [pc, #316]	; (83454 <main+0x174>)
   83316:	4798      	blx	r3
	
	ioport_enable_pin(pin_mapper(TASK_DEBUG_MOTOR_PIN));
   83318:	2035      	movs	r0, #53	; 0x35
   8331a:	4d4f      	ldr	r5, [pc, #316]	; (83458 <main+0x178>)
   8331c:	47a8      	blx	r5
   8331e:	f000 031f 	and.w	r3, r0, #31
   83322:	2401      	movs	r4, #1
   83324:	fa04 f303 	lsl.w	r3, r4, r3
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   83328:	0940      	lsrs	r0, r0, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8332a:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
   8332e:	f200 7007 	addw	r0, r0, #1799	; 0x707
   83332:	0240      	lsls	r0, r0, #9
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   83334:	6003      	str	r3, [r0, #0]
	ioport_enable_pin(pin_mapper(TASK_DEBUG_MAIN_PIN));
   83336:	2034      	movs	r0, #52	; 0x34
   83338:	47a8      	blx	r5
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   8333a:	f000 031f 	and.w	r3, r0, #31
   8333e:	fa04 f303 	lsl.w	r3, r4, r3
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   83342:	0940      	lsrs	r0, r0, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83344:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
   83348:	f200 7007 	addw	r0, r0, #1799	; 0x707
   8334c:	0240      	lsls	r0, r0, #9
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   8334e:	6003      	str	r3, [r0, #0]
	ioport_enable_pin(pin_mapper(30));
   83350:	201e      	movs	r0, #30
   83352:	47a8      	blx	r5
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   83354:	f000 031f 	and.w	r3, r0, #31
   83358:	fa04 f303 	lsl.w	r3, r4, r3
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   8335c:	0940      	lsrs	r0, r0, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8335e:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
   83362:	f200 7007 	addw	r0, r0, #1799	; 0x707
   83366:	0240      	lsls	r0, r0, #9
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   83368:	6003      	str	r3, [r0, #0]
	ioport_enable_pin(pin_mapper(SWITCH_CURIE_NOETHER_PIN)); /* Switch for switching platforms */
   8336a:	2005      	movs	r0, #5
   8336c:	47a8      	blx	r5
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   8336e:	f000 031f 	and.w	r3, r0, #31
   83372:	fa04 f303 	lsl.w	r3, r4, r3
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   83376:	0940      	lsrs	r0, r0, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83378:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
   8337c:	f200 7007 	addw	r0, r0, #1799	; 0x707
   83380:	0240      	lsls	r0, r0, #9
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   83382:	6003      	str	r3, [r0, #0]

	ioport_set_pin_dir(pin_mapper(TASK_DEBUG_MOTOR_PIN), IOPORT_DIR_OUTPUT);
   83384:	2035      	movs	r0, #53	; 0x35
   83386:	47a8      	blx	r5
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   83388:	0943      	lsrs	r3, r0, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8338a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8338e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83392:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   83394:	f000 001f 	and.w	r0, r0, #31
   83398:	fa04 f200 	lsl.w	r2, r4, r0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8339c:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8339e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(pin_mapper(TASK_DEBUG_MAIN_PIN), IOPORT_DIR_OUTPUT);
   833a2:	2034      	movs	r0, #52	; 0x34
   833a4:	47a8      	blx	r5
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   833a6:	0943      	lsrs	r3, r0, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   833a8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   833ac:	f203 7307 	addw	r3, r3, #1799	; 0x707
   833b0:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   833b2:	f000 001f 	and.w	r0, r0, #31
   833b6:	fa04 f200 	lsl.w	r2, r4, r0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   833ba:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   833bc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(pin_mapper(SWITCH_CURIE_NOETHER_PIN), IOPORT_DIR_INPUT);
   833c0:	2005      	movs	r0, #5
   833c2:	47a8      	blx	r5
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   833c4:	0943      	lsrs	r3, r0, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   833c6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   833ca:	f203 7307 	addw	r3, r3, #1799	; 0x707
   833ce:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   833d0:	f000 001f 	and.w	r0, r0, #31
   833d4:	fa04 f200 	lsl.w	r2, r4, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   833d8:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   833da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	/* Enable pullup for switch as well */
	PIOC->PIO_PUER |= PIO_PC25;
   833de:	4a1f      	ldr	r2, [pc, #124]	; (8345c <main+0x17c>)
   833e0:	6e53      	ldr	r3, [r2, #100]	; 0x64
   833e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   833e6:	6653      	str	r3, [r2, #100]	; 0x64

	/* Create queue-handle for the motor task */
	motor_task_instruction_handle = xQueueCreate(1, sizeof(struct motor_task_instruction));
   833e8:	4620      	mov	r0, r4
   833ea:	2110      	movs	r1, #16
   833ec:	2200      	movs	r2, #0
   833ee:	4b1c      	ldr	r3, [pc, #112]	; (83460 <main+0x180>)
   833f0:	4798      	blx	r3
   833f2:	4b1c      	ldr	r3, [pc, #112]	; (83464 <main+0x184>)
   833f4:	6018      	str	r0, [r3, #0]
 
	/* Create our tasks for the program */
	xTaskCreate(motor_task, (const signed char * const) "motor_task", TASK_MOTOR_STACK_SIZE, NULL, TASK_MOTOR_PRIORITY, NULL);
   833f6:	2602      	movs	r6, #2
   833f8:	9600      	str	r6, [sp, #0]
   833fa:	2400      	movs	r4, #0
   833fc:	9401      	str	r4, [sp, #4]
   833fe:	9402      	str	r4, [sp, #8]
   83400:	9403      	str	r4, [sp, #12]
   83402:	4819      	ldr	r0, [pc, #100]	; (83468 <main+0x188>)
   83404:	4919      	ldr	r1, [pc, #100]	; (8346c <main+0x18c>)
   83406:	f44f 7200 	mov.w	r2, #512	; 0x200
   8340a:	4623      	mov	r3, r4
   8340c:	4d18      	ldr	r5, [pc, #96]	; (83470 <main+0x190>)
   8340e:	47a8      	blx	r5
	xTaskCreate(main_task, (const signed char * const) "main_task", TASK_MAIN_STACK_SIZE, NULL, TASK_MAIN_PRIORITY, NULL);
   83410:	9600      	str	r6, [sp, #0]
   83412:	9401      	str	r4, [sp, #4]
   83414:	9402      	str	r4, [sp, #8]
   83416:	9403      	str	r4, [sp, #12]
   83418:	4816      	ldr	r0, [pc, #88]	; (83474 <main+0x194>)
   8341a:	4917      	ldr	r1, [pc, #92]	; (83478 <main+0x198>)
   8341c:	f44f 7200 	mov.w	r2, #512	; 0x200
   83420:	4623      	mov	r3, r4
   83422:	47a8      	blx	r5

	vTaskStartScheduler();
   83424:	4b15      	ldr	r3, [pc, #84]	; (8347c <main+0x19c>)
   83426:	4798      	blx	r3

	return 0;
}
   83428:	4620      	mov	r0, r4
   8342a:	b004      	add	sp, #16
   8342c:	bd70      	pop	{r4, r5, r6, pc}
   8342e:	bf00      	nop
   83430:	00082b2d 	.word	0x00082b2d
   83434:	00082b91 	.word	0x00082b91
   83438:	00080151 	.word	0x00080151
   8343c:	0008306d 	.word	0x0008306d
   83440:	00082929 	.word	0x00082929
   83444:	00081f11 	.word	0x00081f11
   83448:	00081df5 	.word	0x00081df5
   8344c:	40090000 	.word	0x40090000
   83450:	00080389 	.word	0x00080389
   83454:	000802b9 	.word	0x000802b9
   83458:	0008274d 	.word	0x0008274d
   8345c:	400e1200 	.word	0x400e1200
   83460:	00080c95 	.word	0x00080c95
   83464:	2007ad68 	.word	0x2007ad68
   83468:	000822a9 	.word	0x000822a9
   8346c:	00087768 	.word	0x00087768
   83470:	0008109d 	.word	0x0008109d
   83474:	0008243d 	.word	0x0008243d
   83478:	00087774 	.word	0x00087774
   8347c:	000812a1 	.word	0x000812a1

00083480 <atan>:
   83480:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83484:	4bbe      	ldr	r3, [pc, #760]	; (83780 <atan+0x300>)
   83486:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   8348a:	429e      	cmp	r6, r3
   8348c:	460d      	mov	r5, r1
   8348e:	468a      	mov	sl, r1
   83490:	4604      	mov	r4, r0
   83492:	dd0f      	ble.n	834b4 <atan+0x34>
   83494:	4bbb      	ldr	r3, [pc, #748]	; (83784 <atan+0x304>)
   83496:	429e      	cmp	r6, r3
   83498:	f300 80b0 	bgt.w	835fc <atan+0x17c>
   8349c:	f000 80ab 	beq.w	835f6 <atan+0x176>
   834a0:	4bb9      	ldr	r3, [pc, #740]	; (83788 <atan+0x308>)
   834a2:	49ba      	ldr	r1, [pc, #744]	; (8378c <atan+0x30c>)
   834a4:	4cba      	ldr	r4, [pc, #744]	; (83790 <atan+0x310>)
   834a6:	f1ba 0f00 	cmp.w	sl, #0
   834aa:	bfc8      	it	gt
   834ac:	4619      	movgt	r1, r3
   834ae:	4620      	mov	r0, r4
   834b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   834b4:	4bb7      	ldr	r3, [pc, #732]	; (83794 <atan+0x314>)
   834b6:	429e      	cmp	r6, r3
   834b8:	f300 80ba 	bgt.w	83630 <atan+0x1b0>
   834bc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   834c0:	429e      	cmp	r6, r3
   834c2:	f340 80a5 	ble.w	83610 <atan+0x190>
   834c6:	f04f 3bff 	mov.w	fp, #4294967295
   834ca:	4622      	mov	r2, r4
   834cc:	462b      	mov	r3, r5
   834ce:	4620      	mov	r0, r4
   834d0:	4629      	mov	r1, r5
   834d2:	f000 fc75 	bl	83dc0 <__aeabi_dmul>
   834d6:	4602      	mov	r2, r0
   834d8:	460b      	mov	r3, r1
   834da:	4680      	mov	r8, r0
   834dc:	4689      	mov	r9, r1
   834de:	f000 fc6f 	bl	83dc0 <__aeabi_dmul>
   834e2:	a38f      	add	r3, pc, #572	; (adr r3, 83720 <atan+0x2a0>)
   834e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   834e8:	4606      	mov	r6, r0
   834ea:	460f      	mov	r7, r1
   834ec:	f000 fc68 	bl	83dc0 <__aeabi_dmul>
   834f0:	a38d      	add	r3, pc, #564	; (adr r3, 83728 <atan+0x2a8>)
   834f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   834f6:	f000 fab1 	bl	83a5c <__adddf3>
   834fa:	4632      	mov	r2, r6
   834fc:	463b      	mov	r3, r7
   834fe:	f000 fc5f 	bl	83dc0 <__aeabi_dmul>
   83502:	a38b      	add	r3, pc, #556	; (adr r3, 83730 <atan+0x2b0>)
   83504:	e9d3 2300 	ldrd	r2, r3, [r3]
   83508:	f000 faa8 	bl	83a5c <__adddf3>
   8350c:	4632      	mov	r2, r6
   8350e:	463b      	mov	r3, r7
   83510:	f000 fc56 	bl	83dc0 <__aeabi_dmul>
   83514:	a388      	add	r3, pc, #544	; (adr r3, 83738 <atan+0x2b8>)
   83516:	e9d3 2300 	ldrd	r2, r3, [r3]
   8351a:	f000 fa9f 	bl	83a5c <__adddf3>
   8351e:	4632      	mov	r2, r6
   83520:	463b      	mov	r3, r7
   83522:	f000 fc4d 	bl	83dc0 <__aeabi_dmul>
   83526:	a386      	add	r3, pc, #536	; (adr r3, 83740 <atan+0x2c0>)
   83528:	e9d3 2300 	ldrd	r2, r3, [r3]
   8352c:	f000 fa96 	bl	83a5c <__adddf3>
   83530:	4632      	mov	r2, r6
   83532:	463b      	mov	r3, r7
   83534:	f000 fc44 	bl	83dc0 <__aeabi_dmul>
   83538:	a383      	add	r3, pc, #524	; (adr r3, 83748 <atan+0x2c8>)
   8353a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8353e:	f000 fa8d 	bl	83a5c <__adddf3>
   83542:	4642      	mov	r2, r8
   83544:	464b      	mov	r3, r9
   83546:	f000 fc3b 	bl	83dc0 <__aeabi_dmul>
   8354a:	a381      	add	r3, pc, #516	; (adr r3, 83750 <atan+0x2d0>)
   8354c:	e9d3 2300 	ldrd	r2, r3, [r3]
   83550:	4680      	mov	r8, r0
   83552:	4689      	mov	r9, r1
   83554:	4630      	mov	r0, r6
   83556:	4639      	mov	r1, r7
   83558:	f000 fc32 	bl	83dc0 <__aeabi_dmul>
   8355c:	a37e      	add	r3, pc, #504	; (adr r3, 83758 <atan+0x2d8>)
   8355e:	e9d3 2300 	ldrd	r2, r3, [r3]
   83562:	f000 fa79 	bl	83a58 <__aeabi_dsub>
   83566:	4632      	mov	r2, r6
   83568:	463b      	mov	r3, r7
   8356a:	f000 fc29 	bl	83dc0 <__aeabi_dmul>
   8356e:	a37c      	add	r3, pc, #496	; (adr r3, 83760 <atan+0x2e0>)
   83570:	e9d3 2300 	ldrd	r2, r3, [r3]
   83574:	f000 fa70 	bl	83a58 <__aeabi_dsub>
   83578:	4632      	mov	r2, r6
   8357a:	463b      	mov	r3, r7
   8357c:	f000 fc20 	bl	83dc0 <__aeabi_dmul>
   83580:	a379      	add	r3, pc, #484	; (adr r3, 83768 <atan+0x2e8>)
   83582:	e9d3 2300 	ldrd	r2, r3, [r3]
   83586:	f000 fa67 	bl	83a58 <__aeabi_dsub>
   8358a:	4632      	mov	r2, r6
   8358c:	463b      	mov	r3, r7
   8358e:	f000 fc17 	bl	83dc0 <__aeabi_dmul>
   83592:	a377      	add	r3, pc, #476	; (adr r3, 83770 <atan+0x2f0>)
   83594:	e9d3 2300 	ldrd	r2, r3, [r3]
   83598:	f000 fa5e 	bl	83a58 <__aeabi_dsub>
   8359c:	4632      	mov	r2, r6
   8359e:	463b      	mov	r3, r7
   835a0:	f000 fc0e 	bl	83dc0 <__aeabi_dmul>
   835a4:	f1bb 3fff 	cmp.w	fp, #4294967295
   835a8:	4602      	mov	r2, r0
   835aa:	460b      	mov	r3, r1
   835ac:	d067      	beq.n	8367e <atan+0x1fe>
   835ae:	4640      	mov	r0, r8
   835b0:	4649      	mov	r1, r9
   835b2:	f000 fa53 	bl	83a5c <__adddf3>
   835b6:	4622      	mov	r2, r4
   835b8:	462b      	mov	r3, r5
   835ba:	f000 fc01 	bl	83dc0 <__aeabi_dmul>
   835be:	4e76      	ldr	r6, [pc, #472]	; (83798 <atan+0x318>)
   835c0:	4b76      	ldr	r3, [pc, #472]	; (8379c <atan+0x31c>)
   835c2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   835c6:	445e      	add	r6, fp
   835c8:	449b      	add	fp, r3
   835ca:	e9db 2300 	ldrd	r2, r3, [fp]
   835ce:	f000 fa43 	bl	83a58 <__aeabi_dsub>
   835d2:	4622      	mov	r2, r4
   835d4:	462b      	mov	r3, r5
   835d6:	f000 fa3f 	bl	83a58 <__aeabi_dsub>
   835da:	4602      	mov	r2, r0
   835dc:	460b      	mov	r3, r1
   835de:	e9d6 0100 	ldrd	r0, r1, [r6]
   835e2:	f000 fa39 	bl	83a58 <__aeabi_dsub>
   835e6:	f1ba 0f00 	cmp.w	sl, #0
   835ea:	4604      	mov	r4, r0
   835ec:	f6bf af5f 	bge.w	834ae <atan+0x2e>
   835f0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   835f4:	e75b      	b.n	834ae <atan+0x2e>
   835f6:	2800      	cmp	r0, #0
   835f8:	f43f af52 	beq.w	834a0 <atan+0x20>
   835fc:	4622      	mov	r2, r4
   835fe:	4620      	mov	r0, r4
   83600:	4629      	mov	r1, r5
   83602:	462b      	mov	r3, r5
   83604:	f000 fa2a 	bl	83a5c <__adddf3>
   83608:	4604      	mov	r4, r0
   8360a:	4620      	mov	r0, r4
   8360c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83610:	a359      	add	r3, pc, #356	; (adr r3, 83778 <atan+0x2f8>)
   83612:	e9d3 2300 	ldrd	r2, r3, [r3]
   83616:	f000 fa21 	bl	83a5c <__adddf3>
   8361a:	2200      	movs	r2, #0
   8361c:	4b60      	ldr	r3, [pc, #384]	; (837a0 <atan+0x320>)
   8361e:	f000 fe5f 	bl	842e0 <__aeabi_dcmpgt>
   83622:	2800      	cmp	r0, #0
   83624:	f43f af4f 	beq.w	834c6 <atan+0x46>
   83628:	4629      	mov	r1, r5
   8362a:	4620      	mov	r0, r4
   8362c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83630:	f000 f8c0 	bl	837b4 <fabs>
   83634:	4b5b      	ldr	r3, [pc, #364]	; (837a4 <atan+0x324>)
   83636:	4604      	mov	r4, r0
   83638:	429e      	cmp	r6, r3
   8363a:	460d      	mov	r5, r1
   8363c:	dc2f      	bgt.n	8369e <atan+0x21e>
   8363e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   83642:	429e      	cmp	r6, r3
   83644:	dc54      	bgt.n	836f0 <atan+0x270>
   83646:	4602      	mov	r2, r0
   83648:	460b      	mov	r3, r1
   8364a:	f000 fa07 	bl	83a5c <__adddf3>
   8364e:	2200      	movs	r2, #0
   83650:	4b53      	ldr	r3, [pc, #332]	; (837a0 <atan+0x320>)
   83652:	f000 fa01 	bl	83a58 <__aeabi_dsub>
   83656:	2200      	movs	r2, #0
   83658:	4606      	mov	r6, r0
   8365a:	460f      	mov	r7, r1
   8365c:	4620      	mov	r0, r4
   8365e:	4629      	mov	r1, r5
   83660:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   83664:	f000 f9fa 	bl	83a5c <__adddf3>
   83668:	4602      	mov	r2, r0
   8366a:	460b      	mov	r3, r1
   8366c:	4630      	mov	r0, r6
   8366e:	4639      	mov	r1, r7
   83670:	f000 fcd0 	bl	84014 <__aeabi_ddiv>
   83674:	f04f 0b00 	mov.w	fp, #0
   83678:	4604      	mov	r4, r0
   8367a:	460d      	mov	r5, r1
   8367c:	e725      	b.n	834ca <atan+0x4a>
   8367e:	4640      	mov	r0, r8
   83680:	4649      	mov	r1, r9
   83682:	f000 f9eb 	bl	83a5c <__adddf3>
   83686:	4622      	mov	r2, r4
   83688:	462b      	mov	r3, r5
   8368a:	f000 fb99 	bl	83dc0 <__aeabi_dmul>
   8368e:	4602      	mov	r2, r0
   83690:	460b      	mov	r3, r1
   83692:	4620      	mov	r0, r4
   83694:	4629      	mov	r1, r5
   83696:	f000 f9df 	bl	83a58 <__aeabi_dsub>
   8369a:	4604      	mov	r4, r0
   8369c:	e707      	b.n	834ae <atan+0x2e>
   8369e:	4b42      	ldr	r3, [pc, #264]	; (837a8 <atan+0x328>)
   836a0:	429e      	cmp	r6, r3
   836a2:	dc1a      	bgt.n	836da <atan+0x25a>
   836a4:	2200      	movs	r2, #0
   836a6:	4b41      	ldr	r3, [pc, #260]	; (837ac <atan+0x32c>)
   836a8:	f000 f9d6 	bl	83a58 <__aeabi_dsub>
   836ac:	2200      	movs	r2, #0
   836ae:	4606      	mov	r6, r0
   836b0:	460f      	mov	r7, r1
   836b2:	4620      	mov	r0, r4
   836b4:	4629      	mov	r1, r5
   836b6:	4b3d      	ldr	r3, [pc, #244]	; (837ac <atan+0x32c>)
   836b8:	f000 fb82 	bl	83dc0 <__aeabi_dmul>
   836bc:	2200      	movs	r2, #0
   836be:	4b38      	ldr	r3, [pc, #224]	; (837a0 <atan+0x320>)
   836c0:	f000 f9cc 	bl	83a5c <__adddf3>
   836c4:	4602      	mov	r2, r0
   836c6:	460b      	mov	r3, r1
   836c8:	4630      	mov	r0, r6
   836ca:	4639      	mov	r1, r7
   836cc:	f000 fca2 	bl	84014 <__aeabi_ddiv>
   836d0:	f04f 0b02 	mov.w	fp, #2
   836d4:	4604      	mov	r4, r0
   836d6:	460d      	mov	r5, r1
   836d8:	e6f7      	b.n	834ca <atan+0x4a>
   836da:	4602      	mov	r2, r0
   836dc:	460b      	mov	r3, r1
   836de:	2000      	movs	r0, #0
   836e0:	4933      	ldr	r1, [pc, #204]	; (837b0 <atan+0x330>)
   836e2:	f000 fc97 	bl	84014 <__aeabi_ddiv>
   836e6:	f04f 0b03 	mov.w	fp, #3
   836ea:	4604      	mov	r4, r0
   836ec:	460d      	mov	r5, r1
   836ee:	e6ec      	b.n	834ca <atan+0x4a>
   836f0:	2200      	movs	r2, #0
   836f2:	4b2b      	ldr	r3, [pc, #172]	; (837a0 <atan+0x320>)
   836f4:	f000 f9b0 	bl	83a58 <__aeabi_dsub>
   836f8:	2200      	movs	r2, #0
   836fa:	4606      	mov	r6, r0
   836fc:	460f      	mov	r7, r1
   836fe:	4620      	mov	r0, r4
   83700:	4629      	mov	r1, r5
   83702:	4b27      	ldr	r3, [pc, #156]	; (837a0 <atan+0x320>)
   83704:	f000 f9aa 	bl	83a5c <__adddf3>
   83708:	4602      	mov	r2, r0
   8370a:	460b      	mov	r3, r1
   8370c:	4630      	mov	r0, r6
   8370e:	4639      	mov	r1, r7
   83710:	f000 fc80 	bl	84014 <__aeabi_ddiv>
   83714:	f04f 0b01 	mov.w	fp, #1
   83718:	4604      	mov	r4, r0
   8371a:	460d      	mov	r5, r1
   8371c:	e6d5      	b.n	834ca <atan+0x4a>
   8371e:	bf00      	nop
   83720:	e322da11 	.word	0xe322da11
   83724:	3f90ad3a 	.word	0x3f90ad3a
   83728:	24760deb 	.word	0x24760deb
   8372c:	3fa97b4b 	.word	0x3fa97b4b
   83730:	a0d03d51 	.word	0xa0d03d51
   83734:	3fb10d66 	.word	0x3fb10d66
   83738:	c54c206e 	.word	0xc54c206e
   8373c:	3fb745cd 	.word	0x3fb745cd
   83740:	920083ff 	.word	0x920083ff
   83744:	3fc24924 	.word	0x3fc24924
   83748:	5555550d 	.word	0x5555550d
   8374c:	3fd55555 	.word	0x3fd55555
   83750:	2c6a6c2f 	.word	0x2c6a6c2f
   83754:	bfa2b444 	.word	0xbfa2b444
   83758:	52defd9a 	.word	0x52defd9a
   8375c:	3fadde2d 	.word	0x3fadde2d
   83760:	af749a6d 	.word	0xaf749a6d
   83764:	3fb3b0f2 	.word	0x3fb3b0f2
   83768:	fe231671 	.word	0xfe231671
   8376c:	3fbc71c6 	.word	0x3fbc71c6
   83770:	9998ebc4 	.word	0x9998ebc4
   83774:	3fc99999 	.word	0x3fc99999
   83778:	8800759c 	.word	0x8800759c
   8377c:	7e37e43c 	.word	0x7e37e43c
   83780:	440fffff 	.word	0x440fffff
   83784:	7ff00000 	.word	0x7ff00000
   83788:	3ff921fb 	.word	0x3ff921fb
   8378c:	bff921fb 	.word	0xbff921fb
   83790:	54442d18 	.word	0x54442d18
   83794:	3fdbffff 	.word	0x3fdbffff
   83798:	000877a0 	.word	0x000877a0
   8379c:	00087780 	.word	0x00087780
   837a0:	3ff00000 	.word	0x3ff00000
   837a4:	3ff2ffff 	.word	0x3ff2ffff
   837a8:	40037fff 	.word	0x40037fff
   837ac:	3ff80000 	.word	0x3ff80000
   837b0:	bff00000 	.word	0xbff00000

000837b4 <fabs>:
   837b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   837b8:	4770      	bx	lr
   837ba:	bf00      	nop

000837bc <sqrt>:
   837bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   837c0:	b08a      	sub	sp, #40	; 0x28
   837c2:	4606      	mov	r6, r0
   837c4:	460f      	mov	r7, r1
   837c6:	f000 f84f 	bl	83868 <__ieee754_sqrt>
   837ca:	f8df a098 	ldr.w	sl, [pc, #152]	; 83864 <sqrt+0xa8>
   837ce:	4604      	mov	r4, r0
   837d0:	f99a 3000 	ldrsb.w	r3, [sl]
   837d4:	460d      	mov	r5, r1
   837d6:	3301      	adds	r3, #1
   837d8:	d00f      	beq.n	837fa <sqrt+0x3e>
   837da:	4630      	mov	r0, r6
   837dc:	4639      	mov	r1, r7
   837de:	f000 f909 	bl	839f4 <__fpclassifyd>
   837e2:	b150      	cbz	r0, 837fa <sqrt+0x3e>
   837e4:	f04f 0800 	mov.w	r8, #0
   837e8:	f04f 0900 	mov.w	r9, #0
   837ec:	4630      	mov	r0, r6
   837ee:	4639      	mov	r1, r7
   837f0:	4642      	mov	r2, r8
   837f2:	464b      	mov	r3, r9
   837f4:	f000 fd56 	bl	842a4 <__aeabi_dcmplt>
   837f8:	b920      	cbnz	r0, 83804 <sqrt+0x48>
   837fa:	4620      	mov	r0, r4
   837fc:	4629      	mov	r1, r5
   837fe:	b00a      	add	sp, #40	; 0x28
   83800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83804:	4916      	ldr	r1, [pc, #88]	; (83860 <sqrt+0xa4>)
   83806:	f89a 4000 	ldrb.w	r4, [sl]
   8380a:	2201      	movs	r2, #1
   8380c:	2300      	movs	r3, #0
   8380e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   83812:	e9cd 6702 	strd	r6, r7, [sp, #8]
   83816:	9101      	str	r1, [sp, #4]
   83818:	9200      	str	r2, [sp, #0]
   8381a:	9308      	str	r3, [sp, #32]
   8381c:	b964      	cbnz	r4, 83838 <sqrt+0x7c>
   8381e:	e9cd 8906 	strd	r8, r9, [sp, #24]
   83822:	4668      	mov	r0, sp
   83824:	f000 f912 	bl	83a4c <matherr>
   83828:	b180      	cbz	r0, 8384c <sqrt+0x90>
   8382a:	9b08      	ldr	r3, [sp, #32]
   8382c:	b99b      	cbnz	r3, 83856 <sqrt+0x9a>
   8382e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   83832:	b00a      	add	sp, #40	; 0x28
   83834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83838:	4640      	mov	r0, r8
   8383a:	4649      	mov	r1, r9
   8383c:	4642      	mov	r2, r8
   8383e:	464b      	mov	r3, r9
   83840:	f000 fbe8 	bl	84014 <__aeabi_ddiv>
   83844:	2c02      	cmp	r4, #2
   83846:	e9cd 0106 	strd	r0, r1, [sp, #24]
   8384a:	d1ea      	bne.n	83822 <sqrt+0x66>
   8384c:	f000 ff1e 	bl	8468c <__errno>
   83850:	2321      	movs	r3, #33	; 0x21
   83852:	6003      	str	r3, [r0, #0]
   83854:	e7e9      	b.n	8382a <sqrt+0x6e>
   83856:	f000 ff19 	bl	8468c <__errno>
   8385a:	9b08      	ldr	r3, [sp, #32]
   8385c:	6003      	str	r3, [r0, #0]
   8385e:	e7e6      	b.n	8382e <sqrt+0x72>
   83860:	000877c0 	.word	0x000877c0
   83864:	200701b4 	.word	0x200701b4

00083868 <__ieee754_sqrt>:
   83868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8386c:	4e60      	ldr	r6, [pc, #384]	; (839f0 <__ieee754_sqrt+0x188>)
   8386e:	460c      	mov	r4, r1
   83870:	46b6      	mov	lr, r6
   83872:	400e      	ands	r6, r1
   83874:	4576      	cmp	r6, lr
   83876:	4605      	mov	r5, r0
   83878:	460b      	mov	r3, r1
   8387a:	f000 8098 	beq.w	839ae <__ieee754_sqrt+0x146>
   8387e:	2900      	cmp	r1, #0
   83880:	4602      	mov	r2, r0
   83882:	dd76      	ble.n	83972 <__ieee754_sqrt+0x10a>
   83884:	ea5f 5e21 	movs.w	lr, r1, asr #20
   83888:	f000 8081 	beq.w	8398e <__ieee754_sqrt+0x126>
   8388c:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
   83890:	f3c3 0313 	ubfx	r3, r3, #0, #20
   83894:	f01e 0f01 	tst.w	lr, #1
   83898:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8389c:	d15e      	bne.n	8395c <__ieee754_sqrt+0xf4>
   8389e:	2700      	movs	r7, #0
   838a0:	463c      	mov	r4, r7
   838a2:	0fd1      	lsrs	r1, r2, #31
   838a4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   838a8:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   838ac:	0052      	lsls	r2, r2, #1
   838ae:	2016      	movs	r0, #22
   838b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   838b4:	1865      	adds	r5, r4, r1
   838b6:	429d      	cmp	r5, r3
   838b8:	ea4f 76d2 	mov.w	r6, r2, lsr #31
   838bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
   838c0:	dc02      	bgt.n	838c8 <__ieee754_sqrt+0x60>
   838c2:	1b5b      	subs	r3, r3, r5
   838c4:	186c      	adds	r4, r5, r1
   838c6:	440f      	add	r7, r1
   838c8:	3801      	subs	r0, #1
   838ca:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   838ce:	ea4f 0151 	mov.w	r1, r1, lsr #1
   838d2:	d1ef      	bne.n	838b4 <__ieee754_sqrt+0x4c>
   838d4:	4684      	mov	ip, r0
   838d6:	2620      	movs	r6, #32
   838d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   838dc:	e00a      	b.n	838f4 <__ieee754_sqrt+0x8c>
   838de:	42a3      	cmp	r3, r4
   838e0:	d020      	beq.n	83924 <__ieee754_sqrt+0xbc>
   838e2:	0fd5      	lsrs	r5, r2, #31
   838e4:	3e01      	subs	r6, #1
   838e6:	ea4f 0151 	mov.w	r1, r1, lsr #1
   838ea:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   838ee:	ea4f 0242 	mov.w	r2, r2, lsl #1
   838f2:	d020      	beq.n	83936 <__ieee754_sqrt+0xce>
   838f4:	429c      	cmp	r4, r3
   838f6:	eb0c 0501 	add.w	r5, ip, r1
   838fa:	daf0      	bge.n	838de <__ieee754_sqrt+0x76>
   838fc:	2d00      	cmp	r5, #0
   838fe:	eb05 0c01 	add.w	ip, r5, r1
   83902:	db09      	blt.n	83918 <__ieee754_sqrt+0xb0>
   83904:	46a0      	mov	r8, r4
   83906:	1b1b      	subs	r3, r3, r4
   83908:	4295      	cmp	r5, r2
   8390a:	bf88      	it	hi
   8390c:	f103 33ff 	addhi.w	r3, r3, #4294967295
   83910:	4644      	mov	r4, r8
   83912:	1b52      	subs	r2, r2, r5
   83914:	4408      	add	r0, r1
   83916:	e7e4      	b.n	838e2 <__ieee754_sqrt+0x7a>
   83918:	f1bc 0f00 	cmp.w	ip, #0
   8391c:	dbf2      	blt.n	83904 <__ieee754_sqrt+0x9c>
   8391e:	f104 0801 	add.w	r8, r4, #1
   83922:	e7f0      	b.n	83906 <__ieee754_sqrt+0x9e>
   83924:	4295      	cmp	r5, r2
   83926:	d817      	bhi.n	83958 <__ieee754_sqrt+0xf0>
   83928:	2d00      	cmp	r5, #0
   8392a:	eb05 0c01 	add.w	ip, r5, r1
   8392e:	db48      	blt.n	839c2 <__ieee754_sqrt+0x15a>
   83930:	4698      	mov	r8, r3
   83932:	2300      	movs	r3, #0
   83934:	e7ec      	b.n	83910 <__ieee754_sqrt+0xa8>
   83936:	4313      	orrs	r3, r2
   83938:	d115      	bne.n	83966 <__ieee754_sqrt+0xfe>
   8393a:	0840      	lsrs	r0, r0, #1
   8393c:	107b      	asrs	r3, r7, #1
   8393e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   83942:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83946:	07fa      	lsls	r2, r7, #31
   83948:	eb03 570e 	add.w	r7, r3, lr, lsl #20
   8394c:	4639      	mov	r1, r7
   8394e:	bf48      	it	mi
   83950:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   83954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83958:	461c      	mov	r4, r3
   8395a:	e7c2      	b.n	838e2 <__ieee754_sqrt+0x7a>
   8395c:	0fd1      	lsrs	r1, r2, #31
   8395e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   83962:	0052      	lsls	r2, r2, #1
   83964:	e79b      	b.n	8389e <__ieee754_sqrt+0x36>
   83966:	1c41      	adds	r1, r0, #1
   83968:	d031      	beq.n	839ce <__ieee754_sqrt+0x166>
   8396a:	f000 0301 	and.w	r3, r0, #1
   8396e:	4418      	add	r0, r3
   83970:	e7e3      	b.n	8393a <__ieee754_sqrt+0xd2>
   83972:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   83976:	4306      	orrs	r6, r0
   83978:	d0ec      	beq.n	83954 <__ieee754_sqrt+0xec>
   8397a:	bb79      	cbnz	r1, 839dc <__ieee754_sqrt+0x174>
   8397c:	468e      	mov	lr, r1
   8397e:	0ad3      	lsrs	r3, r2, #11
   83980:	f1ae 0e15 	sub.w	lr, lr, #21
   83984:	0552      	lsls	r2, r2, #21
   83986:	2b00      	cmp	r3, #0
   83988:	d0f9      	beq.n	8397e <__ieee754_sqrt+0x116>
   8398a:	02dc      	lsls	r4, r3, #11
   8398c:	d422      	bmi.n	839d4 <__ieee754_sqrt+0x16c>
   8398e:	2100      	movs	r1, #0
   83990:	005b      	lsls	r3, r3, #1
   83992:	02d8      	lsls	r0, r3, #11
   83994:	f101 0101 	add.w	r1, r1, #1
   83998:	d5fa      	bpl.n	83990 <__ieee754_sqrt+0x128>
   8399a:	f1c1 0001 	rsb	r0, r1, #1
   8399e:	f1c1 0420 	rsb	r4, r1, #32
   839a2:	fa22 f404 	lsr.w	r4, r2, r4
   839a6:	4323      	orrs	r3, r4
   839a8:	4486      	add	lr, r0
   839aa:	408a      	lsls	r2, r1
   839ac:	e76e      	b.n	8388c <__ieee754_sqrt+0x24>
   839ae:	4602      	mov	r2, r0
   839b0:	460b      	mov	r3, r1
   839b2:	f000 fa05 	bl	83dc0 <__aeabi_dmul>
   839b6:	462a      	mov	r2, r5
   839b8:	4623      	mov	r3, r4
   839ba:	f000 f84f 	bl	83a5c <__adddf3>
   839be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   839c2:	f1bc 0f00 	cmp.w	ip, #0
   839c6:	daaa      	bge.n	8391e <__ieee754_sqrt+0xb6>
   839c8:	46a0      	mov	r8, r4
   839ca:	2300      	movs	r3, #0
   839cc:	e7a0      	b.n	83910 <__ieee754_sqrt+0xa8>
   839ce:	3701      	adds	r7, #1
   839d0:	4630      	mov	r0, r6
   839d2:	e7b3      	b.n	8393c <__ieee754_sqrt+0xd4>
   839d4:	2420      	movs	r4, #32
   839d6:	2001      	movs	r0, #1
   839d8:	2100      	movs	r1, #0
   839da:	e7e2      	b.n	839a2 <__ieee754_sqrt+0x13a>
   839dc:	4602      	mov	r2, r0
   839de:	460b      	mov	r3, r1
   839e0:	f000 f83a 	bl	83a58 <__aeabi_dsub>
   839e4:	4602      	mov	r2, r0
   839e6:	460b      	mov	r3, r1
   839e8:	f000 fb14 	bl	84014 <__aeabi_ddiv>
   839ec:	e7b2      	b.n	83954 <__ieee754_sqrt+0xec>
   839ee:	bf00      	nop
   839f0:	7ff00000 	.word	0x7ff00000

000839f4 <__fpclassifyd>:
   839f4:	b410      	push	{r4}
   839f6:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
   839fa:	d008      	beq.n	83a0e <__fpclassifyd+0x1a>
   839fc:	4b11      	ldr	r3, [pc, #68]	; (83a44 <__fpclassifyd+0x50>)
   839fe:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
   83a02:	429a      	cmp	r2, r3
   83a04:	d808      	bhi.n	83a18 <__fpclassifyd+0x24>
   83a06:	2004      	movs	r0, #4
   83a08:	f85d 4b04 	ldr.w	r4, [sp], #4
   83a0c:	4770      	bx	lr
   83a0e:	b918      	cbnz	r0, 83a18 <__fpclassifyd+0x24>
   83a10:	2002      	movs	r0, #2
   83a12:	f85d 4b04 	ldr.w	r4, [sp], #4
   83a16:	4770      	bx	lr
   83a18:	f101 41ff 	add.w	r1, r1, #2139095040	; 0x7f800000
   83a1c:	4b09      	ldr	r3, [pc, #36]	; (83a44 <__fpclassifyd+0x50>)
   83a1e:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
   83a22:	4299      	cmp	r1, r3
   83a24:	d9ef      	bls.n	83a06 <__fpclassifyd+0x12>
   83a26:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
   83a2a:	d201      	bcs.n	83a30 <__fpclassifyd+0x3c>
   83a2c:	2003      	movs	r0, #3
   83a2e:	e7eb      	b.n	83a08 <__fpclassifyd+0x14>
   83a30:	4b05      	ldr	r3, [pc, #20]	; (83a48 <__fpclassifyd+0x54>)
   83a32:	429c      	cmp	r4, r3
   83a34:	d001      	beq.n	83a3a <__fpclassifyd+0x46>
   83a36:	2000      	movs	r0, #0
   83a38:	e7e6      	b.n	83a08 <__fpclassifyd+0x14>
   83a3a:	fab0 f080 	clz	r0, r0
   83a3e:	0940      	lsrs	r0, r0, #5
   83a40:	e7e2      	b.n	83a08 <__fpclassifyd+0x14>
   83a42:	bf00      	nop
   83a44:	7fdfffff 	.word	0x7fdfffff
   83a48:	7ff00000 	.word	0x7ff00000

00083a4c <matherr>:
   83a4c:	2000      	movs	r0, #0
   83a4e:	4770      	bx	lr

00083a50 <__aeabi_drsub>:
   83a50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   83a54:	e002      	b.n	83a5c <__adddf3>
   83a56:	bf00      	nop

00083a58 <__aeabi_dsub>:
   83a58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00083a5c <__adddf3>:
   83a5c:	b530      	push	{r4, r5, lr}
   83a5e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   83a62:	ea4f 0543 	mov.w	r5, r3, lsl #1
   83a66:	ea94 0f05 	teq	r4, r5
   83a6a:	bf08      	it	eq
   83a6c:	ea90 0f02 	teqeq	r0, r2
   83a70:	bf1f      	itttt	ne
   83a72:	ea54 0c00 	orrsne.w	ip, r4, r0
   83a76:	ea55 0c02 	orrsne.w	ip, r5, r2
   83a7a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   83a7e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83a82:	f000 80e2 	beq.w	83c4a <__adddf3+0x1ee>
   83a86:	ea4f 5454 	mov.w	r4, r4, lsr #21
   83a8a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   83a8e:	bfb8      	it	lt
   83a90:	426d      	neglt	r5, r5
   83a92:	dd0c      	ble.n	83aae <__adddf3+0x52>
   83a94:	442c      	add	r4, r5
   83a96:	ea80 0202 	eor.w	r2, r0, r2
   83a9a:	ea81 0303 	eor.w	r3, r1, r3
   83a9e:	ea82 0000 	eor.w	r0, r2, r0
   83aa2:	ea83 0101 	eor.w	r1, r3, r1
   83aa6:	ea80 0202 	eor.w	r2, r0, r2
   83aaa:	ea81 0303 	eor.w	r3, r1, r3
   83aae:	2d36      	cmp	r5, #54	; 0x36
   83ab0:	bf88      	it	hi
   83ab2:	bd30      	pophi	{r4, r5, pc}
   83ab4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83ab8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83abc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   83ac0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   83ac4:	d002      	beq.n	83acc <__adddf3+0x70>
   83ac6:	4240      	negs	r0, r0
   83ac8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83acc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   83ad0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83ad4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   83ad8:	d002      	beq.n	83ae0 <__adddf3+0x84>
   83ada:	4252      	negs	r2, r2
   83adc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83ae0:	ea94 0f05 	teq	r4, r5
   83ae4:	f000 80a7 	beq.w	83c36 <__adddf3+0x1da>
   83ae8:	f1a4 0401 	sub.w	r4, r4, #1
   83aec:	f1d5 0e20 	rsbs	lr, r5, #32
   83af0:	db0d      	blt.n	83b0e <__adddf3+0xb2>
   83af2:	fa02 fc0e 	lsl.w	ip, r2, lr
   83af6:	fa22 f205 	lsr.w	r2, r2, r5
   83afa:	1880      	adds	r0, r0, r2
   83afc:	f141 0100 	adc.w	r1, r1, #0
   83b00:	fa03 f20e 	lsl.w	r2, r3, lr
   83b04:	1880      	adds	r0, r0, r2
   83b06:	fa43 f305 	asr.w	r3, r3, r5
   83b0a:	4159      	adcs	r1, r3
   83b0c:	e00e      	b.n	83b2c <__adddf3+0xd0>
   83b0e:	f1a5 0520 	sub.w	r5, r5, #32
   83b12:	f10e 0e20 	add.w	lr, lr, #32
   83b16:	2a01      	cmp	r2, #1
   83b18:	fa03 fc0e 	lsl.w	ip, r3, lr
   83b1c:	bf28      	it	cs
   83b1e:	f04c 0c02 	orrcs.w	ip, ip, #2
   83b22:	fa43 f305 	asr.w	r3, r3, r5
   83b26:	18c0      	adds	r0, r0, r3
   83b28:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   83b2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83b30:	d507      	bpl.n	83b42 <__adddf3+0xe6>
   83b32:	f04f 0e00 	mov.w	lr, #0
   83b36:	f1dc 0c00 	rsbs	ip, ip, #0
   83b3a:	eb7e 0000 	sbcs.w	r0, lr, r0
   83b3e:	eb6e 0101 	sbc.w	r1, lr, r1
   83b42:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   83b46:	d31b      	bcc.n	83b80 <__adddf3+0x124>
   83b48:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   83b4c:	d30c      	bcc.n	83b68 <__adddf3+0x10c>
   83b4e:	0849      	lsrs	r1, r1, #1
   83b50:	ea5f 0030 	movs.w	r0, r0, rrx
   83b54:	ea4f 0c3c 	mov.w	ip, ip, rrx
   83b58:	f104 0401 	add.w	r4, r4, #1
   83b5c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   83b60:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   83b64:	f080 809a 	bcs.w	83c9c <__adddf3+0x240>
   83b68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   83b6c:	bf08      	it	eq
   83b6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   83b72:	f150 0000 	adcs.w	r0, r0, #0
   83b76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83b7a:	ea41 0105 	orr.w	r1, r1, r5
   83b7e:	bd30      	pop	{r4, r5, pc}
   83b80:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   83b84:	4140      	adcs	r0, r0
   83b86:	eb41 0101 	adc.w	r1, r1, r1
   83b8a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83b8e:	f1a4 0401 	sub.w	r4, r4, #1
   83b92:	d1e9      	bne.n	83b68 <__adddf3+0x10c>
   83b94:	f091 0f00 	teq	r1, #0
   83b98:	bf04      	itt	eq
   83b9a:	4601      	moveq	r1, r0
   83b9c:	2000      	moveq	r0, #0
   83b9e:	fab1 f381 	clz	r3, r1
   83ba2:	bf08      	it	eq
   83ba4:	3320      	addeq	r3, #32
   83ba6:	f1a3 030b 	sub.w	r3, r3, #11
   83baa:	f1b3 0220 	subs.w	r2, r3, #32
   83bae:	da0c      	bge.n	83bca <__adddf3+0x16e>
   83bb0:	320c      	adds	r2, #12
   83bb2:	dd08      	ble.n	83bc6 <__adddf3+0x16a>
   83bb4:	f102 0c14 	add.w	ip, r2, #20
   83bb8:	f1c2 020c 	rsb	r2, r2, #12
   83bbc:	fa01 f00c 	lsl.w	r0, r1, ip
   83bc0:	fa21 f102 	lsr.w	r1, r1, r2
   83bc4:	e00c      	b.n	83be0 <__adddf3+0x184>
   83bc6:	f102 0214 	add.w	r2, r2, #20
   83bca:	bfd8      	it	le
   83bcc:	f1c2 0c20 	rsble	ip, r2, #32
   83bd0:	fa01 f102 	lsl.w	r1, r1, r2
   83bd4:	fa20 fc0c 	lsr.w	ip, r0, ip
   83bd8:	bfdc      	itt	le
   83bda:	ea41 010c 	orrle.w	r1, r1, ip
   83bde:	4090      	lslle	r0, r2
   83be0:	1ae4      	subs	r4, r4, r3
   83be2:	bfa2      	ittt	ge
   83be4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   83be8:	4329      	orrge	r1, r5
   83bea:	bd30      	popge	{r4, r5, pc}
   83bec:	ea6f 0404 	mvn.w	r4, r4
   83bf0:	3c1f      	subs	r4, #31
   83bf2:	da1c      	bge.n	83c2e <__adddf3+0x1d2>
   83bf4:	340c      	adds	r4, #12
   83bf6:	dc0e      	bgt.n	83c16 <__adddf3+0x1ba>
   83bf8:	f104 0414 	add.w	r4, r4, #20
   83bfc:	f1c4 0220 	rsb	r2, r4, #32
   83c00:	fa20 f004 	lsr.w	r0, r0, r4
   83c04:	fa01 f302 	lsl.w	r3, r1, r2
   83c08:	ea40 0003 	orr.w	r0, r0, r3
   83c0c:	fa21 f304 	lsr.w	r3, r1, r4
   83c10:	ea45 0103 	orr.w	r1, r5, r3
   83c14:	bd30      	pop	{r4, r5, pc}
   83c16:	f1c4 040c 	rsb	r4, r4, #12
   83c1a:	f1c4 0220 	rsb	r2, r4, #32
   83c1e:	fa20 f002 	lsr.w	r0, r0, r2
   83c22:	fa01 f304 	lsl.w	r3, r1, r4
   83c26:	ea40 0003 	orr.w	r0, r0, r3
   83c2a:	4629      	mov	r1, r5
   83c2c:	bd30      	pop	{r4, r5, pc}
   83c2e:	fa21 f004 	lsr.w	r0, r1, r4
   83c32:	4629      	mov	r1, r5
   83c34:	bd30      	pop	{r4, r5, pc}
   83c36:	f094 0f00 	teq	r4, #0
   83c3a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   83c3e:	bf06      	itte	eq
   83c40:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   83c44:	3401      	addeq	r4, #1
   83c46:	3d01      	subne	r5, #1
   83c48:	e74e      	b.n	83ae8 <__adddf3+0x8c>
   83c4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83c4e:	bf18      	it	ne
   83c50:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83c54:	d029      	beq.n	83caa <__adddf3+0x24e>
   83c56:	ea94 0f05 	teq	r4, r5
   83c5a:	bf08      	it	eq
   83c5c:	ea90 0f02 	teqeq	r0, r2
   83c60:	d005      	beq.n	83c6e <__adddf3+0x212>
   83c62:	ea54 0c00 	orrs.w	ip, r4, r0
   83c66:	bf04      	itt	eq
   83c68:	4619      	moveq	r1, r3
   83c6a:	4610      	moveq	r0, r2
   83c6c:	bd30      	pop	{r4, r5, pc}
   83c6e:	ea91 0f03 	teq	r1, r3
   83c72:	bf1e      	ittt	ne
   83c74:	2100      	movne	r1, #0
   83c76:	2000      	movne	r0, #0
   83c78:	bd30      	popne	{r4, r5, pc}
   83c7a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   83c7e:	d105      	bne.n	83c8c <__adddf3+0x230>
   83c80:	0040      	lsls	r0, r0, #1
   83c82:	4149      	adcs	r1, r1
   83c84:	bf28      	it	cs
   83c86:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   83c8a:	bd30      	pop	{r4, r5, pc}
   83c8c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   83c90:	bf3c      	itt	cc
   83c92:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   83c96:	bd30      	popcc	{r4, r5, pc}
   83c98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83c9c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   83ca0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83ca4:	f04f 0000 	mov.w	r0, #0
   83ca8:	bd30      	pop	{r4, r5, pc}
   83caa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83cae:	bf1a      	itte	ne
   83cb0:	4619      	movne	r1, r3
   83cb2:	4610      	movne	r0, r2
   83cb4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   83cb8:	bf1c      	itt	ne
   83cba:	460b      	movne	r3, r1
   83cbc:	4602      	movne	r2, r0
   83cbe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   83cc2:	bf06      	itte	eq
   83cc4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   83cc8:	ea91 0f03 	teqeq	r1, r3
   83ccc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   83cd0:	bd30      	pop	{r4, r5, pc}
   83cd2:	bf00      	nop

00083cd4 <__aeabi_ui2d>:
   83cd4:	f090 0f00 	teq	r0, #0
   83cd8:	bf04      	itt	eq
   83cda:	2100      	moveq	r1, #0
   83cdc:	4770      	bxeq	lr
   83cde:	b530      	push	{r4, r5, lr}
   83ce0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83ce4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83ce8:	f04f 0500 	mov.w	r5, #0
   83cec:	f04f 0100 	mov.w	r1, #0
   83cf0:	e750      	b.n	83b94 <__adddf3+0x138>
   83cf2:	bf00      	nop

00083cf4 <__aeabi_i2d>:
   83cf4:	f090 0f00 	teq	r0, #0
   83cf8:	bf04      	itt	eq
   83cfa:	2100      	moveq	r1, #0
   83cfc:	4770      	bxeq	lr
   83cfe:	b530      	push	{r4, r5, lr}
   83d00:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83d04:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83d08:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   83d0c:	bf48      	it	mi
   83d0e:	4240      	negmi	r0, r0
   83d10:	f04f 0100 	mov.w	r1, #0
   83d14:	e73e      	b.n	83b94 <__adddf3+0x138>
   83d16:	bf00      	nop

00083d18 <__aeabi_f2d>:
   83d18:	0042      	lsls	r2, r0, #1
   83d1a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   83d1e:	ea4f 0131 	mov.w	r1, r1, rrx
   83d22:	ea4f 7002 	mov.w	r0, r2, lsl #28
   83d26:	bf1f      	itttt	ne
   83d28:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   83d2c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   83d30:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   83d34:	4770      	bxne	lr
   83d36:	f092 0f00 	teq	r2, #0
   83d3a:	bf14      	ite	ne
   83d3c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   83d40:	4770      	bxeq	lr
   83d42:	b530      	push	{r4, r5, lr}
   83d44:	f44f 7460 	mov.w	r4, #896	; 0x380
   83d48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83d4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83d50:	e720      	b.n	83b94 <__adddf3+0x138>
   83d52:	bf00      	nop

00083d54 <__aeabi_ul2d>:
   83d54:	ea50 0201 	orrs.w	r2, r0, r1
   83d58:	bf08      	it	eq
   83d5a:	4770      	bxeq	lr
   83d5c:	b530      	push	{r4, r5, lr}
   83d5e:	f04f 0500 	mov.w	r5, #0
   83d62:	e00a      	b.n	83d7a <__aeabi_l2d+0x16>

00083d64 <__aeabi_l2d>:
   83d64:	ea50 0201 	orrs.w	r2, r0, r1
   83d68:	bf08      	it	eq
   83d6a:	4770      	bxeq	lr
   83d6c:	b530      	push	{r4, r5, lr}
   83d6e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   83d72:	d502      	bpl.n	83d7a <__aeabi_l2d+0x16>
   83d74:	4240      	negs	r0, r0
   83d76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83d7a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83d7e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83d82:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   83d86:	f43f aedc 	beq.w	83b42 <__adddf3+0xe6>
   83d8a:	f04f 0203 	mov.w	r2, #3
   83d8e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83d92:	bf18      	it	ne
   83d94:	3203      	addne	r2, #3
   83d96:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83d9a:	bf18      	it	ne
   83d9c:	3203      	addne	r2, #3
   83d9e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   83da2:	f1c2 0320 	rsb	r3, r2, #32
   83da6:	fa00 fc03 	lsl.w	ip, r0, r3
   83daa:	fa20 f002 	lsr.w	r0, r0, r2
   83dae:	fa01 fe03 	lsl.w	lr, r1, r3
   83db2:	ea40 000e 	orr.w	r0, r0, lr
   83db6:	fa21 f102 	lsr.w	r1, r1, r2
   83dba:	4414      	add	r4, r2
   83dbc:	e6c1      	b.n	83b42 <__adddf3+0xe6>
   83dbe:	bf00      	nop

00083dc0 <__aeabi_dmul>:
   83dc0:	b570      	push	{r4, r5, r6, lr}
   83dc2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83dc6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   83dca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   83dce:	bf1d      	ittte	ne
   83dd0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   83dd4:	ea94 0f0c 	teqne	r4, ip
   83dd8:	ea95 0f0c 	teqne	r5, ip
   83ddc:	f000 f8de 	bleq	83f9c <__aeabi_dmul+0x1dc>
   83de0:	442c      	add	r4, r5
   83de2:	ea81 0603 	eor.w	r6, r1, r3
   83de6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   83dea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   83dee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   83df2:	bf18      	it	ne
   83df4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   83df8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83dfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83e00:	d038      	beq.n	83e74 <__aeabi_dmul+0xb4>
   83e02:	fba0 ce02 	umull	ip, lr, r0, r2
   83e06:	f04f 0500 	mov.w	r5, #0
   83e0a:	fbe1 e502 	umlal	lr, r5, r1, r2
   83e0e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   83e12:	fbe0 e503 	umlal	lr, r5, r0, r3
   83e16:	f04f 0600 	mov.w	r6, #0
   83e1a:	fbe1 5603 	umlal	r5, r6, r1, r3
   83e1e:	f09c 0f00 	teq	ip, #0
   83e22:	bf18      	it	ne
   83e24:	f04e 0e01 	orrne.w	lr, lr, #1
   83e28:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   83e2c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   83e30:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   83e34:	d204      	bcs.n	83e40 <__aeabi_dmul+0x80>
   83e36:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   83e3a:	416d      	adcs	r5, r5
   83e3c:	eb46 0606 	adc.w	r6, r6, r6
   83e40:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   83e44:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   83e48:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   83e4c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   83e50:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   83e54:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83e58:	bf88      	it	hi
   83e5a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   83e5e:	d81e      	bhi.n	83e9e <__aeabi_dmul+0xde>
   83e60:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   83e64:	bf08      	it	eq
   83e66:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   83e6a:	f150 0000 	adcs.w	r0, r0, #0
   83e6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83e72:	bd70      	pop	{r4, r5, r6, pc}
   83e74:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   83e78:	ea46 0101 	orr.w	r1, r6, r1
   83e7c:	ea40 0002 	orr.w	r0, r0, r2
   83e80:	ea81 0103 	eor.w	r1, r1, r3
   83e84:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   83e88:	bfc2      	ittt	gt
   83e8a:	ebd4 050c 	rsbsgt	r5, r4, ip
   83e8e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   83e92:	bd70      	popgt	{r4, r5, r6, pc}
   83e94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83e98:	f04f 0e00 	mov.w	lr, #0
   83e9c:	3c01      	subs	r4, #1
   83e9e:	f300 80ab 	bgt.w	83ff8 <__aeabi_dmul+0x238>
   83ea2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   83ea6:	bfde      	ittt	le
   83ea8:	2000      	movle	r0, #0
   83eaa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   83eae:	bd70      	pople	{r4, r5, r6, pc}
   83eb0:	f1c4 0400 	rsb	r4, r4, #0
   83eb4:	3c20      	subs	r4, #32
   83eb6:	da35      	bge.n	83f24 <__aeabi_dmul+0x164>
   83eb8:	340c      	adds	r4, #12
   83eba:	dc1b      	bgt.n	83ef4 <__aeabi_dmul+0x134>
   83ebc:	f104 0414 	add.w	r4, r4, #20
   83ec0:	f1c4 0520 	rsb	r5, r4, #32
   83ec4:	fa00 f305 	lsl.w	r3, r0, r5
   83ec8:	fa20 f004 	lsr.w	r0, r0, r4
   83ecc:	fa01 f205 	lsl.w	r2, r1, r5
   83ed0:	ea40 0002 	orr.w	r0, r0, r2
   83ed4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   83ed8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83edc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   83ee0:	fa21 f604 	lsr.w	r6, r1, r4
   83ee4:	eb42 0106 	adc.w	r1, r2, r6
   83ee8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83eec:	bf08      	it	eq
   83eee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83ef2:	bd70      	pop	{r4, r5, r6, pc}
   83ef4:	f1c4 040c 	rsb	r4, r4, #12
   83ef8:	f1c4 0520 	rsb	r5, r4, #32
   83efc:	fa00 f304 	lsl.w	r3, r0, r4
   83f00:	fa20 f005 	lsr.w	r0, r0, r5
   83f04:	fa01 f204 	lsl.w	r2, r1, r4
   83f08:	ea40 0002 	orr.w	r0, r0, r2
   83f0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83f10:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   83f14:	f141 0100 	adc.w	r1, r1, #0
   83f18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83f1c:	bf08      	it	eq
   83f1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83f22:	bd70      	pop	{r4, r5, r6, pc}
   83f24:	f1c4 0520 	rsb	r5, r4, #32
   83f28:	fa00 f205 	lsl.w	r2, r0, r5
   83f2c:	ea4e 0e02 	orr.w	lr, lr, r2
   83f30:	fa20 f304 	lsr.w	r3, r0, r4
   83f34:	fa01 f205 	lsl.w	r2, r1, r5
   83f38:	ea43 0302 	orr.w	r3, r3, r2
   83f3c:	fa21 f004 	lsr.w	r0, r1, r4
   83f40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83f44:	fa21 f204 	lsr.w	r2, r1, r4
   83f48:	ea20 0002 	bic.w	r0, r0, r2
   83f4c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   83f50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83f54:	bf08      	it	eq
   83f56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83f5a:	bd70      	pop	{r4, r5, r6, pc}
   83f5c:	f094 0f00 	teq	r4, #0
   83f60:	d10f      	bne.n	83f82 <__aeabi_dmul+0x1c2>
   83f62:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   83f66:	0040      	lsls	r0, r0, #1
   83f68:	eb41 0101 	adc.w	r1, r1, r1
   83f6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83f70:	bf08      	it	eq
   83f72:	3c01      	subeq	r4, #1
   83f74:	d0f7      	beq.n	83f66 <__aeabi_dmul+0x1a6>
   83f76:	ea41 0106 	orr.w	r1, r1, r6
   83f7a:	f095 0f00 	teq	r5, #0
   83f7e:	bf18      	it	ne
   83f80:	4770      	bxne	lr
   83f82:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   83f86:	0052      	lsls	r2, r2, #1
   83f88:	eb43 0303 	adc.w	r3, r3, r3
   83f8c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   83f90:	bf08      	it	eq
   83f92:	3d01      	subeq	r5, #1
   83f94:	d0f7      	beq.n	83f86 <__aeabi_dmul+0x1c6>
   83f96:	ea43 0306 	orr.w	r3, r3, r6
   83f9a:	4770      	bx	lr
   83f9c:	ea94 0f0c 	teq	r4, ip
   83fa0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   83fa4:	bf18      	it	ne
   83fa6:	ea95 0f0c 	teqne	r5, ip
   83faa:	d00c      	beq.n	83fc6 <__aeabi_dmul+0x206>
   83fac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83fb0:	bf18      	it	ne
   83fb2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83fb6:	d1d1      	bne.n	83f5c <__aeabi_dmul+0x19c>
   83fb8:	ea81 0103 	eor.w	r1, r1, r3
   83fbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83fc0:	f04f 0000 	mov.w	r0, #0
   83fc4:	bd70      	pop	{r4, r5, r6, pc}
   83fc6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83fca:	bf06      	itte	eq
   83fcc:	4610      	moveq	r0, r2
   83fce:	4619      	moveq	r1, r3
   83fd0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83fd4:	d019      	beq.n	8400a <__aeabi_dmul+0x24a>
   83fd6:	ea94 0f0c 	teq	r4, ip
   83fda:	d102      	bne.n	83fe2 <__aeabi_dmul+0x222>
   83fdc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   83fe0:	d113      	bne.n	8400a <__aeabi_dmul+0x24a>
   83fe2:	ea95 0f0c 	teq	r5, ip
   83fe6:	d105      	bne.n	83ff4 <__aeabi_dmul+0x234>
   83fe8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   83fec:	bf1c      	itt	ne
   83fee:	4610      	movne	r0, r2
   83ff0:	4619      	movne	r1, r3
   83ff2:	d10a      	bne.n	8400a <__aeabi_dmul+0x24a>
   83ff4:	ea81 0103 	eor.w	r1, r1, r3
   83ff8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83ffc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   84000:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   84004:	f04f 0000 	mov.w	r0, #0
   84008:	bd70      	pop	{r4, r5, r6, pc}
   8400a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8400e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   84012:	bd70      	pop	{r4, r5, r6, pc}

00084014 <__aeabi_ddiv>:
   84014:	b570      	push	{r4, r5, r6, lr}
   84016:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8401a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8401e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   84022:	bf1d      	ittte	ne
   84024:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   84028:	ea94 0f0c 	teqne	r4, ip
   8402c:	ea95 0f0c 	teqne	r5, ip
   84030:	f000 f8a7 	bleq	84182 <__aeabi_ddiv+0x16e>
   84034:	eba4 0405 	sub.w	r4, r4, r5
   84038:	ea81 0e03 	eor.w	lr, r1, r3
   8403c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   84040:	ea4f 3101 	mov.w	r1, r1, lsl #12
   84044:	f000 8088 	beq.w	84158 <__aeabi_ddiv+0x144>
   84048:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8404c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   84050:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   84054:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   84058:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8405c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   84060:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   84064:	ea4f 2600 	mov.w	r6, r0, lsl #8
   84068:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8406c:	429d      	cmp	r5, r3
   8406e:	bf08      	it	eq
   84070:	4296      	cmpeq	r6, r2
   84072:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   84076:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8407a:	d202      	bcs.n	84082 <__aeabi_ddiv+0x6e>
   8407c:	085b      	lsrs	r3, r3, #1
   8407e:	ea4f 0232 	mov.w	r2, r2, rrx
   84082:	1ab6      	subs	r6, r6, r2
   84084:	eb65 0503 	sbc.w	r5, r5, r3
   84088:	085b      	lsrs	r3, r3, #1
   8408a:	ea4f 0232 	mov.w	r2, r2, rrx
   8408e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   84092:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   84096:	ebb6 0e02 	subs.w	lr, r6, r2
   8409a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8409e:	bf22      	ittt	cs
   840a0:	1ab6      	subcs	r6, r6, r2
   840a2:	4675      	movcs	r5, lr
   840a4:	ea40 000c 	orrcs.w	r0, r0, ip
   840a8:	085b      	lsrs	r3, r3, #1
   840aa:	ea4f 0232 	mov.w	r2, r2, rrx
   840ae:	ebb6 0e02 	subs.w	lr, r6, r2
   840b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   840b6:	bf22      	ittt	cs
   840b8:	1ab6      	subcs	r6, r6, r2
   840ba:	4675      	movcs	r5, lr
   840bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   840c0:	085b      	lsrs	r3, r3, #1
   840c2:	ea4f 0232 	mov.w	r2, r2, rrx
   840c6:	ebb6 0e02 	subs.w	lr, r6, r2
   840ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   840ce:	bf22      	ittt	cs
   840d0:	1ab6      	subcs	r6, r6, r2
   840d2:	4675      	movcs	r5, lr
   840d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   840d8:	085b      	lsrs	r3, r3, #1
   840da:	ea4f 0232 	mov.w	r2, r2, rrx
   840de:	ebb6 0e02 	subs.w	lr, r6, r2
   840e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   840e6:	bf22      	ittt	cs
   840e8:	1ab6      	subcs	r6, r6, r2
   840ea:	4675      	movcs	r5, lr
   840ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   840f0:	ea55 0e06 	orrs.w	lr, r5, r6
   840f4:	d018      	beq.n	84128 <__aeabi_ddiv+0x114>
   840f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   840fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   840fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
   84102:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   84106:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8410a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8410e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   84112:	d1c0      	bne.n	84096 <__aeabi_ddiv+0x82>
   84114:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   84118:	d10b      	bne.n	84132 <__aeabi_ddiv+0x11e>
   8411a:	ea41 0100 	orr.w	r1, r1, r0
   8411e:	f04f 0000 	mov.w	r0, #0
   84122:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   84126:	e7b6      	b.n	84096 <__aeabi_ddiv+0x82>
   84128:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8412c:	bf04      	itt	eq
   8412e:	4301      	orreq	r1, r0
   84130:	2000      	moveq	r0, #0
   84132:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   84136:	bf88      	it	hi
   84138:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8413c:	f63f aeaf 	bhi.w	83e9e <__aeabi_dmul+0xde>
   84140:	ebb5 0c03 	subs.w	ip, r5, r3
   84144:	bf04      	itt	eq
   84146:	ebb6 0c02 	subseq.w	ip, r6, r2
   8414a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8414e:	f150 0000 	adcs.w	r0, r0, #0
   84152:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84156:	bd70      	pop	{r4, r5, r6, pc}
   84158:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8415c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   84160:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   84164:	bfc2      	ittt	gt
   84166:	ebd4 050c 	rsbsgt	r5, r4, ip
   8416a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8416e:	bd70      	popgt	{r4, r5, r6, pc}
   84170:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   84174:	f04f 0e00 	mov.w	lr, #0
   84178:	3c01      	subs	r4, #1
   8417a:	e690      	b.n	83e9e <__aeabi_dmul+0xde>
   8417c:	ea45 0e06 	orr.w	lr, r5, r6
   84180:	e68d      	b.n	83e9e <__aeabi_dmul+0xde>
   84182:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   84186:	ea94 0f0c 	teq	r4, ip
   8418a:	bf08      	it	eq
   8418c:	ea95 0f0c 	teqeq	r5, ip
   84190:	f43f af3b 	beq.w	8400a <__aeabi_dmul+0x24a>
   84194:	ea94 0f0c 	teq	r4, ip
   84198:	d10a      	bne.n	841b0 <__aeabi_ddiv+0x19c>
   8419a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8419e:	f47f af34 	bne.w	8400a <__aeabi_dmul+0x24a>
   841a2:	ea95 0f0c 	teq	r5, ip
   841a6:	f47f af25 	bne.w	83ff4 <__aeabi_dmul+0x234>
   841aa:	4610      	mov	r0, r2
   841ac:	4619      	mov	r1, r3
   841ae:	e72c      	b.n	8400a <__aeabi_dmul+0x24a>
   841b0:	ea95 0f0c 	teq	r5, ip
   841b4:	d106      	bne.n	841c4 <__aeabi_ddiv+0x1b0>
   841b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   841ba:	f43f aefd 	beq.w	83fb8 <__aeabi_dmul+0x1f8>
   841be:	4610      	mov	r0, r2
   841c0:	4619      	mov	r1, r3
   841c2:	e722      	b.n	8400a <__aeabi_dmul+0x24a>
   841c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   841c8:	bf18      	it	ne
   841ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   841ce:	f47f aec5 	bne.w	83f5c <__aeabi_dmul+0x19c>
   841d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   841d6:	f47f af0d 	bne.w	83ff4 <__aeabi_dmul+0x234>
   841da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   841de:	f47f aeeb 	bne.w	83fb8 <__aeabi_dmul+0x1f8>
   841e2:	e712      	b.n	8400a <__aeabi_dmul+0x24a>

000841e4 <__gedf2>:
   841e4:	f04f 3cff 	mov.w	ip, #4294967295
   841e8:	e006      	b.n	841f8 <__cmpdf2+0x4>
   841ea:	bf00      	nop

000841ec <__ledf2>:
   841ec:	f04f 0c01 	mov.w	ip, #1
   841f0:	e002      	b.n	841f8 <__cmpdf2+0x4>
   841f2:	bf00      	nop

000841f4 <__cmpdf2>:
   841f4:	f04f 0c01 	mov.w	ip, #1
   841f8:	f84d cd04 	str.w	ip, [sp, #-4]!
   841fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   84200:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   84204:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   84208:	bf18      	it	ne
   8420a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8420e:	d01b      	beq.n	84248 <__cmpdf2+0x54>
   84210:	b001      	add	sp, #4
   84212:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   84216:	bf0c      	ite	eq
   84218:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8421c:	ea91 0f03 	teqne	r1, r3
   84220:	bf02      	ittt	eq
   84222:	ea90 0f02 	teqeq	r0, r2
   84226:	2000      	moveq	r0, #0
   84228:	4770      	bxeq	lr
   8422a:	f110 0f00 	cmn.w	r0, #0
   8422e:	ea91 0f03 	teq	r1, r3
   84232:	bf58      	it	pl
   84234:	4299      	cmppl	r1, r3
   84236:	bf08      	it	eq
   84238:	4290      	cmpeq	r0, r2
   8423a:	bf2c      	ite	cs
   8423c:	17d8      	asrcs	r0, r3, #31
   8423e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   84242:	f040 0001 	orr.w	r0, r0, #1
   84246:	4770      	bx	lr
   84248:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8424c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   84250:	d102      	bne.n	84258 <__cmpdf2+0x64>
   84252:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   84256:	d107      	bne.n	84268 <__cmpdf2+0x74>
   84258:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8425c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   84260:	d1d6      	bne.n	84210 <__cmpdf2+0x1c>
   84262:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   84266:	d0d3      	beq.n	84210 <__cmpdf2+0x1c>
   84268:	f85d 0b04 	ldr.w	r0, [sp], #4
   8426c:	4770      	bx	lr
   8426e:	bf00      	nop

00084270 <__aeabi_cdrcmple>:
   84270:	4684      	mov	ip, r0
   84272:	4610      	mov	r0, r2
   84274:	4662      	mov	r2, ip
   84276:	468c      	mov	ip, r1
   84278:	4619      	mov	r1, r3
   8427a:	4663      	mov	r3, ip
   8427c:	e000      	b.n	84280 <__aeabi_cdcmpeq>
   8427e:	bf00      	nop

00084280 <__aeabi_cdcmpeq>:
   84280:	b501      	push	{r0, lr}
   84282:	f7ff ffb7 	bl	841f4 <__cmpdf2>
   84286:	2800      	cmp	r0, #0
   84288:	bf48      	it	mi
   8428a:	f110 0f00 	cmnmi.w	r0, #0
   8428e:	bd01      	pop	{r0, pc}

00084290 <__aeabi_dcmpeq>:
   84290:	f84d ed08 	str.w	lr, [sp, #-8]!
   84294:	f7ff fff4 	bl	84280 <__aeabi_cdcmpeq>
   84298:	bf0c      	ite	eq
   8429a:	2001      	moveq	r0, #1
   8429c:	2000      	movne	r0, #0
   8429e:	f85d fb08 	ldr.w	pc, [sp], #8
   842a2:	bf00      	nop

000842a4 <__aeabi_dcmplt>:
   842a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   842a8:	f7ff ffea 	bl	84280 <__aeabi_cdcmpeq>
   842ac:	bf34      	ite	cc
   842ae:	2001      	movcc	r0, #1
   842b0:	2000      	movcs	r0, #0
   842b2:	f85d fb08 	ldr.w	pc, [sp], #8
   842b6:	bf00      	nop

000842b8 <__aeabi_dcmple>:
   842b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   842bc:	f7ff ffe0 	bl	84280 <__aeabi_cdcmpeq>
   842c0:	bf94      	ite	ls
   842c2:	2001      	movls	r0, #1
   842c4:	2000      	movhi	r0, #0
   842c6:	f85d fb08 	ldr.w	pc, [sp], #8
   842ca:	bf00      	nop

000842cc <__aeabi_dcmpge>:
   842cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   842d0:	f7ff ffce 	bl	84270 <__aeabi_cdrcmple>
   842d4:	bf94      	ite	ls
   842d6:	2001      	movls	r0, #1
   842d8:	2000      	movhi	r0, #0
   842da:	f85d fb08 	ldr.w	pc, [sp], #8
   842de:	bf00      	nop

000842e0 <__aeabi_dcmpgt>:
   842e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   842e4:	f7ff ffc4 	bl	84270 <__aeabi_cdrcmple>
   842e8:	bf34      	ite	cc
   842ea:	2001      	movcc	r0, #1
   842ec:	2000      	movcs	r0, #0
   842ee:	f85d fb08 	ldr.w	pc, [sp], #8
   842f2:	bf00      	nop

000842f4 <__aeabi_d2iz>:
   842f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   842f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   842fc:	d215      	bcs.n	8432a <__aeabi_d2iz+0x36>
   842fe:	d511      	bpl.n	84324 <__aeabi_d2iz+0x30>
   84300:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   84304:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   84308:	d912      	bls.n	84330 <__aeabi_d2iz+0x3c>
   8430a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8430e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   84312:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   84316:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8431a:	fa23 f002 	lsr.w	r0, r3, r2
   8431e:	bf18      	it	ne
   84320:	4240      	negne	r0, r0
   84322:	4770      	bx	lr
   84324:	f04f 0000 	mov.w	r0, #0
   84328:	4770      	bx	lr
   8432a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8432e:	d105      	bne.n	8433c <__aeabi_d2iz+0x48>
   84330:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   84334:	bf08      	it	eq
   84336:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8433a:	4770      	bx	lr
   8433c:	f04f 0000 	mov.w	r0, #0
   84340:	4770      	bx	lr
   84342:	bf00      	nop

00084344 <__aeabi_d2uiz>:
   84344:	004a      	lsls	r2, r1, #1
   84346:	d211      	bcs.n	8436c <__aeabi_d2uiz+0x28>
   84348:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8434c:	d211      	bcs.n	84372 <__aeabi_d2uiz+0x2e>
   8434e:	d50d      	bpl.n	8436c <__aeabi_d2uiz+0x28>
   84350:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   84354:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   84358:	d40e      	bmi.n	84378 <__aeabi_d2uiz+0x34>
   8435a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8435e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   84362:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   84366:	fa23 f002 	lsr.w	r0, r3, r2
   8436a:	4770      	bx	lr
   8436c:	f04f 0000 	mov.w	r0, #0
   84370:	4770      	bx	lr
   84372:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   84376:	d102      	bne.n	8437e <__aeabi_d2uiz+0x3a>
   84378:	f04f 30ff 	mov.w	r0, #4294967295
   8437c:	4770      	bx	lr
   8437e:	f04f 0000 	mov.w	r0, #0
   84382:	4770      	bx	lr

00084384 <__aeabi_frsub>:
   84384:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   84388:	e002      	b.n	84390 <__addsf3>
   8438a:	bf00      	nop

0008438c <__aeabi_fsub>:
   8438c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00084390 <__addsf3>:
   84390:	0042      	lsls	r2, r0, #1
   84392:	bf1f      	itttt	ne
   84394:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   84398:	ea92 0f03 	teqne	r2, r3
   8439c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   843a0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   843a4:	d06a      	beq.n	8447c <__addsf3+0xec>
   843a6:	ea4f 6212 	mov.w	r2, r2, lsr #24
   843aa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   843ae:	bfc1      	itttt	gt
   843b0:	18d2      	addgt	r2, r2, r3
   843b2:	4041      	eorgt	r1, r0
   843b4:	4048      	eorgt	r0, r1
   843b6:	4041      	eorgt	r1, r0
   843b8:	bfb8      	it	lt
   843ba:	425b      	neglt	r3, r3
   843bc:	2b19      	cmp	r3, #25
   843be:	bf88      	it	hi
   843c0:	4770      	bxhi	lr
   843c2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   843c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   843ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   843ce:	bf18      	it	ne
   843d0:	4240      	negne	r0, r0
   843d2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   843d6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   843da:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   843de:	bf18      	it	ne
   843e0:	4249      	negne	r1, r1
   843e2:	ea92 0f03 	teq	r2, r3
   843e6:	d03f      	beq.n	84468 <__addsf3+0xd8>
   843e8:	f1a2 0201 	sub.w	r2, r2, #1
   843ec:	fa41 fc03 	asr.w	ip, r1, r3
   843f0:	eb10 000c 	adds.w	r0, r0, ip
   843f4:	f1c3 0320 	rsb	r3, r3, #32
   843f8:	fa01 f103 	lsl.w	r1, r1, r3
   843fc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   84400:	d502      	bpl.n	84408 <__addsf3+0x78>
   84402:	4249      	negs	r1, r1
   84404:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   84408:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   8440c:	d313      	bcc.n	84436 <__addsf3+0xa6>
   8440e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   84412:	d306      	bcc.n	84422 <__addsf3+0x92>
   84414:	0840      	lsrs	r0, r0, #1
   84416:	ea4f 0131 	mov.w	r1, r1, rrx
   8441a:	f102 0201 	add.w	r2, r2, #1
   8441e:	2afe      	cmp	r2, #254	; 0xfe
   84420:	d251      	bcs.n	844c6 <__addsf3+0x136>
   84422:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   84426:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8442a:	bf08      	it	eq
   8442c:	f020 0001 	biceq.w	r0, r0, #1
   84430:	ea40 0003 	orr.w	r0, r0, r3
   84434:	4770      	bx	lr
   84436:	0049      	lsls	r1, r1, #1
   84438:	eb40 0000 	adc.w	r0, r0, r0
   8443c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   84440:	f1a2 0201 	sub.w	r2, r2, #1
   84444:	d1ed      	bne.n	84422 <__addsf3+0x92>
   84446:	fab0 fc80 	clz	ip, r0
   8444a:	f1ac 0c08 	sub.w	ip, ip, #8
   8444e:	ebb2 020c 	subs.w	r2, r2, ip
   84452:	fa00 f00c 	lsl.w	r0, r0, ip
   84456:	bfaa      	itet	ge
   84458:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   8445c:	4252      	neglt	r2, r2
   8445e:	4318      	orrge	r0, r3
   84460:	bfbc      	itt	lt
   84462:	40d0      	lsrlt	r0, r2
   84464:	4318      	orrlt	r0, r3
   84466:	4770      	bx	lr
   84468:	f092 0f00 	teq	r2, #0
   8446c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   84470:	bf06      	itte	eq
   84472:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   84476:	3201      	addeq	r2, #1
   84478:	3b01      	subne	r3, #1
   8447a:	e7b5      	b.n	843e8 <__addsf3+0x58>
   8447c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   84480:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   84484:	bf18      	it	ne
   84486:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8448a:	d021      	beq.n	844d0 <__addsf3+0x140>
   8448c:	ea92 0f03 	teq	r2, r3
   84490:	d004      	beq.n	8449c <__addsf3+0x10c>
   84492:	f092 0f00 	teq	r2, #0
   84496:	bf08      	it	eq
   84498:	4608      	moveq	r0, r1
   8449a:	4770      	bx	lr
   8449c:	ea90 0f01 	teq	r0, r1
   844a0:	bf1c      	itt	ne
   844a2:	2000      	movne	r0, #0
   844a4:	4770      	bxne	lr
   844a6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   844aa:	d104      	bne.n	844b6 <__addsf3+0x126>
   844ac:	0040      	lsls	r0, r0, #1
   844ae:	bf28      	it	cs
   844b0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   844b4:	4770      	bx	lr
   844b6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   844ba:	bf3c      	itt	cc
   844bc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   844c0:	4770      	bxcc	lr
   844c2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   844c6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   844ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   844ce:	4770      	bx	lr
   844d0:	ea7f 6222 	mvns.w	r2, r2, asr #24
   844d4:	bf16      	itet	ne
   844d6:	4608      	movne	r0, r1
   844d8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   844dc:	4601      	movne	r1, r0
   844de:	0242      	lsls	r2, r0, #9
   844e0:	bf06      	itte	eq
   844e2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   844e6:	ea90 0f01 	teqeq	r0, r1
   844ea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   844ee:	4770      	bx	lr

000844f0 <__aeabi_ui2f>:
   844f0:	f04f 0300 	mov.w	r3, #0
   844f4:	e004      	b.n	84500 <__aeabi_i2f+0x8>
   844f6:	bf00      	nop

000844f8 <__aeabi_i2f>:
   844f8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   844fc:	bf48      	it	mi
   844fe:	4240      	negmi	r0, r0
   84500:	ea5f 0c00 	movs.w	ip, r0
   84504:	bf08      	it	eq
   84506:	4770      	bxeq	lr
   84508:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   8450c:	4601      	mov	r1, r0
   8450e:	f04f 0000 	mov.w	r0, #0
   84512:	e01c      	b.n	8454e <__aeabi_l2f+0x2a>

00084514 <__aeabi_ul2f>:
   84514:	ea50 0201 	orrs.w	r2, r0, r1
   84518:	bf08      	it	eq
   8451a:	4770      	bxeq	lr
   8451c:	f04f 0300 	mov.w	r3, #0
   84520:	e00a      	b.n	84538 <__aeabi_l2f+0x14>
   84522:	bf00      	nop

00084524 <__aeabi_l2f>:
   84524:	ea50 0201 	orrs.w	r2, r0, r1
   84528:	bf08      	it	eq
   8452a:	4770      	bxeq	lr
   8452c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   84530:	d502      	bpl.n	84538 <__aeabi_l2f+0x14>
   84532:	4240      	negs	r0, r0
   84534:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84538:	ea5f 0c01 	movs.w	ip, r1
   8453c:	bf02      	ittt	eq
   8453e:	4684      	moveq	ip, r0
   84540:	4601      	moveq	r1, r0
   84542:	2000      	moveq	r0, #0
   84544:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   84548:	bf08      	it	eq
   8454a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   8454e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   84552:	fabc f28c 	clz	r2, ip
   84556:	3a08      	subs	r2, #8
   84558:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   8455c:	db10      	blt.n	84580 <__aeabi_l2f+0x5c>
   8455e:	fa01 fc02 	lsl.w	ip, r1, r2
   84562:	4463      	add	r3, ip
   84564:	fa00 fc02 	lsl.w	ip, r0, r2
   84568:	f1c2 0220 	rsb	r2, r2, #32
   8456c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   84570:	fa20 f202 	lsr.w	r2, r0, r2
   84574:	eb43 0002 	adc.w	r0, r3, r2
   84578:	bf08      	it	eq
   8457a:	f020 0001 	biceq.w	r0, r0, #1
   8457e:	4770      	bx	lr
   84580:	f102 0220 	add.w	r2, r2, #32
   84584:	fa01 fc02 	lsl.w	ip, r1, r2
   84588:	f1c2 0220 	rsb	r2, r2, #32
   8458c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   84590:	fa21 f202 	lsr.w	r2, r1, r2
   84594:	eb43 0002 	adc.w	r0, r3, r2
   84598:	bf08      	it	eq
   8459a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   8459e:	4770      	bx	lr

000845a0 <__gesf2>:
   845a0:	f04f 3cff 	mov.w	ip, #4294967295
   845a4:	e006      	b.n	845b4 <__cmpsf2+0x4>
   845a6:	bf00      	nop

000845a8 <__lesf2>:
   845a8:	f04f 0c01 	mov.w	ip, #1
   845ac:	e002      	b.n	845b4 <__cmpsf2+0x4>
   845ae:	bf00      	nop

000845b0 <__cmpsf2>:
   845b0:	f04f 0c01 	mov.w	ip, #1
   845b4:	f84d cd04 	str.w	ip, [sp, #-4]!
   845b8:	ea4f 0240 	mov.w	r2, r0, lsl #1
   845bc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   845c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   845c4:	bf18      	it	ne
   845c6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   845ca:	d011      	beq.n	845f0 <__cmpsf2+0x40>
   845cc:	b001      	add	sp, #4
   845ce:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   845d2:	bf18      	it	ne
   845d4:	ea90 0f01 	teqne	r0, r1
   845d8:	bf58      	it	pl
   845da:	ebb2 0003 	subspl.w	r0, r2, r3
   845de:	bf88      	it	hi
   845e0:	17c8      	asrhi	r0, r1, #31
   845e2:	bf38      	it	cc
   845e4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   845e8:	bf18      	it	ne
   845ea:	f040 0001 	orrne.w	r0, r0, #1
   845ee:	4770      	bx	lr
   845f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   845f4:	d102      	bne.n	845fc <__cmpsf2+0x4c>
   845f6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   845fa:	d105      	bne.n	84608 <__cmpsf2+0x58>
   845fc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   84600:	d1e4      	bne.n	845cc <__cmpsf2+0x1c>
   84602:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   84606:	d0e1      	beq.n	845cc <__cmpsf2+0x1c>
   84608:	f85d 0b04 	ldr.w	r0, [sp], #4
   8460c:	4770      	bx	lr
   8460e:	bf00      	nop

00084610 <__aeabi_cfrcmple>:
   84610:	4684      	mov	ip, r0
   84612:	4608      	mov	r0, r1
   84614:	4661      	mov	r1, ip
   84616:	e7ff      	b.n	84618 <__aeabi_cfcmpeq>

00084618 <__aeabi_cfcmpeq>:
   84618:	b50f      	push	{r0, r1, r2, r3, lr}
   8461a:	f7ff ffc9 	bl	845b0 <__cmpsf2>
   8461e:	2800      	cmp	r0, #0
   84620:	bf48      	it	mi
   84622:	f110 0f00 	cmnmi.w	r0, #0
   84626:	bd0f      	pop	{r0, r1, r2, r3, pc}

00084628 <__aeabi_fcmpeq>:
   84628:	f84d ed08 	str.w	lr, [sp, #-8]!
   8462c:	f7ff fff4 	bl	84618 <__aeabi_cfcmpeq>
   84630:	bf0c      	ite	eq
   84632:	2001      	moveq	r0, #1
   84634:	2000      	movne	r0, #0
   84636:	f85d fb08 	ldr.w	pc, [sp], #8
   8463a:	bf00      	nop

0008463c <__aeabi_fcmplt>:
   8463c:	f84d ed08 	str.w	lr, [sp, #-8]!
   84640:	f7ff ffea 	bl	84618 <__aeabi_cfcmpeq>
   84644:	bf34      	ite	cc
   84646:	2001      	movcc	r0, #1
   84648:	2000      	movcs	r0, #0
   8464a:	f85d fb08 	ldr.w	pc, [sp], #8
   8464e:	bf00      	nop

00084650 <__aeabi_fcmple>:
   84650:	f84d ed08 	str.w	lr, [sp, #-8]!
   84654:	f7ff ffe0 	bl	84618 <__aeabi_cfcmpeq>
   84658:	bf94      	ite	ls
   8465a:	2001      	movls	r0, #1
   8465c:	2000      	movhi	r0, #0
   8465e:	f85d fb08 	ldr.w	pc, [sp], #8
   84662:	bf00      	nop

00084664 <__aeabi_fcmpge>:
   84664:	f84d ed08 	str.w	lr, [sp, #-8]!
   84668:	f7ff ffd2 	bl	84610 <__aeabi_cfrcmple>
   8466c:	bf94      	ite	ls
   8466e:	2001      	movls	r0, #1
   84670:	2000      	movhi	r0, #0
   84672:	f85d fb08 	ldr.w	pc, [sp], #8
   84676:	bf00      	nop

00084678 <__aeabi_fcmpgt>:
   84678:	f84d ed08 	str.w	lr, [sp, #-8]!
   8467c:	f7ff ffc8 	bl	84610 <__aeabi_cfrcmple>
   84680:	bf34      	ite	cc
   84682:	2001      	movcc	r0, #1
   84684:	2000      	movcs	r0, #0
   84686:	f85d fb08 	ldr.w	pc, [sp], #8
   8468a:	bf00      	nop

0008468c <__errno>:
   8468c:	4b01      	ldr	r3, [pc, #4]	; (84694 <__errno+0x8>)
   8468e:	6818      	ldr	r0, [r3, #0]
   84690:	4770      	bx	lr
   84692:	bf00      	nop
   84694:	200705e0 	.word	0x200705e0

00084698 <__libc_init_array>:
   84698:	b570      	push	{r4, r5, r6, lr}
   8469a:	4e0f      	ldr	r6, [pc, #60]	; (846d8 <__libc_init_array+0x40>)
   8469c:	4d0f      	ldr	r5, [pc, #60]	; (846dc <__libc_init_array+0x44>)
   8469e:	1b76      	subs	r6, r6, r5
   846a0:	10b6      	asrs	r6, r6, #2
   846a2:	bf18      	it	ne
   846a4:	2400      	movne	r4, #0
   846a6:	d005      	beq.n	846b4 <__libc_init_array+0x1c>
   846a8:	3401      	adds	r4, #1
   846aa:	f855 3b04 	ldr.w	r3, [r5], #4
   846ae:	4798      	blx	r3
   846b0:	42a6      	cmp	r6, r4
   846b2:	d1f9      	bne.n	846a8 <__libc_init_array+0x10>
   846b4:	4e0a      	ldr	r6, [pc, #40]	; (846e0 <__libc_init_array+0x48>)
   846b6:	4d0b      	ldr	r5, [pc, #44]	; (846e4 <__libc_init_array+0x4c>)
   846b8:	f003 f8b2 	bl	87820 <_init>
   846bc:	1b76      	subs	r6, r6, r5
   846be:	10b6      	asrs	r6, r6, #2
   846c0:	bf18      	it	ne
   846c2:	2400      	movne	r4, #0
   846c4:	d006      	beq.n	846d4 <__libc_init_array+0x3c>
   846c6:	3401      	adds	r4, #1
   846c8:	f855 3b04 	ldr.w	r3, [r5], #4
   846cc:	4798      	blx	r3
   846ce:	42a6      	cmp	r6, r4
   846d0:	d1f9      	bne.n	846c6 <__libc_init_array+0x2e>
   846d2:	bd70      	pop	{r4, r5, r6, pc}
   846d4:	bd70      	pop	{r4, r5, r6, pc}
   846d6:	bf00      	nop
   846d8:	0008782c 	.word	0x0008782c
   846dc:	0008782c 	.word	0x0008782c
   846e0:	00087834 	.word	0x00087834
   846e4:	0008782c 	.word	0x0008782c

000846e8 <iprintf>:
   846e8:	b40f      	push	{r0, r1, r2, r3}
   846ea:	b510      	push	{r4, lr}
   846ec:	4b07      	ldr	r3, [pc, #28]	; (8470c <iprintf+0x24>)
   846ee:	b082      	sub	sp, #8
   846f0:	ac04      	add	r4, sp, #16
   846f2:	f854 2b04 	ldr.w	r2, [r4], #4
   846f6:	6818      	ldr	r0, [r3, #0]
   846f8:	4623      	mov	r3, r4
   846fa:	6881      	ldr	r1, [r0, #8]
   846fc:	9401      	str	r4, [sp, #4]
   846fe:	f000 f9ed 	bl	84adc <_vfiprintf_r>
   84702:	b002      	add	sp, #8
   84704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   84708:	b004      	add	sp, #16
   8470a:	4770      	bx	lr
   8470c:	200705e0 	.word	0x200705e0

00084710 <memcpy>:
   84710:	4684      	mov	ip, r0
   84712:	ea41 0300 	orr.w	r3, r1, r0
   84716:	f013 0303 	ands.w	r3, r3, #3
   8471a:	d149      	bne.n	847b0 <memcpy+0xa0>
   8471c:	3a40      	subs	r2, #64	; 0x40
   8471e:	d323      	bcc.n	84768 <memcpy+0x58>
   84720:	680b      	ldr	r3, [r1, #0]
   84722:	6003      	str	r3, [r0, #0]
   84724:	684b      	ldr	r3, [r1, #4]
   84726:	6043      	str	r3, [r0, #4]
   84728:	688b      	ldr	r3, [r1, #8]
   8472a:	6083      	str	r3, [r0, #8]
   8472c:	68cb      	ldr	r3, [r1, #12]
   8472e:	60c3      	str	r3, [r0, #12]
   84730:	690b      	ldr	r3, [r1, #16]
   84732:	6103      	str	r3, [r0, #16]
   84734:	694b      	ldr	r3, [r1, #20]
   84736:	6143      	str	r3, [r0, #20]
   84738:	698b      	ldr	r3, [r1, #24]
   8473a:	6183      	str	r3, [r0, #24]
   8473c:	69cb      	ldr	r3, [r1, #28]
   8473e:	61c3      	str	r3, [r0, #28]
   84740:	6a0b      	ldr	r3, [r1, #32]
   84742:	6203      	str	r3, [r0, #32]
   84744:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   84746:	6243      	str	r3, [r0, #36]	; 0x24
   84748:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8474a:	6283      	str	r3, [r0, #40]	; 0x28
   8474c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8474e:	62c3      	str	r3, [r0, #44]	; 0x2c
   84750:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84752:	6303      	str	r3, [r0, #48]	; 0x30
   84754:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   84756:	6343      	str	r3, [r0, #52]	; 0x34
   84758:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8475a:	6383      	str	r3, [r0, #56]	; 0x38
   8475c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8475e:	63c3      	str	r3, [r0, #60]	; 0x3c
   84760:	3040      	adds	r0, #64	; 0x40
   84762:	3140      	adds	r1, #64	; 0x40
   84764:	3a40      	subs	r2, #64	; 0x40
   84766:	d2db      	bcs.n	84720 <memcpy+0x10>
   84768:	3230      	adds	r2, #48	; 0x30
   8476a:	d30b      	bcc.n	84784 <memcpy+0x74>
   8476c:	680b      	ldr	r3, [r1, #0]
   8476e:	6003      	str	r3, [r0, #0]
   84770:	684b      	ldr	r3, [r1, #4]
   84772:	6043      	str	r3, [r0, #4]
   84774:	688b      	ldr	r3, [r1, #8]
   84776:	6083      	str	r3, [r0, #8]
   84778:	68cb      	ldr	r3, [r1, #12]
   8477a:	60c3      	str	r3, [r0, #12]
   8477c:	3010      	adds	r0, #16
   8477e:	3110      	adds	r1, #16
   84780:	3a10      	subs	r2, #16
   84782:	d2f3      	bcs.n	8476c <memcpy+0x5c>
   84784:	320c      	adds	r2, #12
   84786:	d305      	bcc.n	84794 <memcpy+0x84>
   84788:	f851 3b04 	ldr.w	r3, [r1], #4
   8478c:	f840 3b04 	str.w	r3, [r0], #4
   84790:	3a04      	subs	r2, #4
   84792:	d2f9      	bcs.n	84788 <memcpy+0x78>
   84794:	3204      	adds	r2, #4
   84796:	d008      	beq.n	847aa <memcpy+0x9a>
   84798:	07d2      	lsls	r2, r2, #31
   8479a:	bf1c      	itt	ne
   8479c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   847a0:	f800 3b01 	strbne.w	r3, [r0], #1
   847a4:	d301      	bcc.n	847aa <memcpy+0x9a>
   847a6:	880b      	ldrh	r3, [r1, #0]
   847a8:	8003      	strh	r3, [r0, #0]
   847aa:	4660      	mov	r0, ip
   847ac:	4770      	bx	lr
   847ae:	bf00      	nop
   847b0:	2a08      	cmp	r2, #8
   847b2:	d313      	bcc.n	847dc <memcpy+0xcc>
   847b4:	078b      	lsls	r3, r1, #30
   847b6:	d0b1      	beq.n	8471c <memcpy+0xc>
   847b8:	f010 0303 	ands.w	r3, r0, #3
   847bc:	d0ae      	beq.n	8471c <memcpy+0xc>
   847be:	f1c3 0304 	rsb	r3, r3, #4
   847c2:	1ad2      	subs	r2, r2, r3
   847c4:	07db      	lsls	r3, r3, #31
   847c6:	bf1c      	itt	ne
   847c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   847cc:	f800 3b01 	strbne.w	r3, [r0], #1
   847d0:	d3a4      	bcc.n	8471c <memcpy+0xc>
   847d2:	f831 3b02 	ldrh.w	r3, [r1], #2
   847d6:	f820 3b02 	strh.w	r3, [r0], #2
   847da:	e79f      	b.n	8471c <memcpy+0xc>
   847dc:	3a04      	subs	r2, #4
   847de:	d3d9      	bcc.n	84794 <memcpy+0x84>
   847e0:	3a01      	subs	r2, #1
   847e2:	f811 3b01 	ldrb.w	r3, [r1], #1
   847e6:	f800 3b01 	strb.w	r3, [r0], #1
   847ea:	d2f9      	bcs.n	847e0 <memcpy+0xd0>
   847ec:	780b      	ldrb	r3, [r1, #0]
   847ee:	7003      	strb	r3, [r0, #0]
   847f0:	784b      	ldrb	r3, [r1, #1]
   847f2:	7043      	strb	r3, [r0, #1]
   847f4:	788b      	ldrb	r3, [r1, #2]
   847f6:	7083      	strb	r3, [r0, #2]
   847f8:	4660      	mov	r0, ip
   847fa:	4770      	bx	lr

000847fc <memset>:
   847fc:	b470      	push	{r4, r5, r6}
   847fe:	0784      	lsls	r4, r0, #30
   84800:	d046      	beq.n	84890 <memset+0x94>
   84802:	1e54      	subs	r4, r2, #1
   84804:	2a00      	cmp	r2, #0
   84806:	d041      	beq.n	8488c <memset+0x90>
   84808:	b2cd      	uxtb	r5, r1
   8480a:	4603      	mov	r3, r0
   8480c:	e002      	b.n	84814 <memset+0x18>
   8480e:	1e62      	subs	r2, r4, #1
   84810:	b3e4      	cbz	r4, 8488c <memset+0x90>
   84812:	4614      	mov	r4, r2
   84814:	f803 5b01 	strb.w	r5, [r3], #1
   84818:	079a      	lsls	r2, r3, #30
   8481a:	d1f8      	bne.n	8480e <memset+0x12>
   8481c:	2c03      	cmp	r4, #3
   8481e:	d92e      	bls.n	8487e <memset+0x82>
   84820:	b2cd      	uxtb	r5, r1
   84822:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   84826:	2c0f      	cmp	r4, #15
   84828:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8482c:	d919      	bls.n	84862 <memset+0x66>
   8482e:	4626      	mov	r6, r4
   84830:	f103 0210 	add.w	r2, r3, #16
   84834:	3e10      	subs	r6, #16
   84836:	2e0f      	cmp	r6, #15
   84838:	f842 5c10 	str.w	r5, [r2, #-16]
   8483c:	f842 5c0c 	str.w	r5, [r2, #-12]
   84840:	f842 5c08 	str.w	r5, [r2, #-8]
   84844:	f842 5c04 	str.w	r5, [r2, #-4]
   84848:	f102 0210 	add.w	r2, r2, #16
   8484c:	d8f2      	bhi.n	84834 <memset+0x38>
   8484e:	f1a4 0210 	sub.w	r2, r4, #16
   84852:	f022 020f 	bic.w	r2, r2, #15
   84856:	f004 040f 	and.w	r4, r4, #15
   8485a:	3210      	adds	r2, #16
   8485c:	2c03      	cmp	r4, #3
   8485e:	4413      	add	r3, r2
   84860:	d90d      	bls.n	8487e <memset+0x82>
   84862:	461e      	mov	r6, r3
   84864:	4622      	mov	r2, r4
   84866:	3a04      	subs	r2, #4
   84868:	2a03      	cmp	r2, #3
   8486a:	f846 5b04 	str.w	r5, [r6], #4
   8486e:	d8fa      	bhi.n	84866 <memset+0x6a>
   84870:	1f22      	subs	r2, r4, #4
   84872:	f022 0203 	bic.w	r2, r2, #3
   84876:	3204      	adds	r2, #4
   84878:	4413      	add	r3, r2
   8487a:	f004 0403 	and.w	r4, r4, #3
   8487e:	b12c      	cbz	r4, 8488c <memset+0x90>
   84880:	b2c9      	uxtb	r1, r1
   84882:	441c      	add	r4, r3
   84884:	f803 1b01 	strb.w	r1, [r3], #1
   84888:	42a3      	cmp	r3, r4
   8488a:	d1fb      	bne.n	84884 <memset+0x88>
   8488c:	bc70      	pop	{r4, r5, r6}
   8488e:	4770      	bx	lr
   84890:	4614      	mov	r4, r2
   84892:	4603      	mov	r3, r0
   84894:	e7c2      	b.n	8481c <memset+0x20>
   84896:	bf00      	nop

00084898 <setbuf>:
   84898:	2900      	cmp	r1, #0
   8489a:	bf0c      	ite	eq
   8489c:	2202      	moveq	r2, #2
   8489e:	2200      	movne	r2, #0
   848a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   848a4:	f000 b800 	b.w	848a8 <setvbuf>

000848a8 <setvbuf>:
   848a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   848ac:	4d3a      	ldr	r5, [pc, #232]	; (84998 <setvbuf+0xf0>)
   848ae:	4604      	mov	r4, r0
   848b0:	682e      	ldr	r6, [r5, #0]
   848b2:	4690      	mov	r8, r2
   848b4:	460d      	mov	r5, r1
   848b6:	461f      	mov	r7, r3
   848b8:	b116      	cbz	r6, 848c0 <setvbuf+0x18>
   848ba:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   848bc:	2b00      	cmp	r3, #0
   848be:	d03c      	beq.n	8493a <setvbuf+0x92>
   848c0:	f1b8 0f02 	cmp.w	r8, #2
   848c4:	d82f      	bhi.n	84926 <setvbuf+0x7e>
   848c6:	2f00      	cmp	r7, #0
   848c8:	db2d      	blt.n	84926 <setvbuf+0x7e>
   848ca:	4621      	mov	r1, r4
   848cc:	4630      	mov	r0, r6
   848ce:	f001 f861 	bl	85994 <_fflush_r>
   848d2:	89a1      	ldrh	r1, [r4, #12]
   848d4:	2300      	movs	r3, #0
   848d6:	6063      	str	r3, [r4, #4]
   848d8:	61a3      	str	r3, [r4, #24]
   848da:	060b      	lsls	r3, r1, #24
   848dc:	d427      	bmi.n	8492e <setvbuf+0x86>
   848de:	f021 0183 	bic.w	r1, r1, #131	; 0x83
   848e2:	b289      	uxth	r1, r1
   848e4:	f1b8 0f02 	cmp.w	r8, #2
   848e8:	81a1      	strh	r1, [r4, #12]
   848ea:	d02a      	beq.n	84942 <setvbuf+0x9a>
   848ec:	2d00      	cmp	r5, #0
   848ee:	d036      	beq.n	8495e <setvbuf+0xb6>
   848f0:	f1b8 0f01 	cmp.w	r8, #1
   848f4:	d011      	beq.n	8491a <setvbuf+0x72>
   848f6:	b289      	uxth	r1, r1
   848f8:	f001 0008 	and.w	r0, r1, #8
   848fc:	4b27      	ldr	r3, [pc, #156]	; (8499c <setvbuf+0xf4>)
   848fe:	b280      	uxth	r0, r0
   84900:	63f3      	str	r3, [r6, #60]	; 0x3c
   84902:	6025      	str	r5, [r4, #0]
   84904:	6125      	str	r5, [r4, #16]
   84906:	6167      	str	r7, [r4, #20]
   84908:	b178      	cbz	r0, 8492a <setvbuf+0x82>
   8490a:	f011 0f03 	tst.w	r1, #3
   8490e:	bf18      	it	ne
   84910:	2700      	movne	r7, #0
   84912:	2000      	movs	r0, #0
   84914:	60a7      	str	r7, [r4, #8]
   84916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8491a:	f041 0101 	orr.w	r1, r1, #1
   8491e:	427b      	negs	r3, r7
   84920:	81a1      	strh	r1, [r4, #12]
   84922:	61a3      	str	r3, [r4, #24]
   84924:	e7e7      	b.n	848f6 <setvbuf+0x4e>
   84926:	f04f 30ff 	mov.w	r0, #4294967295
   8492a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8492e:	6921      	ldr	r1, [r4, #16]
   84930:	4630      	mov	r0, r6
   84932:	f001 f99b 	bl	85c6c <_free_r>
   84936:	89a1      	ldrh	r1, [r4, #12]
   84938:	e7d1      	b.n	848de <setvbuf+0x36>
   8493a:	4630      	mov	r0, r6
   8493c:	f001 f8be 	bl	85abc <__sinit>
   84940:	e7be      	b.n	848c0 <setvbuf+0x18>
   84942:	2000      	movs	r0, #0
   84944:	f104 0343 	add.w	r3, r4, #67	; 0x43
   84948:	f041 0102 	orr.w	r1, r1, #2
   8494c:	2500      	movs	r5, #0
   8494e:	2201      	movs	r2, #1
   84950:	81a1      	strh	r1, [r4, #12]
   84952:	60a5      	str	r5, [r4, #8]
   84954:	6023      	str	r3, [r4, #0]
   84956:	6123      	str	r3, [r4, #16]
   84958:	6162      	str	r2, [r4, #20]
   8495a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8495e:	2f00      	cmp	r7, #0
   84960:	bf08      	it	eq
   84962:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   84966:	4638      	mov	r0, r7
   84968:	f001 fc8a 	bl	86280 <malloc>
   8496c:	4605      	mov	r5, r0
   8496e:	b128      	cbz	r0, 8497c <setvbuf+0xd4>
   84970:	89a1      	ldrh	r1, [r4, #12]
   84972:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   84976:	b289      	uxth	r1, r1
   84978:	81a1      	strh	r1, [r4, #12]
   8497a:	e7b9      	b.n	848f0 <setvbuf+0x48>
   8497c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   84980:	f001 fc7e 	bl	86280 <malloc>
   84984:	4605      	mov	r5, r0
   84986:	b918      	cbnz	r0, 84990 <setvbuf+0xe8>
   84988:	89a1      	ldrh	r1, [r4, #12]
   8498a:	f04f 30ff 	mov.w	r0, #4294967295
   8498e:	e7d9      	b.n	84944 <setvbuf+0x9c>
   84990:	f44f 6780 	mov.w	r7, #1024	; 0x400
   84994:	e7ec      	b.n	84970 <setvbuf+0xc8>
   84996:	bf00      	nop
   84998:	200705e0 	.word	0x200705e0
   8499c:	000859c1 	.word	0x000859c1

000849a0 <strlen>:
   849a0:	f020 0103 	bic.w	r1, r0, #3
   849a4:	f010 0003 	ands.w	r0, r0, #3
   849a8:	f1c0 0000 	rsb	r0, r0, #0
   849ac:	f851 3b04 	ldr.w	r3, [r1], #4
   849b0:	f100 0c04 	add.w	ip, r0, #4
   849b4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   849b8:	f06f 0200 	mvn.w	r2, #0
   849bc:	bf1c      	itt	ne
   849be:	fa22 f20c 	lsrne.w	r2, r2, ip
   849c2:	4313      	orrne	r3, r2
   849c4:	f04f 0c01 	mov.w	ip, #1
   849c8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   849cc:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   849d0:	eba3 020c 	sub.w	r2, r3, ip
   849d4:	ea22 0203 	bic.w	r2, r2, r3
   849d8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   849dc:	bf04      	itt	eq
   849de:	f851 3b04 	ldreq.w	r3, [r1], #4
   849e2:	3004      	addeq	r0, #4
   849e4:	d0f4      	beq.n	849d0 <strlen+0x30>
   849e6:	f1c2 0100 	rsb	r1, r2, #0
   849ea:	ea02 0201 	and.w	r2, r2, r1
   849ee:	fab2 f282 	clz	r2, r2
   849f2:	f1c2 021f 	rsb	r2, r2, #31
   849f6:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   849fa:	4770      	bx	lr

000849fc <strncpy>:
   849fc:	ea40 0301 	orr.w	r3, r0, r1
   84a00:	079b      	lsls	r3, r3, #30
   84a02:	b470      	push	{r4, r5, r6}
   84a04:	d12b      	bne.n	84a5e <strncpy+0x62>
   84a06:	2a03      	cmp	r2, #3
   84a08:	d929      	bls.n	84a5e <strncpy+0x62>
   84a0a:	460c      	mov	r4, r1
   84a0c:	4603      	mov	r3, r0
   84a0e:	4621      	mov	r1, r4
   84a10:	f854 6b04 	ldr.w	r6, [r4], #4
   84a14:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   84a18:	ea25 0506 	bic.w	r5, r5, r6
   84a1c:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   84a20:	d105      	bne.n	84a2e <strncpy+0x32>
   84a22:	3a04      	subs	r2, #4
   84a24:	2a03      	cmp	r2, #3
   84a26:	f843 6b04 	str.w	r6, [r3], #4
   84a2a:	4621      	mov	r1, r4
   84a2c:	d8ef      	bhi.n	84a0e <strncpy+0x12>
   84a2e:	b1a2      	cbz	r2, 84a5a <strncpy+0x5e>
   84a30:	780c      	ldrb	r4, [r1, #0]
   84a32:	3a01      	subs	r2, #1
   84a34:	701c      	strb	r4, [r3, #0]
   84a36:	3101      	adds	r1, #1
   84a38:	3301      	adds	r3, #1
   84a3a:	b13c      	cbz	r4, 84a4c <strncpy+0x50>
   84a3c:	b16a      	cbz	r2, 84a5a <strncpy+0x5e>
   84a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
   84a42:	3a01      	subs	r2, #1
   84a44:	f803 4b01 	strb.w	r4, [r3], #1
   84a48:	2c00      	cmp	r4, #0
   84a4a:	d1f7      	bne.n	84a3c <strncpy+0x40>
   84a4c:	b12a      	cbz	r2, 84a5a <strncpy+0x5e>
   84a4e:	441a      	add	r2, r3
   84a50:	2100      	movs	r1, #0
   84a52:	f803 1b01 	strb.w	r1, [r3], #1
   84a56:	4293      	cmp	r3, r2
   84a58:	d1fb      	bne.n	84a52 <strncpy+0x56>
   84a5a:	bc70      	pop	{r4, r5, r6}
   84a5c:	4770      	bx	lr
   84a5e:	4603      	mov	r3, r0
   84a60:	e7e5      	b.n	84a2e <strncpy+0x32>
   84a62:	bf00      	nop

00084a64 <__sprint_r.part.0>:
   84a64:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   84a66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   84a6a:	049c      	lsls	r4, r3, #18
   84a6c:	460f      	mov	r7, r1
   84a6e:	4692      	mov	sl, r2
   84a70:	d52b      	bpl.n	84aca <__sprint_r.part.0+0x66>
   84a72:	6893      	ldr	r3, [r2, #8]
   84a74:	6812      	ldr	r2, [r2, #0]
   84a76:	b333      	cbz	r3, 84ac6 <__sprint_r.part.0+0x62>
   84a78:	4680      	mov	r8, r0
   84a7a:	f102 0908 	add.w	r9, r2, #8
   84a7e:	e919 0060 	ldmdb	r9, {r5, r6}
   84a82:	08b6      	lsrs	r6, r6, #2
   84a84:	d017      	beq.n	84ab6 <__sprint_r.part.0+0x52>
   84a86:	3d04      	subs	r5, #4
   84a88:	2400      	movs	r4, #0
   84a8a:	e001      	b.n	84a90 <__sprint_r.part.0+0x2c>
   84a8c:	42a6      	cmp	r6, r4
   84a8e:	d010      	beq.n	84ab2 <__sprint_r.part.0+0x4e>
   84a90:	4640      	mov	r0, r8
   84a92:	f855 1f04 	ldr.w	r1, [r5, #4]!
   84a96:	463a      	mov	r2, r7
   84a98:	f001 f888 	bl	85bac <_fputwc_r>
   84a9c:	1c43      	adds	r3, r0, #1
   84a9e:	f104 0401 	add.w	r4, r4, #1
   84aa2:	d1f3      	bne.n	84a8c <__sprint_r.part.0+0x28>
   84aa4:	2300      	movs	r3, #0
   84aa6:	f8ca 3008 	str.w	r3, [sl, #8]
   84aaa:	f8ca 3004 	str.w	r3, [sl, #4]
   84aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84ab2:	f8da 3008 	ldr.w	r3, [sl, #8]
   84ab6:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   84aba:	f8ca 3008 	str.w	r3, [sl, #8]
   84abe:	f109 0908 	add.w	r9, r9, #8
   84ac2:	2b00      	cmp	r3, #0
   84ac4:	d1db      	bne.n	84a7e <__sprint_r.part.0+0x1a>
   84ac6:	2000      	movs	r0, #0
   84ac8:	e7ec      	b.n	84aa4 <__sprint_r.part.0+0x40>
   84aca:	f001 f9a7 	bl	85e1c <__sfvwrite_r>
   84ace:	2300      	movs	r3, #0
   84ad0:	f8ca 3008 	str.w	r3, [sl, #8]
   84ad4:	f8ca 3004 	str.w	r3, [sl, #4]
   84ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00084adc <_vfiprintf_r>:
   84adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84ae0:	b0ab      	sub	sp, #172	; 0xac
   84ae2:	461c      	mov	r4, r3
   84ae4:	9100      	str	r1, [sp, #0]
   84ae6:	4693      	mov	fp, r2
   84ae8:	9304      	str	r3, [sp, #16]
   84aea:	9001      	str	r0, [sp, #4]
   84aec:	b118      	cbz	r0, 84af6 <_vfiprintf_r+0x1a>
   84aee:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84af0:	2b00      	cmp	r3, #0
   84af2:	f000 80e3 	beq.w	84cbc <_vfiprintf_r+0x1e0>
   84af6:	9b00      	ldr	r3, [sp, #0]
   84af8:	8999      	ldrh	r1, [r3, #12]
   84afa:	b28a      	uxth	r2, r1
   84afc:	0490      	lsls	r0, r2, #18
   84afe:	d408      	bmi.n	84b12 <_vfiprintf_r+0x36>
   84b00:	4618      	mov	r0, r3
   84b02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   84b04:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   84b08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   84b0c:	8182      	strh	r2, [r0, #12]
   84b0e:	6643      	str	r3, [r0, #100]	; 0x64
   84b10:	b292      	uxth	r2, r2
   84b12:	0711      	lsls	r1, r2, #28
   84b14:	f140 80b2 	bpl.w	84c7c <_vfiprintf_r+0x1a0>
   84b18:	9b00      	ldr	r3, [sp, #0]
   84b1a:	691b      	ldr	r3, [r3, #16]
   84b1c:	2b00      	cmp	r3, #0
   84b1e:	f000 80ad 	beq.w	84c7c <_vfiprintf_r+0x1a0>
   84b22:	f002 021a 	and.w	r2, r2, #26
   84b26:	2a0a      	cmp	r2, #10
   84b28:	f000 80b4 	beq.w	84c94 <_vfiprintf_r+0x1b8>
   84b2c:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   84b30:	4654      	mov	r4, sl
   84b32:	2300      	movs	r3, #0
   84b34:	9309      	str	r3, [sp, #36]	; 0x24
   84b36:	9302      	str	r3, [sp, #8]
   84b38:	930f      	str	r3, [sp, #60]	; 0x3c
   84b3a:	930e      	str	r3, [sp, #56]	; 0x38
   84b3c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   84b40:	f89b 3000 	ldrb.w	r3, [fp]
   84b44:	2b00      	cmp	r3, #0
   84b46:	f000 84a3 	beq.w	85490 <_vfiprintf_r+0x9b4>
   84b4a:	2b25      	cmp	r3, #37	; 0x25
   84b4c:	f000 84a0 	beq.w	85490 <_vfiprintf_r+0x9b4>
   84b50:	465a      	mov	r2, fp
   84b52:	e001      	b.n	84b58 <_vfiprintf_r+0x7c>
   84b54:	2b25      	cmp	r3, #37	; 0x25
   84b56:	d003      	beq.n	84b60 <_vfiprintf_r+0x84>
   84b58:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   84b5c:	2b00      	cmp	r3, #0
   84b5e:	d1f9      	bne.n	84b54 <_vfiprintf_r+0x78>
   84b60:	ebcb 0602 	rsb	r6, fp, r2
   84b64:	4615      	mov	r5, r2
   84b66:	b196      	cbz	r6, 84b8e <_vfiprintf_r+0xb2>
   84b68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84b6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84b6c:	3301      	adds	r3, #1
   84b6e:	4432      	add	r2, r6
   84b70:	2b07      	cmp	r3, #7
   84b72:	f8c4 b000 	str.w	fp, [r4]
   84b76:	6066      	str	r6, [r4, #4]
   84b78:	920f      	str	r2, [sp, #60]	; 0x3c
   84b7a:	930e      	str	r3, [sp, #56]	; 0x38
   84b7c:	dd79      	ble.n	84c72 <_vfiprintf_r+0x196>
   84b7e:	2a00      	cmp	r2, #0
   84b80:	f040 84ad 	bne.w	854de <_vfiprintf_r+0xa02>
   84b84:	4654      	mov	r4, sl
   84b86:	9b02      	ldr	r3, [sp, #8]
   84b88:	920e      	str	r2, [sp, #56]	; 0x38
   84b8a:	4433      	add	r3, r6
   84b8c:	9302      	str	r3, [sp, #8]
   84b8e:	782b      	ldrb	r3, [r5, #0]
   84b90:	2b00      	cmp	r3, #0
   84b92:	f000 835f 	beq.w	85254 <_vfiprintf_r+0x778>
   84b96:	f04f 0300 	mov.w	r3, #0
   84b9a:	2100      	movs	r1, #0
   84b9c:	f04f 3cff 	mov.w	ip, #4294967295
   84ba0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84ba4:	1c68      	adds	r0, r5, #1
   84ba6:	786b      	ldrb	r3, [r5, #1]
   84ba8:	4688      	mov	r8, r1
   84baa:	460d      	mov	r5, r1
   84bac:	4666      	mov	r6, ip
   84bae:	f100 0b01 	add.w	fp, r0, #1
   84bb2:	f1a3 0220 	sub.w	r2, r3, #32
   84bb6:	2a58      	cmp	r2, #88	; 0x58
   84bb8:	f200 82aa 	bhi.w	85110 <_vfiprintf_r+0x634>
   84bbc:	e8df f012 	tbh	[pc, r2, lsl #1]
   84bc0:	02a8029a 	.word	0x02a8029a
   84bc4:	02a202a8 	.word	0x02a202a8
   84bc8:	02a802a8 	.word	0x02a802a8
   84bcc:	02a802a8 	.word	0x02a802a8
   84bd0:	02a802a8 	.word	0x02a802a8
   84bd4:	02600254 	.word	0x02600254
   84bd8:	010d02a8 	.word	0x010d02a8
   84bdc:	02a8026c 	.word	0x02a8026c
   84be0:	012f0129 	.word	0x012f0129
   84be4:	012f012f 	.word	0x012f012f
   84be8:	012f012f 	.word	0x012f012f
   84bec:	012f012f 	.word	0x012f012f
   84bf0:	012f012f 	.word	0x012f012f
   84bf4:	02a802a8 	.word	0x02a802a8
   84bf8:	02a802a8 	.word	0x02a802a8
   84bfc:	02a802a8 	.word	0x02a802a8
   84c00:	02a802a8 	.word	0x02a802a8
   84c04:	02a802a8 	.word	0x02a802a8
   84c08:	02a8013d 	.word	0x02a8013d
   84c0c:	02a802a8 	.word	0x02a802a8
   84c10:	02a802a8 	.word	0x02a802a8
   84c14:	02a802a8 	.word	0x02a802a8
   84c18:	02a802a8 	.word	0x02a802a8
   84c1c:	017402a8 	.word	0x017402a8
   84c20:	02a802a8 	.word	0x02a802a8
   84c24:	02a802a8 	.word	0x02a802a8
   84c28:	018b02a8 	.word	0x018b02a8
   84c2c:	02a802a8 	.word	0x02a802a8
   84c30:	02a801a3 	.word	0x02a801a3
   84c34:	02a802a8 	.word	0x02a802a8
   84c38:	02a802a8 	.word	0x02a802a8
   84c3c:	02a802a8 	.word	0x02a802a8
   84c40:	02a802a8 	.word	0x02a802a8
   84c44:	01c702a8 	.word	0x01c702a8
   84c48:	02a801da 	.word	0x02a801da
   84c4c:	02a802a8 	.word	0x02a802a8
   84c50:	01da0123 	.word	0x01da0123
   84c54:	02a802a8 	.word	0x02a802a8
   84c58:	02a8024b 	.word	0x02a8024b
   84c5c:	01130288 	.word	0x01130288
   84c60:	020701f4 	.word	0x020701f4
   84c64:	020d02a8 	.word	0x020d02a8
   84c68:	008102a8 	.word	0x008102a8
   84c6c:	02a802a8 	.word	0x02a802a8
   84c70:	0232      	.short	0x0232
   84c72:	3408      	adds	r4, #8
   84c74:	9b02      	ldr	r3, [sp, #8]
   84c76:	4433      	add	r3, r6
   84c78:	9302      	str	r3, [sp, #8]
   84c7a:	e788      	b.n	84b8e <_vfiprintf_r+0xb2>
   84c7c:	9801      	ldr	r0, [sp, #4]
   84c7e:	9900      	ldr	r1, [sp, #0]
   84c80:	f000 fd72 	bl	85768 <__swsetup_r>
   84c84:	b9a8      	cbnz	r0, 84cb2 <_vfiprintf_r+0x1d6>
   84c86:	9b00      	ldr	r3, [sp, #0]
   84c88:	899a      	ldrh	r2, [r3, #12]
   84c8a:	f002 021a 	and.w	r2, r2, #26
   84c8e:	2a0a      	cmp	r2, #10
   84c90:	f47f af4c 	bne.w	84b2c <_vfiprintf_r+0x50>
   84c94:	9b00      	ldr	r3, [sp, #0]
   84c96:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
   84c9a:	2b00      	cmp	r3, #0
   84c9c:	f6ff af46 	blt.w	84b2c <_vfiprintf_r+0x50>
   84ca0:	9801      	ldr	r0, [sp, #4]
   84ca2:	9900      	ldr	r1, [sp, #0]
   84ca4:	465a      	mov	r2, fp
   84ca6:	4623      	mov	r3, r4
   84ca8:	f000 fd20 	bl	856ec <__sbprintf>
   84cac:	b02b      	add	sp, #172	; 0xac
   84cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84cb2:	f04f 30ff 	mov.w	r0, #4294967295
   84cb6:	b02b      	add	sp, #172	; 0xac
   84cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84cbc:	f000 fefe 	bl	85abc <__sinit>
   84cc0:	e719      	b.n	84af6 <_vfiprintf_r+0x1a>
   84cc2:	f018 0f20 	tst.w	r8, #32
   84cc6:	9503      	str	r5, [sp, #12]
   84cc8:	46b4      	mov	ip, r6
   84cca:	f000 810c 	beq.w	84ee6 <_vfiprintf_r+0x40a>
   84cce:	9b04      	ldr	r3, [sp, #16]
   84cd0:	3307      	adds	r3, #7
   84cd2:	f023 0307 	bic.w	r3, r3, #7
   84cd6:	f103 0208 	add.w	r2, r3, #8
   84cda:	e9d3 6700 	ldrd	r6, r7, [r3]
   84cde:	9204      	str	r2, [sp, #16]
   84ce0:	2301      	movs	r3, #1
   84ce2:	f04f 0200 	mov.w	r2, #0
   84ce6:	46e1      	mov	r9, ip
   84ce8:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   84cec:	2500      	movs	r5, #0
   84cee:	f1bc 0f00 	cmp.w	ip, #0
   84cf2:	bfa8      	it	ge
   84cf4:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   84cf8:	ea56 0207 	orrs.w	r2, r6, r7
   84cfc:	f040 80c4 	bne.w	84e88 <_vfiprintf_r+0x3ac>
   84d00:	f1bc 0f00 	cmp.w	ip, #0
   84d04:	f000 8380 	beq.w	85408 <_vfiprintf_r+0x92c>
   84d08:	2b01      	cmp	r3, #1
   84d0a:	f000 80c5 	beq.w	84e98 <_vfiprintf_r+0x3bc>
   84d0e:	2b02      	cmp	r3, #2
   84d10:	f000 8386 	beq.w	85420 <_vfiprintf_r+0x944>
   84d14:	4651      	mov	r1, sl
   84d16:	08f2      	lsrs	r2, r6, #3
   84d18:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   84d1c:	08f8      	lsrs	r0, r7, #3
   84d1e:	f006 0307 	and.w	r3, r6, #7
   84d22:	4607      	mov	r7, r0
   84d24:	4616      	mov	r6, r2
   84d26:	3330      	adds	r3, #48	; 0x30
   84d28:	ea56 0207 	orrs.w	r2, r6, r7
   84d2c:	f801 3d01 	strb.w	r3, [r1, #-1]!
   84d30:	d1f1      	bne.n	84d16 <_vfiprintf_r+0x23a>
   84d32:	f018 0f01 	tst.w	r8, #1
   84d36:	9107      	str	r1, [sp, #28]
   84d38:	f040 83fa 	bne.w	85530 <_vfiprintf_r+0xa54>
   84d3c:	ebc1 090a 	rsb	r9, r1, sl
   84d40:	45e1      	cmp	r9, ip
   84d42:	464e      	mov	r6, r9
   84d44:	bfb8      	it	lt
   84d46:	4666      	movlt	r6, ip
   84d48:	b105      	cbz	r5, 84d4c <_vfiprintf_r+0x270>
   84d4a:	3601      	adds	r6, #1
   84d4c:	f018 0302 	ands.w	r3, r8, #2
   84d50:	9305      	str	r3, [sp, #20]
   84d52:	bf18      	it	ne
   84d54:	3602      	addne	r6, #2
   84d56:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   84d5a:	9306      	str	r3, [sp, #24]
   84d5c:	f040 81f9 	bne.w	85152 <_vfiprintf_r+0x676>
   84d60:	9b03      	ldr	r3, [sp, #12]
   84d62:	1b9d      	subs	r5, r3, r6
   84d64:	2d00      	cmp	r5, #0
   84d66:	f340 81f4 	ble.w	85152 <_vfiprintf_r+0x676>
   84d6a:	2d10      	cmp	r5, #16
   84d6c:	f340 848a 	ble.w	85684 <_vfiprintf_r+0xba8>
   84d70:	4620      	mov	r0, r4
   84d72:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   84d76:	4664      	mov	r4, ip
   84d78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84d7a:	4fc4      	ldr	r7, [pc, #784]	; (8508c <_vfiprintf_r+0x5b0>)
   84d7c:	2310      	movs	r3, #16
   84d7e:	4671      	mov	r1, lr
   84d80:	4684      	mov	ip, r0
   84d82:	e007      	b.n	84d94 <_vfiprintf_r+0x2b8>
   84d84:	f101 0e02 	add.w	lr, r1, #2
   84d88:	4601      	mov	r1, r0
   84d8a:	f10c 0c08 	add.w	ip, ip, #8
   84d8e:	3d10      	subs	r5, #16
   84d90:	2d10      	cmp	r5, #16
   84d92:	dd13      	ble.n	84dbc <_vfiprintf_r+0x2e0>
   84d94:	1c48      	adds	r0, r1, #1
   84d96:	3210      	adds	r2, #16
   84d98:	2807      	cmp	r0, #7
   84d9a:	920f      	str	r2, [sp, #60]	; 0x3c
   84d9c:	f8cc 7000 	str.w	r7, [ip]
   84da0:	f8cc 3004 	str.w	r3, [ip, #4]
   84da4:	900e      	str	r0, [sp, #56]	; 0x38
   84da6:	dded      	ble.n	84d84 <_vfiprintf_r+0x2a8>
   84da8:	2a00      	cmp	r2, #0
   84daa:	f040 81c2 	bne.w	85132 <_vfiprintf_r+0x656>
   84dae:	3d10      	subs	r5, #16
   84db0:	2d10      	cmp	r5, #16
   84db2:	4611      	mov	r1, r2
   84db4:	f04f 0e01 	mov.w	lr, #1
   84db8:	46d4      	mov	ip, sl
   84dba:	dceb      	bgt.n	84d94 <_vfiprintf_r+0x2b8>
   84dbc:	4663      	mov	r3, ip
   84dbe:	4671      	mov	r1, lr
   84dc0:	46a4      	mov	ip, r4
   84dc2:	461c      	mov	r4, r3
   84dc4:	442a      	add	r2, r5
   84dc6:	2907      	cmp	r1, #7
   84dc8:	920f      	str	r2, [sp, #60]	; 0x3c
   84dca:	6027      	str	r7, [r4, #0]
   84dcc:	6065      	str	r5, [r4, #4]
   84dce:	910e      	str	r1, [sp, #56]	; 0x38
   84dd0:	f300 8346 	bgt.w	85460 <_vfiprintf_r+0x984>
   84dd4:	3408      	adds	r4, #8
   84dd6:	1c48      	adds	r0, r1, #1
   84dd8:	e1be      	b.n	85158 <_vfiprintf_r+0x67c>
   84dda:	4658      	mov	r0, fp
   84ddc:	f048 0804 	orr.w	r8, r8, #4
   84de0:	f89b 3000 	ldrb.w	r3, [fp]
   84de4:	e6e3      	b.n	84bae <_vfiprintf_r+0xd2>
   84de6:	f018 0320 	ands.w	r3, r8, #32
   84dea:	9503      	str	r5, [sp, #12]
   84dec:	46b4      	mov	ip, r6
   84dee:	d062      	beq.n	84eb6 <_vfiprintf_r+0x3da>
   84df0:	9b04      	ldr	r3, [sp, #16]
   84df2:	3307      	adds	r3, #7
   84df4:	f023 0307 	bic.w	r3, r3, #7
   84df8:	f103 0208 	add.w	r2, r3, #8
   84dfc:	e9d3 6700 	ldrd	r6, r7, [r3]
   84e00:	9204      	str	r2, [sp, #16]
   84e02:	2300      	movs	r3, #0
   84e04:	e76d      	b.n	84ce2 <_vfiprintf_r+0x206>
   84e06:	f048 0840 	orr.w	r8, r8, #64	; 0x40
   84e0a:	f89b 3000 	ldrb.w	r3, [fp]
   84e0e:	4658      	mov	r0, fp
   84e10:	e6cd      	b.n	84bae <_vfiprintf_r+0xd2>
   84e12:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   84e16:	f89b 3000 	ldrb.w	r3, [fp]
   84e1a:	4658      	mov	r0, fp
   84e1c:	e6c7      	b.n	84bae <_vfiprintf_r+0xd2>
   84e1e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84e22:	2500      	movs	r5, #0
   84e24:	f81b 3b01 	ldrb.w	r3, [fp], #1
   84e28:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   84e2c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   84e30:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84e34:	2a09      	cmp	r2, #9
   84e36:	d9f5      	bls.n	84e24 <_vfiprintf_r+0x348>
   84e38:	e6bb      	b.n	84bb2 <_vfiprintf_r+0xd6>
   84e3a:	f048 0810 	orr.w	r8, r8, #16
   84e3e:	f018 0f20 	tst.w	r8, #32
   84e42:	9503      	str	r5, [sp, #12]
   84e44:	46b4      	mov	ip, r6
   84e46:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84e4a:	f000 809b 	beq.w	84f84 <_vfiprintf_r+0x4a8>
   84e4e:	9904      	ldr	r1, [sp, #16]
   84e50:	3107      	adds	r1, #7
   84e52:	f021 0107 	bic.w	r1, r1, #7
   84e56:	e9d1 2300 	ldrd	r2, r3, [r1]
   84e5a:	4616      	mov	r6, r2
   84e5c:	461f      	mov	r7, r3
   84e5e:	3108      	adds	r1, #8
   84e60:	9104      	str	r1, [sp, #16]
   84e62:	2a00      	cmp	r2, #0
   84e64:	f173 0300 	sbcs.w	r3, r3, #0
   84e68:	f2c0 83a4 	blt.w	855b4 <_vfiprintf_r+0xad8>
   84e6c:	f1bc 0f00 	cmp.w	ip, #0
   84e70:	bfa8      	it	ge
   84e72:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   84e76:	ea56 0207 	orrs.w	r2, r6, r7
   84e7a:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   84e7e:	46e1      	mov	r9, ip
   84e80:	f04f 0301 	mov.w	r3, #1
   84e84:	f43f af3c 	beq.w	84d00 <_vfiprintf_r+0x224>
   84e88:	2b01      	cmp	r3, #1
   84e8a:	f47f af40 	bne.w	84d0e <_vfiprintf_r+0x232>
   84e8e:	2f00      	cmp	r7, #0
   84e90:	bf08      	it	eq
   84e92:	2e0a      	cmpeq	r6, #10
   84e94:	f080 8332 	bcs.w	854fc <_vfiprintf_r+0xa20>
   84e98:	ab2a      	add	r3, sp, #168	; 0xa8
   84e9a:	3630      	adds	r6, #48	; 0x30
   84e9c:	f803 6d41 	strb.w	r6, [r3, #-65]!
   84ea0:	ebc3 090a 	rsb	r9, r3, sl
   84ea4:	9307      	str	r3, [sp, #28]
   84ea6:	e74b      	b.n	84d40 <_vfiprintf_r+0x264>
   84ea8:	f048 0810 	orr.w	r8, r8, #16
   84eac:	f018 0320 	ands.w	r3, r8, #32
   84eb0:	9503      	str	r5, [sp, #12]
   84eb2:	46b4      	mov	ip, r6
   84eb4:	d19c      	bne.n	84df0 <_vfiprintf_r+0x314>
   84eb6:	f018 0210 	ands.w	r2, r8, #16
   84eba:	f040 82f7 	bne.w	854ac <_vfiprintf_r+0x9d0>
   84ebe:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   84ec2:	f000 82f3 	beq.w	854ac <_vfiprintf_r+0x9d0>
   84ec6:	9904      	ldr	r1, [sp, #16]
   84ec8:	4613      	mov	r3, r2
   84eca:	460a      	mov	r2, r1
   84ecc:	3204      	adds	r2, #4
   84ece:	880e      	ldrh	r6, [r1, #0]
   84ed0:	2700      	movs	r7, #0
   84ed2:	9204      	str	r2, [sp, #16]
   84ed4:	e705      	b.n	84ce2 <_vfiprintf_r+0x206>
   84ed6:	f048 0810 	orr.w	r8, r8, #16
   84eda:	f018 0f20 	tst.w	r8, #32
   84ede:	9503      	str	r5, [sp, #12]
   84ee0:	46b4      	mov	ip, r6
   84ee2:	f47f aef4 	bne.w	84cce <_vfiprintf_r+0x1f2>
   84ee6:	9a04      	ldr	r2, [sp, #16]
   84ee8:	f018 0f10 	tst.w	r8, #16
   84eec:	4613      	mov	r3, r2
   84eee:	f040 82e4 	bne.w	854ba <_vfiprintf_r+0x9de>
   84ef2:	f018 0f40 	tst.w	r8, #64	; 0x40
   84ef6:	f000 82e0 	beq.w	854ba <_vfiprintf_r+0x9de>
   84efa:	8816      	ldrh	r6, [r2, #0]
   84efc:	3204      	adds	r2, #4
   84efe:	2700      	movs	r7, #0
   84f00:	2301      	movs	r3, #1
   84f02:	9204      	str	r2, [sp, #16]
   84f04:	e6ed      	b.n	84ce2 <_vfiprintf_r+0x206>
   84f06:	4a62      	ldr	r2, [pc, #392]	; (85090 <_vfiprintf_r+0x5b4>)
   84f08:	f018 0f20 	tst.w	r8, #32
   84f0c:	9503      	str	r5, [sp, #12]
   84f0e:	46b4      	mov	ip, r6
   84f10:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84f14:	9209      	str	r2, [sp, #36]	; 0x24
   84f16:	f000 808f 	beq.w	85038 <_vfiprintf_r+0x55c>
   84f1a:	9a04      	ldr	r2, [sp, #16]
   84f1c:	3207      	adds	r2, #7
   84f1e:	f022 0207 	bic.w	r2, r2, #7
   84f22:	f102 0108 	add.w	r1, r2, #8
   84f26:	9104      	str	r1, [sp, #16]
   84f28:	e9d2 6700 	ldrd	r6, r7, [r2]
   84f2c:	f018 0f01 	tst.w	r8, #1
   84f30:	f000 828f 	beq.w	85452 <_vfiprintf_r+0x976>
   84f34:	ea56 0207 	orrs.w	r2, r6, r7
   84f38:	f000 828b 	beq.w	85452 <_vfiprintf_r+0x976>
   84f3c:	2230      	movs	r2, #48	; 0x30
   84f3e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   84f42:	f048 0802 	orr.w	r8, r8, #2
   84f46:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   84f4a:	2302      	movs	r3, #2
   84f4c:	e6c9      	b.n	84ce2 <_vfiprintf_r+0x206>
   84f4e:	9a04      	ldr	r2, [sp, #16]
   84f50:	2601      	movs	r6, #1
   84f52:	6813      	ldr	r3, [r2, #0]
   84f54:	f04f 0100 	mov.w	r1, #0
   84f58:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   84f5c:	4613      	mov	r3, r2
   84f5e:	46b1      	mov	r9, r6
   84f60:	3304      	adds	r3, #4
   84f62:	9304      	str	r3, [sp, #16]
   84f64:	ab10      	add	r3, sp, #64	; 0x40
   84f66:	9503      	str	r5, [sp, #12]
   84f68:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84f6c:	9307      	str	r3, [sp, #28]
   84f6e:	f04f 0c00 	mov.w	ip, #0
   84f72:	e6eb      	b.n	84d4c <_vfiprintf_r+0x270>
   84f74:	f018 0f20 	tst.w	r8, #32
   84f78:	9503      	str	r5, [sp, #12]
   84f7a:	46b4      	mov	ip, r6
   84f7c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84f80:	f47f af65 	bne.w	84e4e <_vfiprintf_r+0x372>
   84f84:	9a04      	ldr	r2, [sp, #16]
   84f86:	f018 0f10 	tst.w	r8, #16
   84f8a:	4613      	mov	r3, r2
   84f8c:	f040 82a0 	bne.w	854d0 <_vfiprintf_r+0x9f4>
   84f90:	f018 0f40 	tst.w	r8, #64	; 0x40
   84f94:	f000 829c 	beq.w	854d0 <_vfiprintf_r+0x9f4>
   84f98:	f9b2 6000 	ldrsh.w	r6, [r2]
   84f9c:	3304      	adds	r3, #4
   84f9e:	17f7      	asrs	r7, r6, #31
   84fa0:	9304      	str	r3, [sp, #16]
   84fa2:	4632      	mov	r2, r6
   84fa4:	463b      	mov	r3, r7
   84fa6:	e75c      	b.n	84e62 <_vfiprintf_r+0x386>
   84fa8:	9904      	ldr	r1, [sp, #16]
   84faa:	2378      	movs	r3, #120	; 0x78
   84fac:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   84fb0:	4b38      	ldr	r3, [pc, #224]	; (85094 <_vfiprintf_r+0x5b8>)
   84fb2:	46b4      	mov	ip, r6
   84fb4:	2230      	movs	r2, #48	; 0x30
   84fb6:	680e      	ldr	r6, [r1, #0]
   84fb8:	3104      	adds	r1, #4
   84fba:	9309      	str	r3, [sp, #36]	; 0x24
   84fbc:	9503      	str	r5, [sp, #12]
   84fbe:	f048 0802 	orr.w	r8, r8, #2
   84fc2:	9104      	str	r1, [sp, #16]
   84fc4:	2700      	movs	r7, #0
   84fc6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   84fca:	2302      	movs	r3, #2
   84fcc:	e689      	b.n	84ce2 <_vfiprintf_r+0x206>
   84fce:	f048 0820 	orr.w	r8, r8, #32
   84fd2:	f89b 3000 	ldrb.w	r3, [fp]
   84fd6:	4658      	mov	r0, fp
   84fd8:	e5e9      	b.n	84bae <_vfiprintf_r+0xd2>
   84fda:	f04f 0100 	mov.w	r1, #0
   84fde:	9a04      	ldr	r2, [sp, #16]
   84fe0:	9503      	str	r5, [sp, #12]
   84fe2:	6813      	ldr	r3, [r2, #0]
   84fe4:	46b4      	mov	ip, r6
   84fe6:	9307      	str	r3, [sp, #28]
   84fe8:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   84fec:	1d15      	adds	r5, r2, #4
   84fee:	2b00      	cmp	r3, #0
   84ff0:	f000 834e 	beq.w	85690 <_vfiprintf_r+0xbb4>
   84ff4:	2e00      	cmp	r6, #0
   84ff6:	f2c0 8329 	blt.w	8564c <_vfiprintf_r+0xb70>
   84ffa:	9e07      	ldr	r6, [sp, #28]
   84ffc:	4662      	mov	r2, ip
   84ffe:	4630      	mov	r0, r6
   85000:	2100      	movs	r1, #0
   85002:	f8cd c010 	str.w	ip, [sp, #16]
   85006:	f001 fbc9 	bl	8679c <memchr>
   8500a:	f8dd c010 	ldr.w	ip, [sp, #16]
   8500e:	2800      	cmp	r0, #0
   85010:	f000 834e 	beq.w	856b0 <_vfiprintf_r+0xbd4>
   85014:	9504      	str	r5, [sp, #16]
   85016:	ebc6 0900 	rsb	r9, r6, r0
   8501a:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   8501e:	f04f 0c00 	mov.w	ip, #0
   85022:	e68d      	b.n	84d40 <_vfiprintf_r+0x264>
   85024:	4a1b      	ldr	r2, [pc, #108]	; (85094 <_vfiprintf_r+0x5b8>)
   85026:	f018 0f20 	tst.w	r8, #32
   8502a:	9503      	str	r5, [sp, #12]
   8502c:	46b4      	mov	ip, r6
   8502e:	9209      	str	r2, [sp, #36]	; 0x24
   85030:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   85034:	f47f af71 	bne.w	84f1a <_vfiprintf_r+0x43e>
   85038:	9904      	ldr	r1, [sp, #16]
   8503a:	f018 0f10 	tst.w	r8, #16
   8503e:	460a      	mov	r2, r1
   85040:	f040 8241 	bne.w	854c6 <_vfiprintf_r+0x9ea>
   85044:	f018 0f40 	tst.w	r8, #64	; 0x40
   85048:	f000 823d 	beq.w	854c6 <_vfiprintf_r+0x9ea>
   8504c:	3204      	adds	r2, #4
   8504e:	880e      	ldrh	r6, [r1, #0]
   85050:	2700      	movs	r7, #0
   85052:	9204      	str	r2, [sp, #16]
   85054:	e76a      	b.n	84f2c <_vfiprintf_r+0x450>
   85056:	f89b 3000 	ldrb.w	r3, [fp]
   8505a:	2b6c      	cmp	r3, #108	; 0x6c
   8505c:	f000 82e9 	beq.w	85632 <_vfiprintf_r+0xb56>
   85060:	f048 0810 	orr.w	r8, r8, #16
   85064:	4658      	mov	r0, fp
   85066:	e5a2      	b.n	84bae <_vfiprintf_r+0xd2>
   85068:	9a04      	ldr	r2, [sp, #16]
   8506a:	4613      	mov	r3, r2
   8506c:	6815      	ldr	r5, [r2, #0]
   8506e:	3304      	adds	r3, #4
   85070:	2d00      	cmp	r5, #0
   85072:	f2c0 82e6 	blt.w	85642 <_vfiprintf_r+0xb66>
   85076:	9304      	str	r3, [sp, #16]
   85078:	f89b 3000 	ldrb.w	r3, [fp]
   8507c:	4658      	mov	r0, fp
   8507e:	e596      	b.n	84bae <_vfiprintf_r+0xd2>
   85080:	f89b 3000 	ldrb.w	r3, [fp]
   85084:	4658      	mov	r0, fp
   85086:	212b      	movs	r1, #43	; 0x2b
   85088:	e591      	b.n	84bae <_vfiprintf_r+0xd2>
   8508a:	bf00      	nop
   8508c:	00087810 	.word	0x00087810
   85090:	000877e0 	.word	0x000877e0
   85094:	000877f4 	.word	0x000877f4
   85098:	f89b 3000 	ldrb.w	r3, [fp]
   8509c:	f10b 0001 	add.w	r0, fp, #1
   850a0:	2b2a      	cmp	r3, #42	; 0x2a
   850a2:	f000 830f 	beq.w	856c4 <_vfiprintf_r+0xbe8>
   850a6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   850aa:	2a09      	cmp	r2, #9
   850ac:	4683      	mov	fp, r0
   850ae:	f04f 0600 	mov.w	r6, #0
   850b2:	f63f ad7e 	bhi.w	84bb2 <_vfiprintf_r+0xd6>
   850b6:	f81b 3b01 	ldrb.w	r3, [fp], #1
   850ba:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   850be:	eb02 0646 	add.w	r6, r2, r6, lsl #1
   850c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   850c6:	2a09      	cmp	r2, #9
   850c8:	d9f5      	bls.n	850b6 <_vfiprintf_r+0x5da>
   850ca:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
   850ce:	e570      	b.n	84bb2 <_vfiprintf_r+0xd6>
   850d0:	f018 0f20 	tst.w	r8, #32
   850d4:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   850d8:	f000 8283 	beq.w	855e2 <_vfiprintf_r+0xb06>
   850dc:	9a04      	ldr	r2, [sp, #16]
   850de:	4613      	mov	r3, r2
   850e0:	3304      	adds	r3, #4
   850e2:	9304      	str	r3, [sp, #16]
   850e4:	9b02      	ldr	r3, [sp, #8]
   850e6:	6811      	ldr	r1, [r2, #0]
   850e8:	17df      	asrs	r7, r3, #31
   850ea:	461a      	mov	r2, r3
   850ec:	463b      	mov	r3, r7
   850ee:	e9c1 2300 	strd	r2, r3, [r1]
   850f2:	e525      	b.n	84b40 <_vfiprintf_r+0x64>
   850f4:	4658      	mov	r0, fp
   850f6:	f89b 3000 	ldrb.w	r3, [fp]
   850fa:	2900      	cmp	r1, #0
   850fc:	f47f ad57 	bne.w	84bae <_vfiprintf_r+0xd2>
   85100:	2120      	movs	r1, #32
   85102:	e554      	b.n	84bae <_vfiprintf_r+0xd2>
   85104:	f048 0801 	orr.w	r8, r8, #1
   85108:	4658      	mov	r0, fp
   8510a:	f89b 3000 	ldrb.w	r3, [fp]
   8510e:	e54e      	b.n	84bae <_vfiprintf_r+0xd2>
   85110:	9503      	str	r5, [sp, #12]
   85112:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   85116:	2b00      	cmp	r3, #0
   85118:	f000 809c 	beq.w	85254 <_vfiprintf_r+0x778>
   8511c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   85120:	f04f 0300 	mov.w	r3, #0
   85124:	2601      	movs	r6, #1
   85126:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   8512a:	ab10      	add	r3, sp, #64	; 0x40
   8512c:	46b1      	mov	r9, r6
   8512e:	9307      	str	r3, [sp, #28]
   85130:	e71d      	b.n	84f6e <_vfiprintf_r+0x492>
   85132:	9801      	ldr	r0, [sp, #4]
   85134:	9900      	ldr	r1, [sp, #0]
   85136:	aa0d      	add	r2, sp, #52	; 0x34
   85138:	9308      	str	r3, [sp, #32]
   8513a:	f7ff fc93 	bl	84a64 <__sprint_r.part.0>
   8513e:	2800      	cmp	r0, #0
   85140:	f040 808f 	bne.w	85262 <_vfiprintf_r+0x786>
   85144:	990e      	ldr	r1, [sp, #56]	; 0x38
   85146:	46d4      	mov	ip, sl
   85148:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8514a:	f101 0e01 	add.w	lr, r1, #1
   8514e:	9b08      	ldr	r3, [sp, #32]
   85150:	e61d      	b.n	84d8e <_vfiprintf_r+0x2b2>
   85152:	990e      	ldr	r1, [sp, #56]	; 0x38
   85154:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85156:	1c48      	adds	r0, r1, #1
   85158:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   8515c:	b16b      	cbz	r3, 8517a <_vfiprintf_r+0x69e>
   8515e:	3201      	adds	r2, #1
   85160:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
   85164:	2101      	movs	r1, #1
   85166:	2807      	cmp	r0, #7
   85168:	920f      	str	r2, [sp, #60]	; 0x3c
   8516a:	900e      	str	r0, [sp, #56]	; 0x38
   8516c:	6023      	str	r3, [r4, #0]
   8516e:	6061      	str	r1, [r4, #4]
   85170:	f300 8134 	bgt.w	853dc <_vfiprintf_r+0x900>
   85174:	4601      	mov	r1, r0
   85176:	3408      	adds	r4, #8
   85178:	3001      	adds	r0, #1
   8517a:	9b05      	ldr	r3, [sp, #20]
   8517c:	b163      	cbz	r3, 85198 <_vfiprintf_r+0x6bc>
   8517e:	3202      	adds	r2, #2
   85180:	a90c      	add	r1, sp, #48	; 0x30
   85182:	2302      	movs	r3, #2
   85184:	2807      	cmp	r0, #7
   85186:	920f      	str	r2, [sp, #60]	; 0x3c
   85188:	900e      	str	r0, [sp, #56]	; 0x38
   8518a:	e884 000a 	stmia.w	r4, {r1, r3}
   8518e:	f300 8134 	bgt.w	853fa <_vfiprintf_r+0x91e>
   85192:	4601      	mov	r1, r0
   85194:	3408      	adds	r4, #8
   85196:	3001      	adds	r0, #1
   85198:	9b06      	ldr	r3, [sp, #24]
   8519a:	2b80      	cmp	r3, #128	; 0x80
   8519c:	f000 80d4 	beq.w	85348 <_vfiprintf_r+0x86c>
   851a0:	ebc9 070c 	rsb	r7, r9, ip
   851a4:	2f00      	cmp	r7, #0
   851a6:	dd2b      	ble.n	85200 <_vfiprintf_r+0x724>
   851a8:	2f10      	cmp	r7, #16
   851aa:	4dab      	ldr	r5, [pc, #684]	; (85458 <_vfiprintf_r+0x97c>)
   851ac:	dd1f      	ble.n	851ee <_vfiprintf_r+0x712>
   851ae:	46a6      	mov	lr, r4
   851b0:	2310      	movs	r3, #16
   851b2:	9c01      	ldr	r4, [sp, #4]
   851b4:	e007      	b.n	851c6 <_vfiprintf_r+0x6ea>
   851b6:	f101 0c02 	add.w	ip, r1, #2
   851ba:	4601      	mov	r1, r0
   851bc:	f10e 0e08 	add.w	lr, lr, #8
   851c0:	3f10      	subs	r7, #16
   851c2:	2f10      	cmp	r7, #16
   851c4:	dd11      	ble.n	851ea <_vfiprintf_r+0x70e>
   851c6:	1c48      	adds	r0, r1, #1
   851c8:	3210      	adds	r2, #16
   851ca:	2807      	cmp	r0, #7
   851cc:	920f      	str	r2, [sp, #60]	; 0x3c
   851ce:	f8ce 5000 	str.w	r5, [lr]
   851d2:	f8ce 3004 	str.w	r3, [lr, #4]
   851d6:	900e      	str	r0, [sp, #56]	; 0x38
   851d8:	dded      	ble.n	851b6 <_vfiprintf_r+0x6da>
   851da:	bb6a      	cbnz	r2, 85238 <_vfiprintf_r+0x75c>
   851dc:	3f10      	subs	r7, #16
   851de:	2f10      	cmp	r7, #16
   851e0:	f04f 0c01 	mov.w	ip, #1
   851e4:	4611      	mov	r1, r2
   851e6:	46d6      	mov	lr, sl
   851e8:	dced      	bgt.n	851c6 <_vfiprintf_r+0x6ea>
   851ea:	4674      	mov	r4, lr
   851ec:	4660      	mov	r0, ip
   851ee:	443a      	add	r2, r7
   851f0:	2807      	cmp	r0, #7
   851f2:	920f      	str	r2, [sp, #60]	; 0x3c
   851f4:	e884 00a0 	stmia.w	r4, {r5, r7}
   851f8:	900e      	str	r0, [sp, #56]	; 0x38
   851fa:	dc3b      	bgt.n	85274 <_vfiprintf_r+0x798>
   851fc:	3408      	adds	r4, #8
   851fe:	3001      	adds	r0, #1
   85200:	eb02 0309 	add.w	r3, r2, r9
   85204:	9a07      	ldr	r2, [sp, #28]
   85206:	2807      	cmp	r0, #7
   85208:	930f      	str	r3, [sp, #60]	; 0x3c
   8520a:	e884 0204 	stmia.w	r4, {r2, r9}
   8520e:	900e      	str	r0, [sp, #56]	; 0x38
   85210:	dd3d      	ble.n	8528e <_vfiprintf_r+0x7b2>
   85212:	2b00      	cmp	r3, #0
   85214:	f040 813f 	bne.w	85496 <_vfiprintf_r+0x9ba>
   85218:	f018 0f04 	tst.w	r8, #4
   8521c:	930e      	str	r3, [sp, #56]	; 0x38
   8521e:	f040 8130 	bne.w	85482 <_vfiprintf_r+0x9a6>
   85222:	9b02      	ldr	r3, [sp, #8]
   85224:	9a03      	ldr	r2, [sp, #12]
   85226:	4296      	cmp	r6, r2
   85228:	bfac      	ite	ge
   8522a:	199b      	addge	r3, r3, r6
   8522c:	189b      	addlt	r3, r3, r2
   8522e:	9302      	str	r3, [sp, #8]
   85230:	2300      	movs	r3, #0
   85232:	930e      	str	r3, [sp, #56]	; 0x38
   85234:	4654      	mov	r4, sl
   85236:	e483      	b.n	84b40 <_vfiprintf_r+0x64>
   85238:	4620      	mov	r0, r4
   8523a:	9900      	ldr	r1, [sp, #0]
   8523c:	aa0d      	add	r2, sp, #52	; 0x34
   8523e:	9305      	str	r3, [sp, #20]
   85240:	f7ff fc10 	bl	84a64 <__sprint_r.part.0>
   85244:	b968      	cbnz	r0, 85262 <_vfiprintf_r+0x786>
   85246:	990e      	ldr	r1, [sp, #56]	; 0x38
   85248:	46d6      	mov	lr, sl
   8524a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8524c:	f101 0c01 	add.w	ip, r1, #1
   85250:	9b05      	ldr	r3, [sp, #20]
   85252:	e7b5      	b.n	851c0 <_vfiprintf_r+0x6e4>
   85254:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85256:	b123      	cbz	r3, 85262 <_vfiprintf_r+0x786>
   85258:	9801      	ldr	r0, [sp, #4]
   8525a:	9900      	ldr	r1, [sp, #0]
   8525c:	aa0d      	add	r2, sp, #52	; 0x34
   8525e:	f7ff fc01 	bl	84a64 <__sprint_r.part.0>
   85262:	9b00      	ldr	r3, [sp, #0]
   85264:	899b      	ldrh	r3, [r3, #12]
   85266:	065b      	lsls	r3, r3, #25
   85268:	f53f ad23 	bmi.w	84cb2 <_vfiprintf_r+0x1d6>
   8526c:	9802      	ldr	r0, [sp, #8]
   8526e:	b02b      	add	sp, #172	; 0xac
   85270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85274:	2a00      	cmp	r2, #0
   85276:	f040 8190 	bne.w	8559a <_vfiprintf_r+0xabe>
   8527a:	464b      	mov	r3, r9
   8527c:	4654      	mov	r4, sl
   8527e:	9907      	ldr	r1, [sp, #28]
   85280:	2201      	movs	r2, #1
   85282:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
   85286:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   8528a:	911a      	str	r1, [sp, #104]	; 0x68
   8528c:	920e      	str	r2, [sp, #56]	; 0x38
   8528e:	f104 0208 	add.w	r2, r4, #8
   85292:	f018 0f04 	tst.w	r8, #4
   85296:	d039      	beq.n	8530c <_vfiprintf_r+0x830>
   85298:	9903      	ldr	r1, [sp, #12]
   8529a:	1b8d      	subs	r5, r1, r6
   8529c:	2d00      	cmp	r5, #0
   8529e:	dd35      	ble.n	8530c <_vfiprintf_r+0x830>
   852a0:	2d10      	cmp	r5, #16
   852a2:	f340 8200 	ble.w	856a6 <_vfiprintf_r+0xbca>
   852a6:	980e      	ldr	r0, [sp, #56]	; 0x38
   852a8:	4f6c      	ldr	r7, [pc, #432]	; (8545c <_vfiprintf_r+0x980>)
   852aa:	2410      	movs	r4, #16
   852ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
   852b0:	f8dd 9000 	ldr.w	r9, [sp]
   852b4:	e006      	b.n	852c4 <_vfiprintf_r+0x7e8>
   852b6:	f100 0e02 	add.w	lr, r0, #2
   852ba:	4608      	mov	r0, r1
   852bc:	3208      	adds	r2, #8
   852be:	3d10      	subs	r5, #16
   852c0:	2d10      	cmp	r5, #16
   852c2:	dd10      	ble.n	852e6 <_vfiprintf_r+0x80a>
   852c4:	1c41      	adds	r1, r0, #1
   852c6:	3310      	adds	r3, #16
   852c8:	2907      	cmp	r1, #7
   852ca:	930f      	str	r3, [sp, #60]	; 0x3c
   852cc:	6017      	str	r7, [r2, #0]
   852ce:	6054      	str	r4, [r2, #4]
   852d0:	910e      	str	r1, [sp, #56]	; 0x38
   852d2:	ddf0      	ble.n	852b6 <_vfiprintf_r+0x7da>
   852d4:	2b00      	cmp	r3, #0
   852d6:	d12a      	bne.n	8532e <_vfiprintf_r+0x852>
   852d8:	3d10      	subs	r5, #16
   852da:	2d10      	cmp	r5, #16
   852dc:	f04f 0e01 	mov.w	lr, #1
   852e0:	4618      	mov	r0, r3
   852e2:	4652      	mov	r2, sl
   852e4:	dcee      	bgt.n	852c4 <_vfiprintf_r+0x7e8>
   852e6:	442b      	add	r3, r5
   852e8:	f1be 0f07 	cmp.w	lr, #7
   852ec:	930f      	str	r3, [sp, #60]	; 0x3c
   852ee:	6017      	str	r7, [r2, #0]
   852f0:	6055      	str	r5, [r2, #4]
   852f2:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   852f6:	dd09      	ble.n	8530c <_vfiprintf_r+0x830>
   852f8:	2b00      	cmp	r3, #0
   852fa:	d092      	beq.n	85222 <_vfiprintf_r+0x746>
   852fc:	9801      	ldr	r0, [sp, #4]
   852fe:	9900      	ldr	r1, [sp, #0]
   85300:	aa0d      	add	r2, sp, #52	; 0x34
   85302:	f7ff fbaf 	bl	84a64 <__sprint_r.part.0>
   85306:	2800      	cmp	r0, #0
   85308:	d1ab      	bne.n	85262 <_vfiprintf_r+0x786>
   8530a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8530c:	9a02      	ldr	r2, [sp, #8]
   8530e:	9903      	ldr	r1, [sp, #12]
   85310:	428e      	cmp	r6, r1
   85312:	bfac      	ite	ge
   85314:	1992      	addge	r2, r2, r6
   85316:	1852      	addlt	r2, r2, r1
   85318:	9202      	str	r2, [sp, #8]
   8531a:	2b00      	cmp	r3, #0
   8531c:	d088      	beq.n	85230 <_vfiprintf_r+0x754>
   8531e:	9801      	ldr	r0, [sp, #4]
   85320:	9900      	ldr	r1, [sp, #0]
   85322:	aa0d      	add	r2, sp, #52	; 0x34
   85324:	f7ff fb9e 	bl	84a64 <__sprint_r.part.0>
   85328:	2800      	cmp	r0, #0
   8532a:	d081      	beq.n	85230 <_vfiprintf_r+0x754>
   8532c:	e799      	b.n	85262 <_vfiprintf_r+0x786>
   8532e:	4640      	mov	r0, r8
   85330:	4649      	mov	r1, r9
   85332:	aa0d      	add	r2, sp, #52	; 0x34
   85334:	f7ff fb96 	bl	84a64 <__sprint_r.part.0>
   85338:	2800      	cmp	r0, #0
   8533a:	d192      	bne.n	85262 <_vfiprintf_r+0x786>
   8533c:	980e      	ldr	r0, [sp, #56]	; 0x38
   8533e:	4652      	mov	r2, sl
   85340:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   85342:	f100 0e01 	add.w	lr, r0, #1
   85346:	e7ba      	b.n	852be <_vfiprintf_r+0x7e2>
   85348:	9b03      	ldr	r3, [sp, #12]
   8534a:	1b9f      	subs	r7, r3, r6
   8534c:	2f00      	cmp	r7, #0
   8534e:	f77f af27 	ble.w	851a0 <_vfiprintf_r+0x6c4>
   85352:	2f10      	cmp	r7, #16
   85354:	f340 81b3 	ble.w	856be <_vfiprintf_r+0xbe2>
   85358:	4620      	mov	r0, r4
   8535a:	4d3f      	ldr	r5, [pc, #252]	; (85458 <_vfiprintf_r+0x97c>)
   8535c:	4664      	mov	r4, ip
   8535e:	2310      	movs	r3, #16
   85360:	4684      	mov	ip, r0
   85362:	e007      	b.n	85374 <_vfiprintf_r+0x898>
   85364:	f101 0e02 	add.w	lr, r1, #2
   85368:	4601      	mov	r1, r0
   8536a:	f10c 0c08 	add.w	ip, ip, #8
   8536e:	3f10      	subs	r7, #16
   85370:	2f10      	cmp	r7, #16
   85372:	dd11      	ble.n	85398 <_vfiprintf_r+0x8bc>
   85374:	1c48      	adds	r0, r1, #1
   85376:	3210      	adds	r2, #16
   85378:	2807      	cmp	r0, #7
   8537a:	920f      	str	r2, [sp, #60]	; 0x3c
   8537c:	f8cc 5000 	str.w	r5, [ip]
   85380:	f8cc 3004 	str.w	r3, [ip, #4]
   85384:	900e      	str	r0, [sp, #56]	; 0x38
   85386:	dded      	ble.n	85364 <_vfiprintf_r+0x888>
   85388:	b9c2      	cbnz	r2, 853bc <_vfiprintf_r+0x8e0>
   8538a:	3f10      	subs	r7, #16
   8538c:	2f10      	cmp	r7, #16
   8538e:	f04f 0e01 	mov.w	lr, #1
   85392:	4611      	mov	r1, r2
   85394:	46d4      	mov	ip, sl
   85396:	dced      	bgt.n	85374 <_vfiprintf_r+0x898>
   85398:	4663      	mov	r3, ip
   8539a:	46a4      	mov	ip, r4
   8539c:	461c      	mov	r4, r3
   8539e:	443a      	add	r2, r7
   853a0:	f1be 0f07 	cmp.w	lr, #7
   853a4:	920f      	str	r2, [sp, #60]	; 0x3c
   853a6:	e884 00a0 	stmia.w	r4, {r5, r7}
   853aa:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   853ae:	f300 80ee 	bgt.w	8558e <_vfiprintf_r+0xab2>
   853b2:	3408      	adds	r4, #8
   853b4:	f10e 0001 	add.w	r0, lr, #1
   853b8:	4671      	mov	r1, lr
   853ba:	e6f1      	b.n	851a0 <_vfiprintf_r+0x6c4>
   853bc:	9801      	ldr	r0, [sp, #4]
   853be:	9900      	ldr	r1, [sp, #0]
   853c0:	aa0d      	add	r2, sp, #52	; 0x34
   853c2:	9305      	str	r3, [sp, #20]
   853c4:	f7ff fb4e 	bl	84a64 <__sprint_r.part.0>
   853c8:	2800      	cmp	r0, #0
   853ca:	f47f af4a 	bne.w	85262 <_vfiprintf_r+0x786>
   853ce:	990e      	ldr	r1, [sp, #56]	; 0x38
   853d0:	46d4      	mov	ip, sl
   853d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   853d4:	f101 0e01 	add.w	lr, r1, #1
   853d8:	9b05      	ldr	r3, [sp, #20]
   853da:	e7c8      	b.n	8536e <_vfiprintf_r+0x892>
   853dc:	2a00      	cmp	r2, #0
   853de:	f040 80c5 	bne.w	8556c <_vfiprintf_r+0xa90>
   853e2:	9b05      	ldr	r3, [sp, #20]
   853e4:	2b00      	cmp	r3, #0
   853e6:	f000 8085 	beq.w	854f4 <_vfiprintf_r+0xa18>
   853ea:	aa0c      	add	r2, sp, #48	; 0x30
   853ec:	2302      	movs	r3, #2
   853ee:	921a      	str	r2, [sp, #104]	; 0x68
   853f0:	4608      	mov	r0, r1
   853f2:	931b      	str	r3, [sp, #108]	; 0x6c
   853f4:	461a      	mov	r2, r3
   853f6:	4654      	mov	r4, sl
   853f8:	e6cb      	b.n	85192 <_vfiprintf_r+0x6b6>
   853fa:	2a00      	cmp	r2, #0
   853fc:	f040 80a5 	bne.w	8554a <_vfiprintf_r+0xa6e>
   85400:	2001      	movs	r0, #1
   85402:	4611      	mov	r1, r2
   85404:	4654      	mov	r4, sl
   85406:	e6c7      	b.n	85198 <_vfiprintf_r+0x6bc>
   85408:	bb03      	cbnz	r3, 8544c <_vfiprintf_r+0x970>
   8540a:	f018 0f01 	tst.w	r8, #1
   8540e:	d01d      	beq.n	8544c <_vfiprintf_r+0x970>
   85410:	ab2a      	add	r3, sp, #168	; 0xa8
   85412:	2230      	movs	r2, #48	; 0x30
   85414:	f803 2d41 	strb.w	r2, [r3, #-65]!
   85418:	ebc3 090a 	rsb	r9, r3, sl
   8541c:	9307      	str	r3, [sp, #28]
   8541e:	e48f      	b.n	84d40 <_vfiprintf_r+0x264>
   85420:	46d1      	mov	r9, sl
   85422:	9809      	ldr	r0, [sp, #36]	; 0x24
   85424:	0933      	lsrs	r3, r6, #4
   85426:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   8542a:	0939      	lsrs	r1, r7, #4
   8542c:	f006 020f 	and.w	r2, r6, #15
   85430:	460f      	mov	r7, r1
   85432:	461e      	mov	r6, r3
   85434:	5c83      	ldrb	r3, [r0, r2]
   85436:	f809 3d01 	strb.w	r3, [r9, #-1]!
   8543a:	ea56 0307 	orrs.w	r3, r6, r7
   8543e:	d1f1      	bne.n	85424 <_vfiprintf_r+0x948>
   85440:	464b      	mov	r3, r9
   85442:	f8cd 901c 	str.w	r9, [sp, #28]
   85446:	ebc3 090a 	rsb	r9, r3, sl
   8544a:	e479      	b.n	84d40 <_vfiprintf_r+0x264>
   8544c:	f8cd a01c 	str.w	sl, [sp, #28]
   85450:	e476      	b.n	84d40 <_vfiprintf_r+0x264>
   85452:	2302      	movs	r3, #2
   85454:	e445      	b.n	84ce2 <_vfiprintf_r+0x206>
   85456:	bf00      	nop
   85458:	000877d0 	.word	0x000877d0
   8545c:	00087810 	.word	0x00087810
   85460:	2a00      	cmp	r2, #0
   85462:	f040 80d5 	bne.w	85610 <_vfiprintf_r+0xb34>
   85466:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   8546a:	2b00      	cmp	r3, #0
   8546c:	f000 80ac 	beq.w	855c8 <_vfiprintf_r+0xaec>
   85470:	2301      	movs	r3, #1
   85472:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   85476:	4618      	mov	r0, r3
   85478:	931b      	str	r3, [sp, #108]	; 0x6c
   8547a:	461a      	mov	r2, r3
   8547c:	911a      	str	r1, [sp, #104]	; 0x68
   8547e:	4654      	mov	r4, sl
   85480:	e678      	b.n	85174 <_vfiprintf_r+0x698>
   85482:	9a03      	ldr	r2, [sp, #12]
   85484:	1b95      	subs	r5, r2, r6
   85486:	2d00      	cmp	r5, #0
   85488:	4652      	mov	r2, sl
   8548a:	f73f af09 	bgt.w	852a0 <_vfiprintf_r+0x7c4>
   8548e:	e6c8      	b.n	85222 <_vfiprintf_r+0x746>
   85490:	465d      	mov	r5, fp
   85492:	f7ff bb7c 	b.w	84b8e <_vfiprintf_r+0xb2>
   85496:	9801      	ldr	r0, [sp, #4]
   85498:	9900      	ldr	r1, [sp, #0]
   8549a:	aa0d      	add	r2, sp, #52	; 0x34
   8549c:	f7ff fae2 	bl	84a64 <__sprint_r.part.0>
   854a0:	2800      	cmp	r0, #0
   854a2:	f47f aede 	bne.w	85262 <_vfiprintf_r+0x786>
   854a6:	4652      	mov	r2, sl
   854a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   854aa:	e6f2      	b.n	85292 <_vfiprintf_r+0x7b6>
   854ac:	9904      	ldr	r1, [sp, #16]
   854ae:	2700      	movs	r7, #0
   854b0:	460a      	mov	r2, r1
   854b2:	3204      	adds	r2, #4
   854b4:	680e      	ldr	r6, [r1, #0]
   854b6:	9204      	str	r2, [sp, #16]
   854b8:	e413      	b.n	84ce2 <_vfiprintf_r+0x206>
   854ba:	3204      	adds	r2, #4
   854bc:	681e      	ldr	r6, [r3, #0]
   854be:	2700      	movs	r7, #0
   854c0:	2301      	movs	r3, #1
   854c2:	9204      	str	r2, [sp, #16]
   854c4:	e40d      	b.n	84ce2 <_vfiprintf_r+0x206>
   854c6:	6816      	ldr	r6, [r2, #0]
   854c8:	3204      	adds	r2, #4
   854ca:	9204      	str	r2, [sp, #16]
   854cc:	2700      	movs	r7, #0
   854ce:	e52d      	b.n	84f2c <_vfiprintf_r+0x450>
   854d0:	681e      	ldr	r6, [r3, #0]
   854d2:	3304      	adds	r3, #4
   854d4:	17f7      	asrs	r7, r6, #31
   854d6:	9304      	str	r3, [sp, #16]
   854d8:	4632      	mov	r2, r6
   854da:	463b      	mov	r3, r7
   854dc:	e4c1      	b.n	84e62 <_vfiprintf_r+0x386>
   854de:	9801      	ldr	r0, [sp, #4]
   854e0:	9900      	ldr	r1, [sp, #0]
   854e2:	aa0d      	add	r2, sp, #52	; 0x34
   854e4:	f7ff fabe 	bl	84a64 <__sprint_r.part.0>
   854e8:	2800      	cmp	r0, #0
   854ea:	f47f aeba 	bne.w	85262 <_vfiprintf_r+0x786>
   854ee:	4654      	mov	r4, sl
   854f0:	f7ff bbc0 	b.w	84c74 <_vfiprintf_r+0x198>
   854f4:	4608      	mov	r0, r1
   854f6:	4654      	mov	r4, sl
   854f8:	4611      	mov	r1, r2
   854fa:	e64d      	b.n	85198 <_vfiprintf_r+0x6bc>
   854fc:	46d1      	mov	r9, sl
   854fe:	f8cd c014 	str.w	ip, [sp, #20]
   85502:	4630      	mov	r0, r6
   85504:	4639      	mov	r1, r7
   85506:	220a      	movs	r2, #10
   85508:	2300      	movs	r3, #0
   8550a:	f001 fdd1 	bl	870b0 <__aeabi_uldivmod>
   8550e:	3230      	adds	r2, #48	; 0x30
   85510:	4630      	mov	r0, r6
   85512:	4639      	mov	r1, r7
   85514:	f809 2d01 	strb.w	r2, [r9, #-1]!
   85518:	2300      	movs	r3, #0
   8551a:	220a      	movs	r2, #10
   8551c:	f001 fdc8 	bl	870b0 <__aeabi_uldivmod>
   85520:	4606      	mov	r6, r0
   85522:	460f      	mov	r7, r1
   85524:	ea56 0307 	orrs.w	r3, r6, r7
   85528:	d1eb      	bne.n	85502 <_vfiprintf_r+0xa26>
   8552a:	f8dd c014 	ldr.w	ip, [sp, #20]
   8552e:	e787      	b.n	85440 <_vfiprintf_r+0x964>
   85530:	2b30      	cmp	r3, #48	; 0x30
   85532:	9b07      	ldr	r3, [sp, #28]
   85534:	d087      	beq.n	85446 <_vfiprintf_r+0x96a>
   85536:	3b01      	subs	r3, #1
   85538:	461a      	mov	r2, r3
   8553a:	9307      	str	r3, [sp, #28]
   8553c:	2330      	movs	r3, #48	; 0x30
   8553e:	ebc2 090a 	rsb	r9, r2, sl
   85542:	f801 3c01 	strb.w	r3, [r1, #-1]
   85546:	f7ff bbfb 	b.w	84d40 <_vfiprintf_r+0x264>
   8554a:	9801      	ldr	r0, [sp, #4]
   8554c:	9900      	ldr	r1, [sp, #0]
   8554e:	aa0d      	add	r2, sp, #52	; 0x34
   85550:	f8cd c014 	str.w	ip, [sp, #20]
   85554:	f7ff fa86 	bl	84a64 <__sprint_r.part.0>
   85558:	2800      	cmp	r0, #0
   8555a:	f47f ae82 	bne.w	85262 <_vfiprintf_r+0x786>
   8555e:	990e      	ldr	r1, [sp, #56]	; 0x38
   85560:	4654      	mov	r4, sl
   85562:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85564:	1c48      	adds	r0, r1, #1
   85566:	f8dd c014 	ldr.w	ip, [sp, #20]
   8556a:	e615      	b.n	85198 <_vfiprintf_r+0x6bc>
   8556c:	9801      	ldr	r0, [sp, #4]
   8556e:	9900      	ldr	r1, [sp, #0]
   85570:	aa0d      	add	r2, sp, #52	; 0x34
   85572:	f8cd c020 	str.w	ip, [sp, #32]
   85576:	f7ff fa75 	bl	84a64 <__sprint_r.part.0>
   8557a:	2800      	cmp	r0, #0
   8557c:	f47f ae71 	bne.w	85262 <_vfiprintf_r+0x786>
   85580:	990e      	ldr	r1, [sp, #56]	; 0x38
   85582:	4654      	mov	r4, sl
   85584:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85586:	1c48      	adds	r0, r1, #1
   85588:	f8dd c020 	ldr.w	ip, [sp, #32]
   8558c:	e5f5      	b.n	8517a <_vfiprintf_r+0x69e>
   8558e:	2a00      	cmp	r2, #0
   85590:	d167      	bne.n	85662 <_vfiprintf_r+0xb86>
   85592:	2001      	movs	r0, #1
   85594:	4611      	mov	r1, r2
   85596:	4654      	mov	r4, sl
   85598:	e602      	b.n	851a0 <_vfiprintf_r+0x6c4>
   8559a:	9801      	ldr	r0, [sp, #4]
   8559c:	9900      	ldr	r1, [sp, #0]
   8559e:	aa0d      	add	r2, sp, #52	; 0x34
   855a0:	f7ff fa60 	bl	84a64 <__sprint_r.part.0>
   855a4:	2800      	cmp	r0, #0
   855a6:	f47f ae5c 	bne.w	85262 <_vfiprintf_r+0x786>
   855aa:	980e      	ldr	r0, [sp, #56]	; 0x38
   855ac:	4654      	mov	r4, sl
   855ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   855b0:	3001      	adds	r0, #1
   855b2:	e625      	b.n	85200 <_vfiprintf_r+0x724>
   855b4:	252d      	movs	r5, #45	; 0x2d
   855b6:	4276      	negs	r6, r6
   855b8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   855bc:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
   855c0:	46e1      	mov	r9, ip
   855c2:	2301      	movs	r3, #1
   855c4:	f7ff bb93 	b.w	84cee <_vfiprintf_r+0x212>
   855c8:	9b05      	ldr	r3, [sp, #20]
   855ca:	4611      	mov	r1, r2
   855cc:	2001      	movs	r0, #1
   855ce:	4654      	mov	r4, sl
   855d0:	2b00      	cmp	r3, #0
   855d2:	f43f ade5 	beq.w	851a0 <_vfiprintf_r+0x6c4>
   855d6:	aa0c      	add	r2, sp, #48	; 0x30
   855d8:	2302      	movs	r3, #2
   855da:	e88a 000c 	stmia.w	sl, {r2, r3}
   855de:	461a      	mov	r2, r3
   855e0:	e5d7      	b.n	85192 <_vfiprintf_r+0x6b6>
   855e2:	f018 0f10 	tst.w	r8, #16
   855e6:	d10b      	bne.n	85600 <_vfiprintf_r+0xb24>
   855e8:	f018 0f40 	tst.w	r8, #64	; 0x40
   855ec:	d008      	beq.n	85600 <_vfiprintf_r+0xb24>
   855ee:	9a04      	ldr	r2, [sp, #16]
   855f0:	6813      	ldr	r3, [r2, #0]
   855f2:	3204      	adds	r2, #4
   855f4:	9204      	str	r2, [sp, #16]
   855f6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   855fa:	801a      	strh	r2, [r3, #0]
   855fc:	f7ff baa0 	b.w	84b40 <_vfiprintf_r+0x64>
   85600:	9a04      	ldr	r2, [sp, #16]
   85602:	6813      	ldr	r3, [r2, #0]
   85604:	3204      	adds	r2, #4
   85606:	9204      	str	r2, [sp, #16]
   85608:	9a02      	ldr	r2, [sp, #8]
   8560a:	601a      	str	r2, [r3, #0]
   8560c:	f7ff ba98 	b.w	84b40 <_vfiprintf_r+0x64>
   85610:	9801      	ldr	r0, [sp, #4]
   85612:	9900      	ldr	r1, [sp, #0]
   85614:	aa0d      	add	r2, sp, #52	; 0x34
   85616:	f8cd c020 	str.w	ip, [sp, #32]
   8561a:	f7ff fa23 	bl	84a64 <__sprint_r.part.0>
   8561e:	2800      	cmp	r0, #0
   85620:	f47f ae1f 	bne.w	85262 <_vfiprintf_r+0x786>
   85624:	990e      	ldr	r1, [sp, #56]	; 0x38
   85626:	4654      	mov	r4, sl
   85628:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8562a:	1c48      	adds	r0, r1, #1
   8562c:	f8dd c020 	ldr.w	ip, [sp, #32]
   85630:	e592      	b.n	85158 <_vfiprintf_r+0x67c>
   85632:	f048 0820 	orr.w	r8, r8, #32
   85636:	f10b 0001 	add.w	r0, fp, #1
   8563a:	f89b 3001 	ldrb.w	r3, [fp, #1]
   8563e:	f7ff bab6 	b.w	84bae <_vfiprintf_r+0xd2>
   85642:	426d      	negs	r5, r5
   85644:	9304      	str	r3, [sp, #16]
   85646:	4658      	mov	r0, fp
   85648:	f7ff bbc8 	b.w	84ddc <_vfiprintf_r+0x300>
   8564c:	9807      	ldr	r0, [sp, #28]
   8564e:	9504      	str	r5, [sp, #16]
   85650:	f7ff f9a6 	bl	849a0 <strlen>
   85654:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   85658:	4681      	mov	r9, r0
   8565a:	f04f 0c00 	mov.w	ip, #0
   8565e:	f7ff bb6f 	b.w	84d40 <_vfiprintf_r+0x264>
   85662:	9801      	ldr	r0, [sp, #4]
   85664:	9900      	ldr	r1, [sp, #0]
   85666:	aa0d      	add	r2, sp, #52	; 0x34
   85668:	f8cd c014 	str.w	ip, [sp, #20]
   8566c:	f7ff f9fa 	bl	84a64 <__sprint_r.part.0>
   85670:	2800      	cmp	r0, #0
   85672:	f47f adf6 	bne.w	85262 <_vfiprintf_r+0x786>
   85676:	990e      	ldr	r1, [sp, #56]	; 0x38
   85678:	4654      	mov	r4, sl
   8567a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8567c:	1c48      	adds	r0, r1, #1
   8567e:	f8dd c014 	ldr.w	ip, [sp, #20]
   85682:	e58d      	b.n	851a0 <_vfiprintf_r+0x6c4>
   85684:	990e      	ldr	r1, [sp, #56]	; 0x38
   85686:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85688:	3101      	adds	r1, #1
   8568a:	4f15      	ldr	r7, [pc, #84]	; (856e0 <_vfiprintf_r+0xc04>)
   8568c:	f7ff bb9a 	b.w	84dc4 <_vfiprintf_r+0x2e8>
   85690:	2e06      	cmp	r6, #6
   85692:	4b14      	ldr	r3, [pc, #80]	; (856e4 <_vfiprintf_r+0xc08>)
   85694:	bf28      	it	cs
   85696:	f04f 0c06 	movcs.w	ip, #6
   8569a:	46e1      	mov	r9, ip
   8569c:	9504      	str	r5, [sp, #16]
   8569e:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
   856a2:	9307      	str	r3, [sp, #28]
   856a4:	e463      	b.n	84f6e <_vfiprintf_r+0x492>
   856a6:	990e      	ldr	r1, [sp, #56]	; 0x38
   856a8:	4f0d      	ldr	r7, [pc, #52]	; (856e0 <_vfiprintf_r+0xc04>)
   856aa:	f101 0e01 	add.w	lr, r1, #1
   856ae:	e61a      	b.n	852e6 <_vfiprintf_r+0x80a>
   856b0:	46e1      	mov	r9, ip
   856b2:	9504      	str	r5, [sp, #16]
   856b4:	4684      	mov	ip, r0
   856b6:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   856ba:	f7ff bb41 	b.w	84d40 <_vfiprintf_r+0x264>
   856be:	4686      	mov	lr, r0
   856c0:	4d09      	ldr	r5, [pc, #36]	; (856e8 <_vfiprintf_r+0xc0c>)
   856c2:	e66c      	b.n	8539e <_vfiprintf_r+0x8c2>
   856c4:	9a04      	ldr	r2, [sp, #16]
   856c6:	f89b 3001 	ldrb.w	r3, [fp, #1]
   856ca:	6816      	ldr	r6, [r2, #0]
   856cc:	3204      	adds	r2, #4
   856ce:	2e00      	cmp	r6, #0
   856d0:	9204      	str	r2, [sp, #16]
   856d2:	f6bf aa6c 	bge.w	84bae <_vfiprintf_r+0xd2>
   856d6:	f04f 36ff 	mov.w	r6, #4294967295
   856da:	f7ff ba68 	b.w	84bae <_vfiprintf_r+0xd2>
   856de:	bf00      	nop
   856e0:	00087810 	.word	0x00087810
   856e4:	00087808 	.word	0x00087808
   856e8:	000877d0 	.word	0x000877d0

000856ec <__sbprintf>:
   856ec:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   856f0:	4688      	mov	r8, r1
   856f2:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   856f4:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   856f8:	9719      	str	r7, [sp, #100]	; 0x64
   856fa:	f8d8 701c 	ldr.w	r7, [r8, #28]
   856fe:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   85702:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
   85706:	9707      	str	r7, [sp, #28]
   85708:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   8570c:	ac1a      	add	r4, sp, #104	; 0x68
   8570e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   85712:	f02e 0e02 	bic.w	lr, lr, #2
   85716:	2600      	movs	r6, #0
   85718:	4669      	mov	r1, sp
   8571a:	9400      	str	r4, [sp, #0]
   8571c:	9404      	str	r4, [sp, #16]
   8571e:	9502      	str	r5, [sp, #8]
   85720:	9505      	str	r5, [sp, #20]
   85722:	f8ad e00c 	strh.w	lr, [sp, #12]
   85726:	f8ad a00e 	strh.w	sl, [sp, #14]
   8572a:	9709      	str	r7, [sp, #36]	; 0x24
   8572c:	9606      	str	r6, [sp, #24]
   8572e:	4605      	mov	r5, r0
   85730:	f7ff f9d4 	bl	84adc <_vfiprintf_r>
   85734:	1e04      	subs	r4, r0, #0
   85736:	db07      	blt.n	85748 <__sbprintf+0x5c>
   85738:	4628      	mov	r0, r5
   8573a:	4669      	mov	r1, sp
   8573c:	f000 f92a 	bl	85994 <_fflush_r>
   85740:	42b0      	cmp	r0, r6
   85742:	bf18      	it	ne
   85744:	f04f 34ff 	movne.w	r4, #4294967295
   85748:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8574c:	065b      	lsls	r3, r3, #25
   8574e:	d505      	bpl.n	8575c <__sbprintf+0x70>
   85750:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   85754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85758:	f8a8 300c 	strh.w	r3, [r8, #12]
   8575c:	4620      	mov	r0, r4
   8575e:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   85762:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
   85766:	bf00      	nop

00085768 <__swsetup_r>:
   85768:	b538      	push	{r3, r4, r5, lr}
   8576a:	4b2f      	ldr	r3, [pc, #188]	; (85828 <__swsetup_r+0xc0>)
   8576c:	4605      	mov	r5, r0
   8576e:	6818      	ldr	r0, [r3, #0]
   85770:	460c      	mov	r4, r1
   85772:	b110      	cbz	r0, 8577a <__swsetup_r+0x12>
   85774:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85776:	2b00      	cmp	r3, #0
   85778:	d036      	beq.n	857e8 <__swsetup_r+0x80>
   8577a:	89a2      	ldrh	r2, [r4, #12]
   8577c:	b293      	uxth	r3, r2
   8577e:	0718      	lsls	r0, r3, #28
   85780:	d50c      	bpl.n	8579c <__swsetup_r+0x34>
   85782:	6920      	ldr	r0, [r4, #16]
   85784:	b1a8      	cbz	r0, 857b2 <__swsetup_r+0x4a>
   85786:	f013 0201 	ands.w	r2, r3, #1
   8578a:	d01e      	beq.n	857ca <__swsetup_r+0x62>
   8578c:	6963      	ldr	r3, [r4, #20]
   8578e:	2200      	movs	r2, #0
   85790:	425b      	negs	r3, r3
   85792:	61a3      	str	r3, [r4, #24]
   85794:	60a2      	str	r2, [r4, #8]
   85796:	b1f0      	cbz	r0, 857d6 <__swsetup_r+0x6e>
   85798:	2000      	movs	r0, #0
   8579a:	bd38      	pop	{r3, r4, r5, pc}
   8579c:	06d9      	lsls	r1, r3, #27
   8579e:	d53a      	bpl.n	85816 <__swsetup_r+0xae>
   857a0:	0758      	lsls	r0, r3, #29
   857a2:	d424      	bmi.n	857ee <__swsetup_r+0x86>
   857a4:	6920      	ldr	r0, [r4, #16]
   857a6:	f042 0308 	orr.w	r3, r2, #8
   857aa:	81a3      	strh	r3, [r4, #12]
   857ac:	b29b      	uxth	r3, r3
   857ae:	2800      	cmp	r0, #0
   857b0:	d1e9      	bne.n	85786 <__swsetup_r+0x1e>
   857b2:	f403 7220 	and.w	r2, r3, #640	; 0x280
   857b6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   857ba:	d0e4      	beq.n	85786 <__swsetup_r+0x1e>
   857bc:	4628      	mov	r0, r5
   857be:	4621      	mov	r1, r4
   857c0:	f000 fcee 	bl	861a0 <__smakebuf_r>
   857c4:	89a3      	ldrh	r3, [r4, #12]
   857c6:	6920      	ldr	r0, [r4, #16]
   857c8:	e7dd      	b.n	85786 <__swsetup_r+0x1e>
   857ca:	0799      	lsls	r1, r3, #30
   857cc:	bf58      	it	pl
   857ce:	6962      	ldrpl	r2, [r4, #20]
   857d0:	60a2      	str	r2, [r4, #8]
   857d2:	2800      	cmp	r0, #0
   857d4:	d1e0      	bne.n	85798 <__swsetup_r+0x30>
   857d6:	89a3      	ldrh	r3, [r4, #12]
   857d8:	061a      	lsls	r2, r3, #24
   857da:	d5de      	bpl.n	8579a <__swsetup_r+0x32>
   857dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   857e0:	81a3      	strh	r3, [r4, #12]
   857e2:	f04f 30ff 	mov.w	r0, #4294967295
   857e6:	bd38      	pop	{r3, r4, r5, pc}
   857e8:	f000 f968 	bl	85abc <__sinit>
   857ec:	e7c5      	b.n	8577a <__swsetup_r+0x12>
   857ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
   857f0:	b149      	cbz	r1, 85806 <__swsetup_r+0x9e>
   857f2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   857f6:	4299      	cmp	r1, r3
   857f8:	d003      	beq.n	85802 <__swsetup_r+0x9a>
   857fa:	4628      	mov	r0, r5
   857fc:	f000 fa36 	bl	85c6c <_free_r>
   85800:	89a2      	ldrh	r2, [r4, #12]
   85802:	2300      	movs	r3, #0
   85804:	6323      	str	r3, [r4, #48]	; 0x30
   85806:	6920      	ldr	r0, [r4, #16]
   85808:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   8580c:	2300      	movs	r3, #0
   8580e:	b292      	uxth	r2, r2
   85810:	e884 0009 	stmia.w	r4, {r0, r3}
   85814:	e7c7      	b.n	857a6 <__swsetup_r+0x3e>
   85816:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   8581a:	2309      	movs	r3, #9
   8581c:	602b      	str	r3, [r5, #0]
   8581e:	f04f 30ff 	mov.w	r0, #4294967295
   85822:	81a2      	strh	r2, [r4, #12]
   85824:	bd38      	pop	{r3, r4, r5, pc}
   85826:	bf00      	nop
   85828:	200705e0 	.word	0x200705e0

0008582c <register_fini>:
   8582c:	4b02      	ldr	r3, [pc, #8]	; (85838 <register_fini+0xc>)
   8582e:	b113      	cbz	r3, 85836 <register_fini+0xa>
   85830:	4802      	ldr	r0, [pc, #8]	; (8583c <register_fini+0x10>)
   85832:	f000 b805 	b.w	85840 <atexit>
   85836:	4770      	bx	lr
   85838:	00000000 	.word	0x00000000
   8583c:	00085ad1 	.word	0x00085ad1

00085840 <atexit>:
   85840:	4601      	mov	r1, r0
   85842:	2000      	movs	r0, #0
   85844:	4602      	mov	r2, r0
   85846:	4603      	mov	r3, r0
   85848:	f001 bb3e 	b.w	86ec8 <__register_exitproc>

0008584c <__sflush_r>:
   8584c:	898b      	ldrh	r3, [r1, #12]
   8584e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85852:	b29a      	uxth	r2, r3
   85854:	460d      	mov	r5, r1
   85856:	0711      	lsls	r1, r2, #28
   85858:	4680      	mov	r8, r0
   8585a:	d43c      	bmi.n	858d6 <__sflush_r+0x8a>
   8585c:	686a      	ldr	r2, [r5, #4]
   8585e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   85862:	2a00      	cmp	r2, #0
   85864:	81ab      	strh	r3, [r5, #12]
   85866:	dd65      	ble.n	85934 <__sflush_r+0xe8>
   85868:	6aae      	ldr	r6, [r5, #40]	; 0x28
   8586a:	2e00      	cmp	r6, #0
   8586c:	d04b      	beq.n	85906 <__sflush_r+0xba>
   8586e:	b29b      	uxth	r3, r3
   85870:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   85874:	2100      	movs	r1, #0
   85876:	b292      	uxth	r2, r2
   85878:	f8d8 4000 	ldr.w	r4, [r8]
   8587c:	f8c8 1000 	str.w	r1, [r8]
   85880:	2a00      	cmp	r2, #0
   85882:	d05b      	beq.n	8593c <__sflush_r+0xf0>
   85884:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   85886:	075f      	lsls	r7, r3, #29
   85888:	d505      	bpl.n	85896 <__sflush_r+0x4a>
   8588a:	6869      	ldr	r1, [r5, #4]
   8588c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8588e:	1a52      	subs	r2, r2, r1
   85890:	b10b      	cbz	r3, 85896 <__sflush_r+0x4a>
   85892:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   85894:	1ad2      	subs	r2, r2, r3
   85896:	4640      	mov	r0, r8
   85898:	69e9      	ldr	r1, [r5, #28]
   8589a:	2300      	movs	r3, #0
   8589c:	47b0      	blx	r6
   8589e:	1c46      	adds	r6, r0, #1
   858a0:	d056      	beq.n	85950 <__sflush_r+0x104>
   858a2:	89ab      	ldrh	r3, [r5, #12]
   858a4:	692a      	ldr	r2, [r5, #16]
   858a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   858aa:	b29b      	uxth	r3, r3
   858ac:	2100      	movs	r1, #0
   858ae:	602a      	str	r2, [r5, #0]
   858b0:	04da      	lsls	r2, r3, #19
   858b2:	81ab      	strh	r3, [r5, #12]
   858b4:	6069      	str	r1, [r5, #4]
   858b6:	d43b      	bmi.n	85930 <__sflush_r+0xe4>
   858b8:	6b29      	ldr	r1, [r5, #48]	; 0x30
   858ba:	f8c8 4000 	str.w	r4, [r8]
   858be:	b311      	cbz	r1, 85906 <__sflush_r+0xba>
   858c0:	f105 0340 	add.w	r3, r5, #64	; 0x40
   858c4:	4299      	cmp	r1, r3
   858c6:	d002      	beq.n	858ce <__sflush_r+0x82>
   858c8:	4640      	mov	r0, r8
   858ca:	f000 f9cf 	bl	85c6c <_free_r>
   858ce:	2000      	movs	r0, #0
   858d0:	6328      	str	r0, [r5, #48]	; 0x30
   858d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   858d6:	692e      	ldr	r6, [r5, #16]
   858d8:	b1ae      	cbz	r6, 85906 <__sflush_r+0xba>
   858da:	0791      	lsls	r1, r2, #30
   858dc:	682c      	ldr	r4, [r5, #0]
   858de:	bf0c      	ite	eq
   858e0:	696b      	ldreq	r3, [r5, #20]
   858e2:	2300      	movne	r3, #0
   858e4:	602e      	str	r6, [r5, #0]
   858e6:	1ba4      	subs	r4, r4, r6
   858e8:	60ab      	str	r3, [r5, #8]
   858ea:	e00a      	b.n	85902 <__sflush_r+0xb6>
   858ec:	4632      	mov	r2, r6
   858ee:	4623      	mov	r3, r4
   858f0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   858f2:	4640      	mov	r0, r8
   858f4:	69e9      	ldr	r1, [r5, #28]
   858f6:	47b8      	blx	r7
   858f8:	2800      	cmp	r0, #0
   858fa:	eba4 0400 	sub.w	r4, r4, r0
   858fe:	4406      	add	r6, r0
   85900:	dd04      	ble.n	8590c <__sflush_r+0xc0>
   85902:	2c00      	cmp	r4, #0
   85904:	dcf2      	bgt.n	858ec <__sflush_r+0xa0>
   85906:	2000      	movs	r0, #0
   85908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8590c:	89ab      	ldrh	r3, [r5, #12]
   8590e:	f04f 30ff 	mov.w	r0, #4294967295
   85912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85916:	81ab      	strh	r3, [r5, #12]
   85918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8591c:	89ab      	ldrh	r3, [r5, #12]
   8591e:	692a      	ldr	r2, [r5, #16]
   85920:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   85924:	b29b      	uxth	r3, r3
   85926:	81ab      	strh	r3, [r5, #12]
   85928:	04db      	lsls	r3, r3, #19
   8592a:	6069      	str	r1, [r5, #4]
   8592c:	602a      	str	r2, [r5, #0]
   8592e:	d5c3      	bpl.n	858b8 <__sflush_r+0x6c>
   85930:	6528      	str	r0, [r5, #80]	; 0x50
   85932:	e7c1      	b.n	858b8 <__sflush_r+0x6c>
   85934:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   85936:	2a00      	cmp	r2, #0
   85938:	dc96      	bgt.n	85868 <__sflush_r+0x1c>
   8593a:	e7e4      	b.n	85906 <__sflush_r+0xba>
   8593c:	2301      	movs	r3, #1
   8593e:	4640      	mov	r0, r8
   85940:	69e9      	ldr	r1, [r5, #28]
   85942:	47b0      	blx	r6
   85944:	1c43      	adds	r3, r0, #1
   85946:	4602      	mov	r2, r0
   85948:	d019      	beq.n	8597e <__sflush_r+0x132>
   8594a:	89ab      	ldrh	r3, [r5, #12]
   8594c:	6aae      	ldr	r6, [r5, #40]	; 0x28
   8594e:	e79a      	b.n	85886 <__sflush_r+0x3a>
   85950:	f8d8 1000 	ldr.w	r1, [r8]
   85954:	2900      	cmp	r1, #0
   85956:	d0e1      	beq.n	8591c <__sflush_r+0xd0>
   85958:	291d      	cmp	r1, #29
   8595a:	d007      	beq.n	8596c <__sflush_r+0x120>
   8595c:	2916      	cmp	r1, #22
   8595e:	d005      	beq.n	8596c <__sflush_r+0x120>
   85960:	89ab      	ldrh	r3, [r5, #12]
   85962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85966:	81ab      	strh	r3, [r5, #12]
   85968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8596c:	89ab      	ldrh	r3, [r5, #12]
   8596e:	6929      	ldr	r1, [r5, #16]
   85970:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   85974:	2200      	movs	r2, #0
   85976:	81ab      	strh	r3, [r5, #12]
   85978:	e885 0006 	stmia.w	r5, {r1, r2}
   8597c:	e79c      	b.n	858b8 <__sflush_r+0x6c>
   8597e:	f8d8 3000 	ldr.w	r3, [r8]
   85982:	2b00      	cmp	r3, #0
   85984:	d0e1      	beq.n	8594a <__sflush_r+0xfe>
   85986:	2b1d      	cmp	r3, #29
   85988:	d001      	beq.n	8598e <__sflush_r+0x142>
   8598a:	2b16      	cmp	r3, #22
   8598c:	d1be      	bne.n	8590c <__sflush_r+0xc0>
   8598e:	f8c8 4000 	str.w	r4, [r8]
   85992:	e7b8      	b.n	85906 <__sflush_r+0xba>

00085994 <_fflush_r>:
   85994:	b510      	push	{r4, lr}
   85996:	4604      	mov	r4, r0
   85998:	b082      	sub	sp, #8
   8599a:	b108      	cbz	r0, 859a0 <_fflush_r+0xc>
   8599c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8599e:	b153      	cbz	r3, 859b6 <_fflush_r+0x22>
   859a0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   859a4:	b908      	cbnz	r0, 859aa <_fflush_r+0x16>
   859a6:	b002      	add	sp, #8
   859a8:	bd10      	pop	{r4, pc}
   859aa:	4620      	mov	r0, r4
   859ac:	b002      	add	sp, #8
   859ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   859b2:	f7ff bf4b 	b.w	8584c <__sflush_r>
   859b6:	9101      	str	r1, [sp, #4]
   859b8:	f000 f880 	bl	85abc <__sinit>
   859bc:	9901      	ldr	r1, [sp, #4]
   859be:	e7ef      	b.n	859a0 <_fflush_r+0xc>

000859c0 <_cleanup_r>:
   859c0:	4901      	ldr	r1, [pc, #4]	; (859c8 <_cleanup_r+0x8>)
   859c2:	f000 bbbb 	b.w	8613c <_fwalk_reent>
   859c6:	bf00      	nop
   859c8:	00086f91 	.word	0x00086f91

000859cc <__sinit.part.1>:
   859cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   859d0:	4607      	mov	r7, r0
   859d2:	4835      	ldr	r0, [pc, #212]	; (85aa8 <__sinit.part.1+0xdc>)
   859d4:	687d      	ldr	r5, [r7, #4]
   859d6:	2400      	movs	r4, #0
   859d8:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   859dc:	2304      	movs	r3, #4
   859de:	2103      	movs	r1, #3
   859e0:	63f8      	str	r0, [r7, #60]	; 0x3c
   859e2:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   859e6:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   859ea:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   859ee:	b083      	sub	sp, #12
   859f0:	602c      	str	r4, [r5, #0]
   859f2:	606c      	str	r4, [r5, #4]
   859f4:	60ac      	str	r4, [r5, #8]
   859f6:	666c      	str	r4, [r5, #100]	; 0x64
   859f8:	81ec      	strh	r4, [r5, #14]
   859fa:	612c      	str	r4, [r5, #16]
   859fc:	616c      	str	r4, [r5, #20]
   859fe:	61ac      	str	r4, [r5, #24]
   85a00:	81ab      	strh	r3, [r5, #12]
   85a02:	4621      	mov	r1, r4
   85a04:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   85a08:	2208      	movs	r2, #8
   85a0a:	f7fe fef7 	bl	847fc <memset>
   85a0e:	f8df b09c 	ldr.w	fp, [pc, #156]	; 85aac <__sinit.part.1+0xe0>
   85a12:	68be      	ldr	r6, [r7, #8]
   85a14:	f8df a098 	ldr.w	sl, [pc, #152]	; 85ab0 <__sinit.part.1+0xe4>
   85a18:	f8df 9098 	ldr.w	r9, [pc, #152]	; 85ab4 <__sinit.part.1+0xe8>
   85a1c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 85ab8 <__sinit.part.1+0xec>
   85a20:	2301      	movs	r3, #1
   85a22:	2209      	movs	r2, #9
   85a24:	f8c5 b020 	str.w	fp, [r5, #32]
   85a28:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   85a2c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   85a30:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   85a34:	61ed      	str	r5, [r5, #28]
   85a36:	4621      	mov	r1, r4
   85a38:	81f3      	strh	r3, [r6, #14]
   85a3a:	81b2      	strh	r2, [r6, #12]
   85a3c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   85a40:	6034      	str	r4, [r6, #0]
   85a42:	6074      	str	r4, [r6, #4]
   85a44:	60b4      	str	r4, [r6, #8]
   85a46:	6674      	str	r4, [r6, #100]	; 0x64
   85a48:	6134      	str	r4, [r6, #16]
   85a4a:	6174      	str	r4, [r6, #20]
   85a4c:	61b4      	str	r4, [r6, #24]
   85a4e:	2208      	movs	r2, #8
   85a50:	9301      	str	r3, [sp, #4]
   85a52:	f7fe fed3 	bl	847fc <memset>
   85a56:	68fd      	ldr	r5, [r7, #12]
   85a58:	2012      	movs	r0, #18
   85a5a:	2202      	movs	r2, #2
   85a5c:	61f6      	str	r6, [r6, #28]
   85a5e:	f8c6 b020 	str.w	fp, [r6, #32]
   85a62:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   85a66:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   85a6a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   85a6e:	4621      	mov	r1, r4
   85a70:	81a8      	strh	r0, [r5, #12]
   85a72:	81ea      	strh	r2, [r5, #14]
   85a74:	602c      	str	r4, [r5, #0]
   85a76:	606c      	str	r4, [r5, #4]
   85a78:	60ac      	str	r4, [r5, #8]
   85a7a:	666c      	str	r4, [r5, #100]	; 0x64
   85a7c:	612c      	str	r4, [r5, #16]
   85a7e:	616c      	str	r4, [r5, #20]
   85a80:	61ac      	str	r4, [r5, #24]
   85a82:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   85a86:	2208      	movs	r2, #8
   85a88:	f7fe feb8 	bl	847fc <memset>
   85a8c:	9b01      	ldr	r3, [sp, #4]
   85a8e:	61ed      	str	r5, [r5, #28]
   85a90:	f8c5 b020 	str.w	fp, [r5, #32]
   85a94:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   85a98:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   85a9c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   85aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   85aa2:	b003      	add	sp, #12
   85aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85aa8:	000859c1 	.word	0x000859c1
   85aac:	00086d05 	.word	0x00086d05
   85ab0:	00086d29 	.word	0x00086d29
   85ab4:	00086d61 	.word	0x00086d61
   85ab8:	00086d81 	.word	0x00086d81

00085abc <__sinit>:
   85abc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85abe:	b103      	cbz	r3, 85ac2 <__sinit+0x6>
   85ac0:	4770      	bx	lr
   85ac2:	f7ff bf83 	b.w	859cc <__sinit.part.1>
   85ac6:	bf00      	nop

00085ac8 <__sfp_lock_acquire>:
   85ac8:	4770      	bx	lr
   85aca:	bf00      	nop

00085acc <__sfp_lock_release>:
   85acc:	4770      	bx	lr
   85ace:	bf00      	nop

00085ad0 <__libc_fini_array>:
   85ad0:	b538      	push	{r3, r4, r5, lr}
   85ad2:	4b08      	ldr	r3, [pc, #32]	; (85af4 <__libc_fini_array+0x24>)
   85ad4:	4d08      	ldr	r5, [pc, #32]	; (85af8 <__libc_fini_array+0x28>)
   85ad6:	1aed      	subs	r5, r5, r3
   85ad8:	10ac      	asrs	r4, r5, #2
   85ada:	bf18      	it	ne
   85adc:	18ed      	addne	r5, r5, r3
   85ade:	d005      	beq.n	85aec <__libc_fini_array+0x1c>
   85ae0:	3c01      	subs	r4, #1
   85ae2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   85ae6:	4798      	blx	r3
   85ae8:	2c00      	cmp	r4, #0
   85aea:	d1f9      	bne.n	85ae0 <__libc_fini_array+0x10>
   85aec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   85af0:	f001 bea0 	b.w	87834 <_fini>
   85af4:	00087840 	.word	0x00087840
   85af8:	00087844 	.word	0x00087844

00085afc <__fputwc>:
   85afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85b00:	b082      	sub	sp, #8
   85b02:	4607      	mov	r7, r0
   85b04:	460e      	mov	r6, r1
   85b06:	4614      	mov	r4, r2
   85b08:	f000 fb44 	bl	86194 <__locale_mb_cur_max>
   85b0c:	2801      	cmp	r0, #1
   85b0e:	d040      	beq.n	85b92 <__fputwc+0x96>
   85b10:	4638      	mov	r0, r7
   85b12:	a901      	add	r1, sp, #4
   85b14:	4632      	mov	r2, r6
   85b16:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   85b1a:	f001 f989 	bl	86e30 <_wcrtomb_r>
   85b1e:	f1b0 3fff 	cmp.w	r0, #4294967295
   85b22:	4680      	mov	r8, r0
   85b24:	d02e      	beq.n	85b84 <__fputwc+0x88>
   85b26:	2800      	cmp	r0, #0
   85b28:	d03b      	beq.n	85ba2 <__fputwc+0xa6>
   85b2a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   85b2e:	2500      	movs	r5, #0
   85b30:	e009      	b.n	85b46 <__fputwc+0x4a>
   85b32:	6823      	ldr	r3, [r4, #0]
   85b34:	7019      	strb	r1, [r3, #0]
   85b36:	6823      	ldr	r3, [r4, #0]
   85b38:	3301      	adds	r3, #1
   85b3a:	6023      	str	r3, [r4, #0]
   85b3c:	3501      	adds	r5, #1
   85b3e:	45a8      	cmp	r8, r5
   85b40:	d92f      	bls.n	85ba2 <__fputwc+0xa6>
   85b42:	ab01      	add	r3, sp, #4
   85b44:	5d59      	ldrb	r1, [r3, r5]
   85b46:	68a3      	ldr	r3, [r4, #8]
   85b48:	3b01      	subs	r3, #1
   85b4a:	2b00      	cmp	r3, #0
   85b4c:	60a3      	str	r3, [r4, #8]
   85b4e:	daf0      	bge.n	85b32 <__fputwc+0x36>
   85b50:	69a2      	ldr	r2, [r4, #24]
   85b52:	4293      	cmp	r3, r2
   85b54:	db06      	blt.n	85b64 <__fputwc+0x68>
   85b56:	6823      	ldr	r3, [r4, #0]
   85b58:	7019      	strb	r1, [r3, #0]
   85b5a:	6823      	ldr	r3, [r4, #0]
   85b5c:	7819      	ldrb	r1, [r3, #0]
   85b5e:	3301      	adds	r3, #1
   85b60:	290a      	cmp	r1, #10
   85b62:	d1ea      	bne.n	85b3a <__fputwc+0x3e>
   85b64:	4638      	mov	r0, r7
   85b66:	4622      	mov	r2, r4
   85b68:	f001 f90e 	bl	86d88 <__swbuf_r>
   85b6c:	f1a0 30ff 	sub.w	r0, r0, #4294967295
   85b70:	fab0 f080 	clz	r0, r0
   85b74:	0940      	lsrs	r0, r0, #5
   85b76:	2800      	cmp	r0, #0
   85b78:	d0e0      	beq.n	85b3c <__fputwc+0x40>
   85b7a:	f04f 30ff 	mov.w	r0, #4294967295
   85b7e:	b002      	add	sp, #8
   85b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85b84:	89a3      	ldrh	r3, [r4, #12]
   85b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85b8a:	81a3      	strh	r3, [r4, #12]
   85b8c:	b002      	add	sp, #8
   85b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85b92:	1e73      	subs	r3, r6, #1
   85b94:	2bfe      	cmp	r3, #254	; 0xfe
   85b96:	d8bb      	bhi.n	85b10 <__fputwc+0x14>
   85b98:	b2f1      	uxtb	r1, r6
   85b9a:	4680      	mov	r8, r0
   85b9c:	f88d 1004 	strb.w	r1, [sp, #4]
   85ba0:	e7c5      	b.n	85b2e <__fputwc+0x32>
   85ba2:	4630      	mov	r0, r6
   85ba4:	b002      	add	sp, #8
   85ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85baa:	bf00      	nop

00085bac <_fputwc_r>:
   85bac:	8993      	ldrh	r3, [r2, #12]
   85bae:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   85bb2:	d10b      	bne.n	85bcc <_fputwc_r+0x20>
   85bb4:	b410      	push	{r4}
   85bb6:	6e54      	ldr	r4, [r2, #100]	; 0x64
   85bb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   85bbc:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   85bc0:	6654      	str	r4, [r2, #100]	; 0x64
   85bc2:	8193      	strh	r3, [r2, #12]
   85bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
   85bc8:	f7ff bf98 	b.w	85afc <__fputwc>
   85bcc:	f7ff bf96 	b.w	85afc <__fputwc>

00085bd0 <_malloc_trim_r>:
   85bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85bd2:	460c      	mov	r4, r1
   85bd4:	4f22      	ldr	r7, [pc, #136]	; (85c60 <_malloc_trim_r+0x90>)
   85bd6:	4606      	mov	r6, r0
   85bd8:	f000 fe8e 	bl	868f8 <__malloc_lock>
   85bdc:	68bb      	ldr	r3, [r7, #8]
   85bde:	685d      	ldr	r5, [r3, #4]
   85be0:	f025 0503 	bic.w	r5, r5, #3
   85be4:	1b29      	subs	r1, r5, r4
   85be6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   85bea:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   85bee:	f021 010f 	bic.w	r1, r1, #15
   85bf2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   85bf6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   85bfa:	db07      	blt.n	85c0c <_malloc_trim_r+0x3c>
   85bfc:	4630      	mov	r0, r6
   85bfe:	2100      	movs	r1, #0
   85c00:	f001 f86e 	bl	86ce0 <_sbrk_r>
   85c04:	68bb      	ldr	r3, [r7, #8]
   85c06:	442b      	add	r3, r5
   85c08:	4298      	cmp	r0, r3
   85c0a:	d004      	beq.n	85c16 <_malloc_trim_r+0x46>
   85c0c:	4630      	mov	r0, r6
   85c0e:	f000 fe75 	bl	868fc <__malloc_unlock>
   85c12:	2000      	movs	r0, #0
   85c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85c16:	4630      	mov	r0, r6
   85c18:	4261      	negs	r1, r4
   85c1a:	f001 f861 	bl	86ce0 <_sbrk_r>
   85c1e:	3001      	adds	r0, #1
   85c20:	d00d      	beq.n	85c3e <_malloc_trim_r+0x6e>
   85c22:	4b10      	ldr	r3, [pc, #64]	; (85c64 <_malloc_trim_r+0x94>)
   85c24:	68ba      	ldr	r2, [r7, #8]
   85c26:	6819      	ldr	r1, [r3, #0]
   85c28:	1b2d      	subs	r5, r5, r4
   85c2a:	f045 0501 	orr.w	r5, r5, #1
   85c2e:	4630      	mov	r0, r6
   85c30:	1b09      	subs	r1, r1, r4
   85c32:	6055      	str	r5, [r2, #4]
   85c34:	6019      	str	r1, [r3, #0]
   85c36:	f000 fe61 	bl	868fc <__malloc_unlock>
   85c3a:	2001      	movs	r0, #1
   85c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85c3e:	4630      	mov	r0, r6
   85c40:	2100      	movs	r1, #0
   85c42:	f001 f84d 	bl	86ce0 <_sbrk_r>
   85c46:	68ba      	ldr	r2, [r7, #8]
   85c48:	1a83      	subs	r3, r0, r2
   85c4a:	2b0f      	cmp	r3, #15
   85c4c:	ddde      	ble.n	85c0c <_malloc_trim_r+0x3c>
   85c4e:	4c06      	ldr	r4, [pc, #24]	; (85c68 <_malloc_trim_r+0x98>)
   85c50:	4904      	ldr	r1, [pc, #16]	; (85c64 <_malloc_trim_r+0x94>)
   85c52:	6824      	ldr	r4, [r4, #0]
   85c54:	f043 0301 	orr.w	r3, r3, #1
   85c58:	1b00      	subs	r0, r0, r4
   85c5a:	6053      	str	r3, [r2, #4]
   85c5c:	6008      	str	r0, [r1, #0]
   85c5e:	e7d5      	b.n	85c0c <_malloc_trim_r+0x3c>
   85c60:	20070608 	.word	0x20070608
   85c64:	2007acec 	.word	0x2007acec
   85c68:	20070a14 	.word	0x20070a14

00085c6c <_free_r>:
   85c6c:	2900      	cmp	r1, #0
   85c6e:	d04e      	beq.n	85d0e <_free_r+0xa2>
   85c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85c74:	460c      	mov	r4, r1
   85c76:	4680      	mov	r8, r0
   85c78:	f000 fe3e 	bl	868f8 <__malloc_lock>
   85c7c:	f854 7c04 	ldr.w	r7, [r4, #-4]
   85c80:	4962      	ldr	r1, [pc, #392]	; (85e0c <_free_r+0x1a0>)
   85c82:	f1a4 0508 	sub.w	r5, r4, #8
   85c86:	f027 0201 	bic.w	r2, r7, #1
   85c8a:	18ab      	adds	r3, r5, r2
   85c8c:	688e      	ldr	r6, [r1, #8]
   85c8e:	6858      	ldr	r0, [r3, #4]
   85c90:	429e      	cmp	r6, r3
   85c92:	f020 0003 	bic.w	r0, r0, #3
   85c96:	d05a      	beq.n	85d4e <_free_r+0xe2>
   85c98:	07fe      	lsls	r6, r7, #31
   85c9a:	6058      	str	r0, [r3, #4]
   85c9c:	d40b      	bmi.n	85cb6 <_free_r+0x4a>
   85c9e:	f854 7c08 	ldr.w	r7, [r4, #-8]
   85ca2:	f101 0e08 	add.w	lr, r1, #8
   85ca6:	1bed      	subs	r5, r5, r7
   85ca8:	68ac      	ldr	r4, [r5, #8]
   85caa:	443a      	add	r2, r7
   85cac:	4574      	cmp	r4, lr
   85cae:	d067      	beq.n	85d80 <_free_r+0x114>
   85cb0:	68ef      	ldr	r7, [r5, #12]
   85cb2:	60e7      	str	r7, [r4, #12]
   85cb4:	60bc      	str	r4, [r7, #8]
   85cb6:	181c      	adds	r4, r3, r0
   85cb8:	6864      	ldr	r4, [r4, #4]
   85cba:	07e4      	lsls	r4, r4, #31
   85cbc:	d40c      	bmi.n	85cd8 <_free_r+0x6c>
   85cbe:	4f54      	ldr	r7, [pc, #336]	; (85e10 <_free_r+0x1a4>)
   85cc0:	689c      	ldr	r4, [r3, #8]
   85cc2:	4402      	add	r2, r0
   85cc4:	42bc      	cmp	r4, r7
   85cc6:	d07c      	beq.n	85dc2 <_free_r+0x156>
   85cc8:	68d8      	ldr	r0, [r3, #12]
   85cca:	f042 0301 	orr.w	r3, r2, #1
   85cce:	60e0      	str	r0, [r4, #12]
   85cd0:	6084      	str	r4, [r0, #8]
   85cd2:	606b      	str	r3, [r5, #4]
   85cd4:	50aa      	str	r2, [r5, r2]
   85cd6:	e003      	b.n	85ce0 <_free_r+0x74>
   85cd8:	f042 0301 	orr.w	r3, r2, #1
   85cdc:	606b      	str	r3, [r5, #4]
   85cde:	50aa      	str	r2, [r5, r2]
   85ce0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   85ce4:	d214      	bcs.n	85d10 <_free_r+0xa4>
   85ce6:	08d2      	lsrs	r2, r2, #3
   85ce8:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   85cec:	2401      	movs	r4, #1
   85cee:	6848      	ldr	r0, [r1, #4]
   85cf0:	1092      	asrs	r2, r2, #2
   85cf2:	fa04 f202 	lsl.w	r2, r4, r2
   85cf6:	689c      	ldr	r4, [r3, #8]
   85cf8:	4310      	orrs	r0, r2
   85cfa:	60ac      	str	r4, [r5, #8]
   85cfc:	60eb      	str	r3, [r5, #12]
   85cfe:	6048      	str	r0, [r1, #4]
   85d00:	609d      	str	r5, [r3, #8]
   85d02:	60e5      	str	r5, [r4, #12]
   85d04:	4640      	mov	r0, r8
   85d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85d0a:	f000 bdf7 	b.w	868fc <__malloc_unlock>
   85d0e:	4770      	bx	lr
   85d10:	0a53      	lsrs	r3, r2, #9
   85d12:	2b04      	cmp	r3, #4
   85d14:	d847      	bhi.n	85da6 <_free_r+0x13a>
   85d16:	0993      	lsrs	r3, r2, #6
   85d18:	f103 0438 	add.w	r4, r3, #56	; 0x38
   85d1c:	0060      	lsls	r0, r4, #1
   85d1e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   85d22:	6883      	ldr	r3, [r0, #8]
   85d24:	4939      	ldr	r1, [pc, #228]	; (85e0c <_free_r+0x1a0>)
   85d26:	4283      	cmp	r3, r0
   85d28:	d043      	beq.n	85db2 <_free_r+0x146>
   85d2a:	6859      	ldr	r1, [r3, #4]
   85d2c:	f021 0103 	bic.w	r1, r1, #3
   85d30:	4291      	cmp	r1, r2
   85d32:	d902      	bls.n	85d3a <_free_r+0xce>
   85d34:	689b      	ldr	r3, [r3, #8]
   85d36:	4298      	cmp	r0, r3
   85d38:	d1f7      	bne.n	85d2a <_free_r+0xbe>
   85d3a:	68da      	ldr	r2, [r3, #12]
   85d3c:	60ea      	str	r2, [r5, #12]
   85d3e:	60ab      	str	r3, [r5, #8]
   85d40:	4640      	mov	r0, r8
   85d42:	6095      	str	r5, [r2, #8]
   85d44:	60dd      	str	r5, [r3, #12]
   85d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85d4a:	f000 bdd7 	b.w	868fc <__malloc_unlock>
   85d4e:	07ff      	lsls	r7, r7, #31
   85d50:	4402      	add	r2, r0
   85d52:	d407      	bmi.n	85d64 <_free_r+0xf8>
   85d54:	f854 4c08 	ldr.w	r4, [r4, #-8]
   85d58:	1b2d      	subs	r5, r5, r4
   85d5a:	68eb      	ldr	r3, [r5, #12]
   85d5c:	68a8      	ldr	r0, [r5, #8]
   85d5e:	4422      	add	r2, r4
   85d60:	60c3      	str	r3, [r0, #12]
   85d62:	6098      	str	r0, [r3, #8]
   85d64:	4b2b      	ldr	r3, [pc, #172]	; (85e14 <_free_r+0x1a8>)
   85d66:	f042 0001 	orr.w	r0, r2, #1
   85d6a:	681b      	ldr	r3, [r3, #0]
   85d6c:	6068      	str	r0, [r5, #4]
   85d6e:	429a      	cmp	r2, r3
   85d70:	608d      	str	r5, [r1, #8]
   85d72:	d3c7      	bcc.n	85d04 <_free_r+0x98>
   85d74:	4b28      	ldr	r3, [pc, #160]	; (85e18 <_free_r+0x1ac>)
   85d76:	4640      	mov	r0, r8
   85d78:	6819      	ldr	r1, [r3, #0]
   85d7a:	f7ff ff29 	bl	85bd0 <_malloc_trim_r>
   85d7e:	e7c1      	b.n	85d04 <_free_r+0x98>
   85d80:	1819      	adds	r1, r3, r0
   85d82:	6849      	ldr	r1, [r1, #4]
   85d84:	07c9      	lsls	r1, r1, #31
   85d86:	d409      	bmi.n	85d9c <_free_r+0x130>
   85d88:	68d9      	ldr	r1, [r3, #12]
   85d8a:	4402      	add	r2, r0
   85d8c:	689b      	ldr	r3, [r3, #8]
   85d8e:	f042 0001 	orr.w	r0, r2, #1
   85d92:	60d9      	str	r1, [r3, #12]
   85d94:	608b      	str	r3, [r1, #8]
   85d96:	6068      	str	r0, [r5, #4]
   85d98:	50aa      	str	r2, [r5, r2]
   85d9a:	e7b3      	b.n	85d04 <_free_r+0x98>
   85d9c:	f042 0301 	orr.w	r3, r2, #1
   85da0:	606b      	str	r3, [r5, #4]
   85da2:	50aa      	str	r2, [r5, r2]
   85da4:	e7ae      	b.n	85d04 <_free_r+0x98>
   85da6:	2b14      	cmp	r3, #20
   85da8:	d814      	bhi.n	85dd4 <_free_r+0x168>
   85daa:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   85dae:	0060      	lsls	r0, r4, #1
   85db0:	e7b5      	b.n	85d1e <_free_r+0xb2>
   85db2:	684a      	ldr	r2, [r1, #4]
   85db4:	10a4      	asrs	r4, r4, #2
   85db6:	2001      	movs	r0, #1
   85db8:	40a0      	lsls	r0, r4
   85dba:	4302      	orrs	r2, r0
   85dbc:	604a      	str	r2, [r1, #4]
   85dbe:	461a      	mov	r2, r3
   85dc0:	e7bc      	b.n	85d3c <_free_r+0xd0>
   85dc2:	f042 0301 	orr.w	r3, r2, #1
   85dc6:	614d      	str	r5, [r1, #20]
   85dc8:	610d      	str	r5, [r1, #16]
   85dca:	60ec      	str	r4, [r5, #12]
   85dcc:	60ac      	str	r4, [r5, #8]
   85dce:	606b      	str	r3, [r5, #4]
   85dd0:	50aa      	str	r2, [r5, r2]
   85dd2:	e797      	b.n	85d04 <_free_r+0x98>
   85dd4:	2b54      	cmp	r3, #84	; 0x54
   85dd6:	d804      	bhi.n	85de2 <_free_r+0x176>
   85dd8:	0b13      	lsrs	r3, r2, #12
   85dda:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   85dde:	0060      	lsls	r0, r4, #1
   85de0:	e79d      	b.n	85d1e <_free_r+0xb2>
   85de2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   85de6:	d804      	bhi.n	85df2 <_free_r+0x186>
   85de8:	0bd3      	lsrs	r3, r2, #15
   85dea:	f103 0477 	add.w	r4, r3, #119	; 0x77
   85dee:	0060      	lsls	r0, r4, #1
   85df0:	e795      	b.n	85d1e <_free_r+0xb2>
   85df2:	f240 5054 	movw	r0, #1364	; 0x554
   85df6:	4283      	cmp	r3, r0
   85df8:	d804      	bhi.n	85e04 <_free_r+0x198>
   85dfa:	0c93      	lsrs	r3, r2, #18
   85dfc:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   85e00:	0060      	lsls	r0, r4, #1
   85e02:	e78c      	b.n	85d1e <_free_r+0xb2>
   85e04:	20fc      	movs	r0, #252	; 0xfc
   85e06:	247e      	movs	r4, #126	; 0x7e
   85e08:	e789      	b.n	85d1e <_free_r+0xb2>
   85e0a:	bf00      	nop
   85e0c:	20070608 	.word	0x20070608
   85e10:	20070610 	.word	0x20070610
   85e14:	20070a10 	.word	0x20070a10
   85e18:	2007ace8 	.word	0x2007ace8

00085e1c <__sfvwrite_r>:
   85e1c:	6893      	ldr	r3, [r2, #8]
   85e1e:	2b00      	cmp	r3, #0
   85e20:	f000 80b1 	beq.w	85f86 <__sfvwrite_r+0x16a>
   85e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85e28:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   85e2c:	b083      	sub	sp, #12
   85e2e:	f01e 0f08 	tst.w	lr, #8
   85e32:	460c      	mov	r4, r1
   85e34:	4681      	mov	r9, r0
   85e36:	4616      	mov	r6, r2
   85e38:	d028      	beq.n	85e8c <__sfvwrite_r+0x70>
   85e3a:	690b      	ldr	r3, [r1, #16]
   85e3c:	b333      	cbz	r3, 85e8c <__sfvwrite_r+0x70>
   85e3e:	f00e 0802 	and.w	r8, lr, #2
   85e42:	fa1f f088 	uxth.w	r0, r8
   85e46:	6835      	ldr	r5, [r6, #0]
   85e48:	b380      	cbz	r0, 85eac <__sfvwrite_r+0x90>
   85e4a:	f04f 0b00 	mov.w	fp, #0
   85e4e:	46d8      	mov	r8, fp
   85e50:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 86138 <__sfvwrite_r+0x31c>
   85e54:	f1b8 0f00 	cmp.w	r8, #0
   85e58:	f000 808f 	beq.w	85f7a <__sfvwrite_r+0x15e>
   85e5c:	45d0      	cmp	r8, sl
   85e5e:	4643      	mov	r3, r8
   85e60:	4648      	mov	r0, r9
   85e62:	bf28      	it	cs
   85e64:	4653      	movcs	r3, sl
   85e66:	69e1      	ldr	r1, [r4, #28]
   85e68:	465a      	mov	r2, fp
   85e6a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85e6c:	47b8      	blx	r7
   85e6e:	2800      	cmp	r0, #0
   85e70:	f340 80a8 	ble.w	85fc4 <__sfvwrite_r+0x1a8>
   85e74:	68b3      	ldr	r3, [r6, #8]
   85e76:	4483      	add	fp, r0
   85e78:	1a1b      	subs	r3, r3, r0
   85e7a:	ebc0 0808 	rsb	r8, r0, r8
   85e7e:	60b3      	str	r3, [r6, #8]
   85e80:	2b00      	cmp	r3, #0
   85e82:	d1e7      	bne.n	85e54 <__sfvwrite_r+0x38>
   85e84:	2000      	movs	r0, #0
   85e86:	b003      	add	sp, #12
   85e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85e8c:	4648      	mov	r0, r9
   85e8e:	4621      	mov	r1, r4
   85e90:	f7ff fc6a 	bl	85768 <__swsetup_r>
   85e94:	2800      	cmp	r0, #0
   85e96:	f040 8146 	bne.w	86126 <__sfvwrite_r+0x30a>
   85e9a:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   85e9e:	6835      	ldr	r5, [r6, #0]
   85ea0:	f00e 0802 	and.w	r8, lr, #2
   85ea4:	fa1f f088 	uxth.w	r0, r8
   85ea8:	2800      	cmp	r0, #0
   85eaa:	d1ce      	bne.n	85e4a <__sfvwrite_r+0x2e>
   85eac:	f01e 0b01 	ands.w	fp, lr, #1
   85eb0:	f040 8091 	bne.w	85fd6 <__sfvwrite_r+0x1ba>
   85eb4:	46d8      	mov	r8, fp
   85eb6:	f1b8 0f00 	cmp.w	r8, #0
   85eba:	d058      	beq.n	85f6e <__sfvwrite_r+0x152>
   85ebc:	f41e 7f00 	tst.w	lr, #512	; 0x200
   85ec0:	68a7      	ldr	r7, [r4, #8]
   85ec2:	d062      	beq.n	85f8a <__sfvwrite_r+0x16e>
   85ec4:	45b8      	cmp	r8, r7
   85ec6:	46ba      	mov	sl, r7
   85ec8:	f0c0 80c2 	bcc.w	86050 <__sfvwrite_r+0x234>
   85ecc:	f41e 6f90 	tst.w	lr, #1152	; 0x480
   85ed0:	f000 80c0 	beq.w	86054 <__sfvwrite_r+0x238>
   85ed4:	6967      	ldr	r7, [r4, #20]
   85ed6:	6921      	ldr	r1, [r4, #16]
   85ed8:	6823      	ldr	r3, [r4, #0]
   85eda:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   85ede:	1a5b      	subs	r3, r3, r1
   85ee0:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   85ee4:	1c58      	adds	r0, r3, #1
   85ee6:	107f      	asrs	r7, r7, #1
   85ee8:	4440      	add	r0, r8
   85eea:	4287      	cmp	r7, r0
   85eec:	463a      	mov	r2, r7
   85eee:	bf3c      	itt	cc
   85ef0:	4607      	movcc	r7, r0
   85ef2:	463a      	movcc	r2, r7
   85ef4:	f41e 6f80 	tst.w	lr, #1024	; 0x400
   85ef8:	9300      	str	r3, [sp, #0]
   85efa:	f000 80fb 	beq.w	860f4 <__sfvwrite_r+0x2d8>
   85efe:	4611      	mov	r1, r2
   85f00:	4648      	mov	r0, r9
   85f02:	f000 f9c5 	bl	86290 <_malloc_r>
   85f06:	9b00      	ldr	r3, [sp, #0]
   85f08:	4682      	mov	sl, r0
   85f0a:	2800      	cmp	r0, #0
   85f0c:	f000 810e 	beq.w	8612c <__sfvwrite_r+0x310>
   85f10:	461a      	mov	r2, r3
   85f12:	6921      	ldr	r1, [r4, #16]
   85f14:	9300      	str	r3, [sp, #0]
   85f16:	f7fe fbfb 	bl	84710 <memcpy>
   85f1a:	89a2      	ldrh	r2, [r4, #12]
   85f1c:	9b00      	ldr	r3, [sp, #0]
   85f1e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   85f22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   85f26:	81a2      	strh	r2, [r4, #12]
   85f28:	eb0a 0003 	add.w	r0, sl, r3
   85f2c:	f8c4 a010 	str.w	sl, [r4, #16]
   85f30:	1afb      	subs	r3, r7, r3
   85f32:	6167      	str	r7, [r4, #20]
   85f34:	46c2      	mov	sl, r8
   85f36:	4647      	mov	r7, r8
   85f38:	6020      	str	r0, [r4, #0]
   85f3a:	60a3      	str	r3, [r4, #8]
   85f3c:	4652      	mov	r2, sl
   85f3e:	4659      	mov	r1, fp
   85f40:	f000 fc76 	bl	86830 <memmove>
   85f44:	68a0      	ldr	r0, [r4, #8]
   85f46:	6822      	ldr	r2, [r4, #0]
   85f48:	1bc0      	subs	r0, r0, r7
   85f4a:	60a0      	str	r0, [r4, #8]
   85f4c:	4640      	mov	r0, r8
   85f4e:	eb02 030a 	add.w	r3, r2, sl
   85f52:	6023      	str	r3, [r4, #0]
   85f54:	68b3      	ldr	r3, [r6, #8]
   85f56:	4483      	add	fp, r0
   85f58:	1a1b      	subs	r3, r3, r0
   85f5a:	ebc0 0808 	rsb	r8, r0, r8
   85f5e:	60b3      	str	r3, [r6, #8]
   85f60:	2b00      	cmp	r3, #0
   85f62:	d08f      	beq.n	85e84 <__sfvwrite_r+0x68>
   85f64:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   85f68:	f1b8 0f00 	cmp.w	r8, #0
   85f6c:	d1a6      	bne.n	85ebc <__sfvwrite_r+0xa0>
   85f6e:	f8d5 b000 	ldr.w	fp, [r5]
   85f72:	f8d5 8004 	ldr.w	r8, [r5, #4]
   85f76:	3508      	adds	r5, #8
   85f78:	e79d      	b.n	85eb6 <__sfvwrite_r+0x9a>
   85f7a:	f8d5 b000 	ldr.w	fp, [r5]
   85f7e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   85f82:	3508      	adds	r5, #8
   85f84:	e766      	b.n	85e54 <__sfvwrite_r+0x38>
   85f86:	2000      	movs	r0, #0
   85f88:	4770      	bx	lr
   85f8a:	6820      	ldr	r0, [r4, #0]
   85f8c:	6923      	ldr	r3, [r4, #16]
   85f8e:	4298      	cmp	r0, r3
   85f90:	d803      	bhi.n	85f9a <__sfvwrite_r+0x17e>
   85f92:	6962      	ldr	r2, [r4, #20]
   85f94:	4590      	cmp	r8, r2
   85f96:	f080 8085 	bcs.w	860a4 <__sfvwrite_r+0x288>
   85f9a:	4547      	cmp	r7, r8
   85f9c:	bf28      	it	cs
   85f9e:	4647      	movcs	r7, r8
   85fa0:	4659      	mov	r1, fp
   85fa2:	463a      	mov	r2, r7
   85fa4:	f000 fc44 	bl	86830 <memmove>
   85fa8:	68a3      	ldr	r3, [r4, #8]
   85faa:	6822      	ldr	r2, [r4, #0]
   85fac:	1bdb      	subs	r3, r3, r7
   85fae:	443a      	add	r2, r7
   85fb0:	60a3      	str	r3, [r4, #8]
   85fb2:	6022      	str	r2, [r4, #0]
   85fb4:	2b00      	cmp	r3, #0
   85fb6:	d149      	bne.n	8604c <__sfvwrite_r+0x230>
   85fb8:	4648      	mov	r0, r9
   85fba:	4621      	mov	r1, r4
   85fbc:	f7ff fcea 	bl	85994 <_fflush_r>
   85fc0:	2800      	cmp	r0, #0
   85fc2:	d043      	beq.n	8604c <__sfvwrite_r+0x230>
   85fc4:	89a3      	ldrh	r3, [r4, #12]
   85fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85fca:	f04f 30ff 	mov.w	r0, #4294967295
   85fce:	81a3      	strh	r3, [r4, #12]
   85fd0:	b003      	add	sp, #12
   85fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85fd6:	4680      	mov	r8, r0
   85fd8:	4683      	mov	fp, r0
   85fda:	4682      	mov	sl, r0
   85fdc:	9000      	str	r0, [sp, #0]
   85fde:	f1ba 0f00 	cmp.w	sl, #0
   85fe2:	d02b      	beq.n	8603c <__sfvwrite_r+0x220>
   85fe4:	9b00      	ldr	r3, [sp, #0]
   85fe6:	2b00      	cmp	r3, #0
   85fe8:	d04f      	beq.n	8608a <__sfvwrite_r+0x26e>
   85fea:	45d0      	cmp	r8, sl
   85fec:	4643      	mov	r3, r8
   85fee:	bf28      	it	cs
   85ff0:	4653      	movcs	r3, sl
   85ff2:	6820      	ldr	r0, [r4, #0]
   85ff4:	6921      	ldr	r1, [r4, #16]
   85ff6:	461f      	mov	r7, r3
   85ff8:	4288      	cmp	r0, r1
   85ffa:	f8d4 e008 	ldr.w	lr, [r4, #8]
   85ffe:	6962      	ldr	r2, [r4, #20]
   86000:	d903      	bls.n	8600a <__sfvwrite_r+0x1ee>
   86002:	eb0e 0c02 	add.w	ip, lr, r2
   86006:	4563      	cmp	r3, ip
   86008:	dc5e      	bgt.n	860c8 <__sfvwrite_r+0x2ac>
   8600a:	4293      	cmp	r3, r2
   8600c:	db24      	blt.n	86058 <__sfvwrite_r+0x23c>
   8600e:	4613      	mov	r3, r2
   86010:	6a67      	ldr	r7, [r4, #36]	; 0x24
   86012:	4648      	mov	r0, r9
   86014:	69e1      	ldr	r1, [r4, #28]
   86016:	465a      	mov	r2, fp
   86018:	47b8      	blx	r7
   8601a:	1e07      	subs	r7, r0, #0
   8601c:	ddd2      	ble.n	85fc4 <__sfvwrite_r+0x1a8>
   8601e:	ebb8 0807 	subs.w	r8, r8, r7
   86022:	d029      	beq.n	86078 <__sfvwrite_r+0x25c>
   86024:	68b3      	ldr	r3, [r6, #8]
   86026:	44bb      	add	fp, r7
   86028:	1bdb      	subs	r3, r3, r7
   8602a:	ebc7 0a0a 	rsb	sl, r7, sl
   8602e:	60b3      	str	r3, [r6, #8]
   86030:	2b00      	cmp	r3, #0
   86032:	f43f af27 	beq.w	85e84 <__sfvwrite_r+0x68>
   86036:	f1ba 0f00 	cmp.w	sl, #0
   8603a:	d1d3      	bne.n	85fe4 <__sfvwrite_r+0x1c8>
   8603c:	2300      	movs	r3, #0
   8603e:	f8d5 b000 	ldr.w	fp, [r5]
   86042:	f8d5 a004 	ldr.w	sl, [r5, #4]
   86046:	9300      	str	r3, [sp, #0]
   86048:	3508      	adds	r5, #8
   8604a:	e7c8      	b.n	85fde <__sfvwrite_r+0x1c2>
   8604c:	4638      	mov	r0, r7
   8604e:	e781      	b.n	85f54 <__sfvwrite_r+0x138>
   86050:	4647      	mov	r7, r8
   86052:	46c2      	mov	sl, r8
   86054:	6820      	ldr	r0, [r4, #0]
   86056:	e771      	b.n	85f3c <__sfvwrite_r+0x120>
   86058:	461a      	mov	r2, r3
   8605a:	4659      	mov	r1, fp
   8605c:	9301      	str	r3, [sp, #4]
   8605e:	f000 fbe7 	bl	86830 <memmove>
   86062:	68a2      	ldr	r2, [r4, #8]
   86064:	6821      	ldr	r1, [r4, #0]
   86066:	9b01      	ldr	r3, [sp, #4]
   86068:	ebb8 0807 	subs.w	r8, r8, r7
   8606c:	eba2 0203 	sub.w	r2, r2, r3
   86070:	440b      	add	r3, r1
   86072:	60a2      	str	r2, [r4, #8]
   86074:	6023      	str	r3, [r4, #0]
   86076:	d1d5      	bne.n	86024 <__sfvwrite_r+0x208>
   86078:	4648      	mov	r0, r9
   8607a:	4621      	mov	r1, r4
   8607c:	f7ff fc8a 	bl	85994 <_fflush_r>
   86080:	2800      	cmp	r0, #0
   86082:	d19f      	bne.n	85fc4 <__sfvwrite_r+0x1a8>
   86084:	f8cd 8000 	str.w	r8, [sp]
   86088:	e7cc      	b.n	86024 <__sfvwrite_r+0x208>
   8608a:	4658      	mov	r0, fp
   8608c:	210a      	movs	r1, #10
   8608e:	4652      	mov	r2, sl
   86090:	f000 fb84 	bl	8679c <memchr>
   86094:	2800      	cmp	r0, #0
   86096:	d041      	beq.n	8611c <__sfvwrite_r+0x300>
   86098:	3001      	adds	r0, #1
   8609a:	2301      	movs	r3, #1
   8609c:	ebcb 0800 	rsb	r8, fp, r0
   860a0:	9300      	str	r3, [sp, #0]
   860a2:	e7a2      	b.n	85fea <__sfvwrite_r+0x1ce>
   860a4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   860a8:	4543      	cmp	r3, r8
   860aa:	bf28      	it	cs
   860ac:	4643      	movcs	r3, r8
   860ae:	fb93 f3f2 	sdiv	r3, r3, r2
   860b2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   860b4:	fb03 f302 	mul.w	r3, r3, r2
   860b8:	4648      	mov	r0, r9
   860ba:	69e1      	ldr	r1, [r4, #28]
   860bc:	465a      	mov	r2, fp
   860be:	47b8      	blx	r7
   860c0:	2800      	cmp	r0, #0
   860c2:	f73f af47 	bgt.w	85f54 <__sfvwrite_r+0x138>
   860c6:	e77d      	b.n	85fc4 <__sfvwrite_r+0x1a8>
   860c8:	4662      	mov	r2, ip
   860ca:	4659      	mov	r1, fp
   860cc:	f8cd c004 	str.w	ip, [sp, #4]
   860d0:	f000 fbae 	bl	86830 <memmove>
   860d4:	6823      	ldr	r3, [r4, #0]
   860d6:	f8dd c004 	ldr.w	ip, [sp, #4]
   860da:	4648      	mov	r0, r9
   860dc:	4463      	add	r3, ip
   860de:	6023      	str	r3, [r4, #0]
   860e0:	4621      	mov	r1, r4
   860e2:	f7ff fc57 	bl	85994 <_fflush_r>
   860e6:	f8dd c004 	ldr.w	ip, [sp, #4]
   860ea:	2800      	cmp	r0, #0
   860ec:	f47f af6a 	bne.w	85fc4 <__sfvwrite_r+0x1a8>
   860f0:	4667      	mov	r7, ip
   860f2:	e794      	b.n	8601e <__sfvwrite_r+0x202>
   860f4:	4648      	mov	r0, r9
   860f6:	f000 fc03 	bl	86900 <_realloc_r>
   860fa:	9b00      	ldr	r3, [sp, #0]
   860fc:	4682      	mov	sl, r0
   860fe:	2800      	cmp	r0, #0
   86100:	f47f af12 	bne.w	85f28 <__sfvwrite_r+0x10c>
   86104:	4648      	mov	r0, r9
   86106:	6921      	ldr	r1, [r4, #16]
   86108:	f7ff fdb0 	bl	85c6c <_free_r>
   8610c:	89a3      	ldrh	r3, [r4, #12]
   8610e:	220c      	movs	r2, #12
   86110:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   86114:	b29b      	uxth	r3, r3
   86116:	f8c9 2000 	str.w	r2, [r9]
   8611a:	e754      	b.n	85fc6 <__sfvwrite_r+0x1aa>
   8611c:	2301      	movs	r3, #1
   8611e:	f10a 0801 	add.w	r8, sl, #1
   86122:	9300      	str	r3, [sp, #0]
   86124:	e761      	b.n	85fea <__sfvwrite_r+0x1ce>
   86126:	f04f 30ff 	mov.w	r0, #4294967295
   8612a:	e6ac      	b.n	85e86 <__sfvwrite_r+0x6a>
   8612c:	230c      	movs	r3, #12
   8612e:	f8c9 3000 	str.w	r3, [r9]
   86132:	89a3      	ldrh	r3, [r4, #12]
   86134:	e747      	b.n	85fc6 <__sfvwrite_r+0x1aa>
   86136:	bf00      	nop
   86138:	7ffffc00 	.word	0x7ffffc00

0008613c <_fwalk_reent>:
   8613c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   86140:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   86144:	d01e      	beq.n	86184 <_fwalk_reent+0x48>
   86146:	4688      	mov	r8, r1
   86148:	4607      	mov	r7, r0
   8614a:	f04f 0900 	mov.w	r9, #0
   8614e:	6875      	ldr	r5, [r6, #4]
   86150:	68b4      	ldr	r4, [r6, #8]
   86152:	3d01      	subs	r5, #1
   86154:	d410      	bmi.n	86178 <_fwalk_reent+0x3c>
   86156:	89a3      	ldrh	r3, [r4, #12]
   86158:	3d01      	subs	r5, #1
   8615a:	2b01      	cmp	r3, #1
   8615c:	d908      	bls.n	86170 <_fwalk_reent+0x34>
   8615e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   86162:	3301      	adds	r3, #1
   86164:	d004      	beq.n	86170 <_fwalk_reent+0x34>
   86166:	4638      	mov	r0, r7
   86168:	4621      	mov	r1, r4
   8616a:	47c0      	blx	r8
   8616c:	ea49 0900 	orr.w	r9, r9, r0
   86170:	1c6b      	adds	r3, r5, #1
   86172:	f104 0468 	add.w	r4, r4, #104	; 0x68
   86176:	d1ee      	bne.n	86156 <_fwalk_reent+0x1a>
   86178:	6836      	ldr	r6, [r6, #0]
   8617a:	2e00      	cmp	r6, #0
   8617c:	d1e7      	bne.n	8614e <_fwalk_reent+0x12>
   8617e:	4648      	mov	r0, r9
   86180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   86184:	46b1      	mov	r9, r6
   86186:	4648      	mov	r0, r9
   86188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008618c <__locale_charset>:
   8618c:	4800      	ldr	r0, [pc, #0]	; (86190 <__locale_charset+0x4>)
   8618e:	4770      	bx	lr
   86190:	200705e4 	.word	0x200705e4

00086194 <__locale_mb_cur_max>:
   86194:	4b01      	ldr	r3, [pc, #4]	; (8619c <__locale_mb_cur_max+0x8>)
   86196:	6818      	ldr	r0, [r3, #0]
   86198:	4770      	bx	lr
   8619a:	bf00      	nop
   8619c:	20070604 	.word	0x20070604

000861a0 <__smakebuf_r>:
   861a0:	898b      	ldrh	r3, [r1, #12]
   861a2:	b29a      	uxth	r2, r3
   861a4:	f012 0f02 	tst.w	r2, #2
   861a8:	d13c      	bne.n	86224 <__smakebuf_r+0x84>
   861aa:	b5f0      	push	{r4, r5, r6, r7, lr}
   861ac:	460c      	mov	r4, r1
   861ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   861b2:	b091      	sub	sp, #68	; 0x44
   861b4:	2900      	cmp	r1, #0
   861b6:	4605      	mov	r5, r0
   861b8:	db19      	blt.n	861ee <__smakebuf_r+0x4e>
   861ba:	aa01      	add	r2, sp, #4
   861bc:	f000 ff2a 	bl	87014 <_fstat_r>
   861c0:	2800      	cmp	r0, #0
   861c2:	db12      	blt.n	861ea <__smakebuf_r+0x4a>
   861c4:	9b02      	ldr	r3, [sp, #8]
   861c6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   861ca:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
   861ce:	fab7 f787 	clz	r7, r7
   861d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   861d6:	ea4f 1757 	mov.w	r7, r7, lsr #5
   861da:	d02a      	beq.n	86232 <__smakebuf_r+0x92>
   861dc:	89a3      	ldrh	r3, [r4, #12]
   861de:	f44f 6680 	mov.w	r6, #1024	; 0x400
   861e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   861e6:	81a3      	strh	r3, [r4, #12]
   861e8:	e00b      	b.n	86202 <__smakebuf_r+0x62>
   861ea:	89a3      	ldrh	r3, [r4, #12]
   861ec:	b29a      	uxth	r2, r3
   861ee:	f012 0f80 	tst.w	r2, #128	; 0x80
   861f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   861f6:	81a3      	strh	r3, [r4, #12]
   861f8:	bf0c      	ite	eq
   861fa:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   861fe:	2640      	movne	r6, #64	; 0x40
   86200:	2700      	movs	r7, #0
   86202:	4628      	mov	r0, r5
   86204:	4631      	mov	r1, r6
   86206:	f000 f843 	bl	86290 <_malloc_r>
   8620a:	89a3      	ldrh	r3, [r4, #12]
   8620c:	b340      	cbz	r0, 86260 <__smakebuf_r+0xc0>
   8620e:	4a1a      	ldr	r2, [pc, #104]	; (86278 <__smakebuf_r+0xd8>)
   86210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   86214:	63ea      	str	r2, [r5, #60]	; 0x3c
   86216:	81a3      	strh	r3, [r4, #12]
   86218:	6020      	str	r0, [r4, #0]
   8621a:	6120      	str	r0, [r4, #16]
   8621c:	6166      	str	r6, [r4, #20]
   8621e:	b99f      	cbnz	r7, 86248 <__smakebuf_r+0xa8>
   86220:	b011      	add	sp, #68	; 0x44
   86222:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86224:	f101 0343 	add.w	r3, r1, #67	; 0x43
   86228:	2201      	movs	r2, #1
   8622a:	600b      	str	r3, [r1, #0]
   8622c:	610b      	str	r3, [r1, #16]
   8622e:	614a      	str	r2, [r1, #20]
   86230:	4770      	bx	lr
   86232:	4b12      	ldr	r3, [pc, #72]	; (8627c <__smakebuf_r+0xdc>)
   86234:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   86236:	429a      	cmp	r2, r3
   86238:	d1d0      	bne.n	861dc <__smakebuf_r+0x3c>
   8623a:	89a3      	ldrh	r3, [r4, #12]
   8623c:	f44f 6680 	mov.w	r6, #1024	; 0x400
   86240:	4333      	orrs	r3, r6
   86242:	81a3      	strh	r3, [r4, #12]
   86244:	64e6      	str	r6, [r4, #76]	; 0x4c
   86246:	e7dc      	b.n	86202 <__smakebuf_r+0x62>
   86248:	4628      	mov	r0, r5
   8624a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8624e:	f000 fef5 	bl	8703c <_isatty_r>
   86252:	2800      	cmp	r0, #0
   86254:	d0e4      	beq.n	86220 <__smakebuf_r+0x80>
   86256:	89a3      	ldrh	r3, [r4, #12]
   86258:	f043 0301 	orr.w	r3, r3, #1
   8625c:	81a3      	strh	r3, [r4, #12]
   8625e:	e7df      	b.n	86220 <__smakebuf_r+0x80>
   86260:	059a      	lsls	r2, r3, #22
   86262:	d4dd      	bmi.n	86220 <__smakebuf_r+0x80>
   86264:	f104 0243 	add.w	r2, r4, #67	; 0x43
   86268:	f043 0302 	orr.w	r3, r3, #2
   8626c:	2101      	movs	r1, #1
   8626e:	81a3      	strh	r3, [r4, #12]
   86270:	6022      	str	r2, [r4, #0]
   86272:	6122      	str	r2, [r4, #16]
   86274:	6161      	str	r1, [r4, #20]
   86276:	e7d3      	b.n	86220 <__smakebuf_r+0x80>
   86278:	000859c1 	.word	0x000859c1
   8627c:	00086d61 	.word	0x00086d61

00086280 <malloc>:
   86280:	4b02      	ldr	r3, [pc, #8]	; (8628c <malloc+0xc>)
   86282:	4601      	mov	r1, r0
   86284:	6818      	ldr	r0, [r3, #0]
   86286:	f000 b803 	b.w	86290 <_malloc_r>
   8628a:	bf00      	nop
   8628c:	200705e0 	.word	0x200705e0

00086290 <_malloc_r>:
   86290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86294:	f101 050b 	add.w	r5, r1, #11
   86298:	2d16      	cmp	r5, #22
   8629a:	b083      	sub	sp, #12
   8629c:	4606      	mov	r6, r0
   8629e:	d927      	bls.n	862f0 <_malloc_r+0x60>
   862a0:	f035 0507 	bics.w	r5, r5, #7
   862a4:	f100 80b6 	bmi.w	86414 <_malloc_r+0x184>
   862a8:	42a9      	cmp	r1, r5
   862aa:	f200 80b3 	bhi.w	86414 <_malloc_r+0x184>
   862ae:	f000 fb23 	bl	868f8 <__malloc_lock>
   862b2:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   862b6:	d222      	bcs.n	862fe <_malloc_r+0x6e>
   862b8:	4fbc      	ldr	r7, [pc, #752]	; (865ac <_malloc_r+0x31c>)
   862ba:	08e8      	lsrs	r0, r5, #3
   862bc:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   862c0:	68dc      	ldr	r4, [r3, #12]
   862c2:	429c      	cmp	r4, r3
   862c4:	f000 81bc 	beq.w	86640 <_malloc_r+0x3b0>
   862c8:	6863      	ldr	r3, [r4, #4]
   862ca:	68e1      	ldr	r1, [r4, #12]
   862cc:	f023 0303 	bic.w	r3, r3, #3
   862d0:	4423      	add	r3, r4
   862d2:	685a      	ldr	r2, [r3, #4]
   862d4:	68a5      	ldr	r5, [r4, #8]
   862d6:	f042 0201 	orr.w	r2, r2, #1
   862da:	60e9      	str	r1, [r5, #12]
   862dc:	4630      	mov	r0, r6
   862de:	608d      	str	r5, [r1, #8]
   862e0:	605a      	str	r2, [r3, #4]
   862e2:	f000 fb0b 	bl	868fc <__malloc_unlock>
   862e6:	3408      	adds	r4, #8
   862e8:	4620      	mov	r0, r4
   862ea:	b003      	add	sp, #12
   862ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   862f0:	2910      	cmp	r1, #16
   862f2:	f200 808f 	bhi.w	86414 <_malloc_r+0x184>
   862f6:	f000 faff 	bl	868f8 <__malloc_lock>
   862fa:	2510      	movs	r5, #16
   862fc:	e7dc      	b.n	862b8 <_malloc_r+0x28>
   862fe:	0a68      	lsrs	r0, r5, #9
   86300:	f000 808f 	beq.w	86422 <_malloc_r+0x192>
   86304:	2804      	cmp	r0, #4
   86306:	f200 8147 	bhi.w	86598 <_malloc_r+0x308>
   8630a:	09a8      	lsrs	r0, r5, #6
   8630c:	3038      	adds	r0, #56	; 0x38
   8630e:	0041      	lsls	r1, r0, #1
   86310:	4fa6      	ldr	r7, [pc, #664]	; (865ac <_malloc_r+0x31c>)
   86312:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   86316:	68cc      	ldr	r4, [r1, #12]
   86318:	42a1      	cmp	r1, r4
   8631a:	d106      	bne.n	8632a <_malloc_r+0x9a>
   8631c:	e00c      	b.n	86338 <_malloc_r+0xa8>
   8631e:	2a00      	cmp	r2, #0
   86320:	f280 8082 	bge.w	86428 <_malloc_r+0x198>
   86324:	68e4      	ldr	r4, [r4, #12]
   86326:	42a1      	cmp	r1, r4
   86328:	d006      	beq.n	86338 <_malloc_r+0xa8>
   8632a:	6863      	ldr	r3, [r4, #4]
   8632c:	f023 0303 	bic.w	r3, r3, #3
   86330:	1b5a      	subs	r2, r3, r5
   86332:	2a0f      	cmp	r2, #15
   86334:	ddf3      	ble.n	8631e <_malloc_r+0x8e>
   86336:	3801      	subs	r0, #1
   86338:	3001      	adds	r0, #1
   8633a:	499c      	ldr	r1, [pc, #624]	; (865ac <_malloc_r+0x31c>)
   8633c:	693c      	ldr	r4, [r7, #16]
   8633e:	f101 0e08 	add.w	lr, r1, #8
   86342:	4574      	cmp	r4, lr
   86344:	f000 8171 	beq.w	8662a <_malloc_r+0x39a>
   86348:	6863      	ldr	r3, [r4, #4]
   8634a:	f023 0303 	bic.w	r3, r3, #3
   8634e:	1b5a      	subs	r2, r3, r5
   86350:	2a0f      	cmp	r2, #15
   86352:	f300 8157 	bgt.w	86604 <_malloc_r+0x374>
   86356:	2a00      	cmp	r2, #0
   86358:	f8c1 e014 	str.w	lr, [r1, #20]
   8635c:	f8c1 e010 	str.w	lr, [r1, #16]
   86360:	da66      	bge.n	86430 <_malloc_r+0x1a0>
   86362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   86366:	f080 812d 	bcs.w	865c4 <_malloc_r+0x334>
   8636a:	08db      	lsrs	r3, r3, #3
   8636c:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   86370:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   86374:	684a      	ldr	r2, [r1, #4]
   86376:	2301      	movs	r3, #1
   86378:	fa03 f30c 	lsl.w	r3, r3, ip
   8637c:	f8d8 c008 	ldr.w	ip, [r8, #8]
   86380:	4313      	orrs	r3, r2
   86382:	f8c4 c008 	str.w	ip, [r4, #8]
   86386:	f8c4 800c 	str.w	r8, [r4, #12]
   8638a:	604b      	str	r3, [r1, #4]
   8638c:	f8c8 4008 	str.w	r4, [r8, #8]
   86390:	f8cc 400c 	str.w	r4, [ip, #12]
   86394:	1082      	asrs	r2, r0, #2
   86396:	2401      	movs	r4, #1
   86398:	4094      	lsls	r4, r2
   8639a:	429c      	cmp	r4, r3
   8639c:	d855      	bhi.n	8644a <_malloc_r+0x1ba>
   8639e:	4223      	tst	r3, r4
   863a0:	d106      	bne.n	863b0 <_malloc_r+0x120>
   863a2:	f020 0003 	bic.w	r0, r0, #3
   863a6:	0064      	lsls	r4, r4, #1
   863a8:	4223      	tst	r3, r4
   863aa:	f100 0004 	add.w	r0, r0, #4
   863ae:	d0fa      	beq.n	863a6 <_malloc_r+0x116>
   863b0:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   863b4:	46c4      	mov	ip, r8
   863b6:	4681      	mov	r9, r0
   863b8:	f8dc 300c 	ldr.w	r3, [ip, #12]
   863bc:	459c      	cmp	ip, r3
   863be:	d107      	bne.n	863d0 <_malloc_r+0x140>
   863c0:	e135      	b.n	8662e <_malloc_r+0x39e>
   863c2:	2900      	cmp	r1, #0
   863c4:	f280 8145 	bge.w	86652 <_malloc_r+0x3c2>
   863c8:	68db      	ldr	r3, [r3, #12]
   863ca:	459c      	cmp	ip, r3
   863cc:	f000 812f 	beq.w	8662e <_malloc_r+0x39e>
   863d0:	685a      	ldr	r2, [r3, #4]
   863d2:	f022 0203 	bic.w	r2, r2, #3
   863d6:	1b51      	subs	r1, r2, r5
   863d8:	290f      	cmp	r1, #15
   863da:	ddf2      	ble.n	863c2 <_malloc_r+0x132>
   863dc:	461c      	mov	r4, r3
   863de:	68da      	ldr	r2, [r3, #12]
   863e0:	f854 cf08 	ldr.w	ip, [r4, #8]!
   863e4:	f045 0901 	orr.w	r9, r5, #1
   863e8:	f041 0801 	orr.w	r8, r1, #1
   863ec:	441d      	add	r5, r3
   863ee:	f8c3 9004 	str.w	r9, [r3, #4]
   863f2:	4630      	mov	r0, r6
   863f4:	f8cc 200c 	str.w	r2, [ip, #12]
   863f8:	f8c2 c008 	str.w	ip, [r2, #8]
   863fc:	617d      	str	r5, [r7, #20]
   863fe:	613d      	str	r5, [r7, #16]
   86400:	f8c5 e00c 	str.w	lr, [r5, #12]
   86404:	f8c5 e008 	str.w	lr, [r5, #8]
   86408:	f8c5 8004 	str.w	r8, [r5, #4]
   8640c:	5069      	str	r1, [r5, r1]
   8640e:	f000 fa75 	bl	868fc <__malloc_unlock>
   86412:	e769      	b.n	862e8 <_malloc_r+0x58>
   86414:	2400      	movs	r4, #0
   86416:	4620      	mov	r0, r4
   86418:	230c      	movs	r3, #12
   8641a:	6033      	str	r3, [r6, #0]
   8641c:	b003      	add	sp, #12
   8641e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86422:	217e      	movs	r1, #126	; 0x7e
   86424:	203f      	movs	r0, #63	; 0x3f
   86426:	e773      	b.n	86310 <_malloc_r+0x80>
   86428:	4423      	add	r3, r4
   8642a:	685a      	ldr	r2, [r3, #4]
   8642c:	68e1      	ldr	r1, [r4, #12]
   8642e:	e751      	b.n	862d4 <_malloc_r+0x44>
   86430:	4423      	add	r3, r4
   86432:	685a      	ldr	r2, [r3, #4]
   86434:	4630      	mov	r0, r6
   86436:	f042 0201 	orr.w	r2, r2, #1
   8643a:	605a      	str	r2, [r3, #4]
   8643c:	3408      	adds	r4, #8
   8643e:	f000 fa5d 	bl	868fc <__malloc_unlock>
   86442:	4620      	mov	r0, r4
   86444:	b003      	add	sp, #12
   86446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8644a:	68bc      	ldr	r4, [r7, #8]
   8644c:	6863      	ldr	r3, [r4, #4]
   8644e:	f023 0803 	bic.w	r8, r3, #3
   86452:	4545      	cmp	r5, r8
   86454:	d804      	bhi.n	86460 <_malloc_r+0x1d0>
   86456:	ebc5 0308 	rsb	r3, r5, r8
   8645a:	2b0f      	cmp	r3, #15
   8645c:	f300 808c 	bgt.w	86578 <_malloc_r+0x2e8>
   86460:	4b53      	ldr	r3, [pc, #332]	; (865b0 <_malloc_r+0x320>)
   86462:	f8df a15c 	ldr.w	sl, [pc, #348]	; 865c0 <_malloc_r+0x330>
   86466:	681a      	ldr	r2, [r3, #0]
   86468:	f8da 3000 	ldr.w	r3, [sl]
   8646c:	442a      	add	r2, r5
   8646e:	3301      	adds	r3, #1
   86470:	eb04 0b08 	add.w	fp, r4, r8
   86474:	f000 8151 	beq.w	8671a <_malloc_r+0x48a>
   86478:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   8647c:	320f      	adds	r2, #15
   8647e:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   86482:	f022 020f 	bic.w	r2, r2, #15
   86486:	4611      	mov	r1, r2
   86488:	4630      	mov	r0, r6
   8648a:	9201      	str	r2, [sp, #4]
   8648c:	f000 fc28 	bl	86ce0 <_sbrk_r>
   86490:	f1b0 3fff 	cmp.w	r0, #4294967295
   86494:	4681      	mov	r9, r0
   86496:	9a01      	ldr	r2, [sp, #4]
   86498:	f000 8148 	beq.w	8672c <_malloc_r+0x49c>
   8649c:	4583      	cmp	fp, r0
   8649e:	f200 80ef 	bhi.w	86680 <_malloc_r+0x3f0>
   864a2:	4b44      	ldr	r3, [pc, #272]	; (865b4 <_malloc_r+0x324>)
   864a4:	45cb      	cmp	fp, r9
   864a6:	6819      	ldr	r1, [r3, #0]
   864a8:	4411      	add	r1, r2
   864aa:	6019      	str	r1, [r3, #0]
   864ac:	f000 8143 	beq.w	86736 <_malloc_r+0x4a6>
   864b0:	f8da 0000 	ldr.w	r0, [sl]
   864b4:	f8df e108 	ldr.w	lr, [pc, #264]	; 865c0 <_malloc_r+0x330>
   864b8:	3001      	adds	r0, #1
   864ba:	bf1b      	ittet	ne
   864bc:	ebcb 0b09 	rsbne	fp, fp, r9
   864c0:	4459      	addne	r1, fp
   864c2:	f8ce 9000 	streq.w	r9, [lr]
   864c6:	6019      	strne	r1, [r3, #0]
   864c8:	f019 0107 	ands.w	r1, r9, #7
   864cc:	f000 8108 	beq.w	866e0 <_malloc_r+0x450>
   864d0:	f1c1 0008 	rsb	r0, r1, #8
   864d4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   864d8:	4481      	add	r9, r0
   864da:	3108      	adds	r1, #8
   864dc:	444a      	add	r2, r9
   864de:	f3c2 020b 	ubfx	r2, r2, #0, #12
   864e2:	ebc2 0a01 	rsb	sl, r2, r1
   864e6:	4651      	mov	r1, sl
   864e8:	4630      	mov	r0, r6
   864ea:	9301      	str	r3, [sp, #4]
   864ec:	f000 fbf8 	bl	86ce0 <_sbrk_r>
   864f0:	1c43      	adds	r3, r0, #1
   864f2:	9b01      	ldr	r3, [sp, #4]
   864f4:	f000 812d 	beq.w	86752 <_malloc_r+0x4c2>
   864f8:	ebc9 0200 	rsb	r2, r9, r0
   864fc:	4452      	add	r2, sl
   864fe:	f042 0201 	orr.w	r2, r2, #1
   86502:	6819      	ldr	r1, [r3, #0]
   86504:	42bc      	cmp	r4, r7
   86506:	4451      	add	r1, sl
   86508:	f8c7 9008 	str.w	r9, [r7, #8]
   8650c:	6019      	str	r1, [r3, #0]
   8650e:	f8c9 2004 	str.w	r2, [r9, #4]
   86512:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 865b4 <_malloc_r+0x324>
   86516:	d016      	beq.n	86546 <_malloc_r+0x2b6>
   86518:	f1b8 0f0f 	cmp.w	r8, #15
   8651c:	f240 80ef 	bls.w	866fe <_malloc_r+0x46e>
   86520:	6862      	ldr	r2, [r4, #4]
   86522:	f1a8 030c 	sub.w	r3, r8, #12
   86526:	f023 0307 	bic.w	r3, r3, #7
   8652a:	f002 0201 	and.w	r2, r2, #1
   8652e:	18e0      	adds	r0, r4, r3
   86530:	f04f 0e05 	mov.w	lr, #5
   86534:	431a      	orrs	r2, r3
   86536:	2b0f      	cmp	r3, #15
   86538:	6062      	str	r2, [r4, #4]
   8653a:	f8c0 e004 	str.w	lr, [r0, #4]
   8653e:	f8c0 e008 	str.w	lr, [r0, #8]
   86542:	f200 810a 	bhi.w	8675a <_malloc_r+0x4ca>
   86546:	4b1c      	ldr	r3, [pc, #112]	; (865b8 <_malloc_r+0x328>)
   86548:	68bc      	ldr	r4, [r7, #8]
   8654a:	681a      	ldr	r2, [r3, #0]
   8654c:	4291      	cmp	r1, r2
   8654e:	bf88      	it	hi
   86550:	6019      	strhi	r1, [r3, #0]
   86552:	4b1a      	ldr	r3, [pc, #104]	; (865bc <_malloc_r+0x32c>)
   86554:	681a      	ldr	r2, [r3, #0]
   86556:	4291      	cmp	r1, r2
   86558:	6862      	ldr	r2, [r4, #4]
   8655a:	bf88      	it	hi
   8655c:	6019      	strhi	r1, [r3, #0]
   8655e:	f022 0203 	bic.w	r2, r2, #3
   86562:	4295      	cmp	r5, r2
   86564:	eba2 0305 	sub.w	r3, r2, r5
   86568:	d801      	bhi.n	8656e <_malloc_r+0x2de>
   8656a:	2b0f      	cmp	r3, #15
   8656c:	dc04      	bgt.n	86578 <_malloc_r+0x2e8>
   8656e:	4630      	mov	r0, r6
   86570:	f000 f9c4 	bl	868fc <__malloc_unlock>
   86574:	2400      	movs	r4, #0
   86576:	e6b7      	b.n	862e8 <_malloc_r+0x58>
   86578:	f045 0201 	orr.w	r2, r5, #1
   8657c:	f043 0301 	orr.w	r3, r3, #1
   86580:	4425      	add	r5, r4
   86582:	6062      	str	r2, [r4, #4]
   86584:	4630      	mov	r0, r6
   86586:	60bd      	str	r5, [r7, #8]
   86588:	3408      	adds	r4, #8
   8658a:	606b      	str	r3, [r5, #4]
   8658c:	f000 f9b6 	bl	868fc <__malloc_unlock>
   86590:	4620      	mov	r0, r4
   86592:	b003      	add	sp, #12
   86594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86598:	2814      	cmp	r0, #20
   8659a:	d969      	bls.n	86670 <_malloc_r+0x3e0>
   8659c:	2854      	cmp	r0, #84	; 0x54
   8659e:	f200 8098 	bhi.w	866d2 <_malloc_r+0x442>
   865a2:	0b28      	lsrs	r0, r5, #12
   865a4:	306e      	adds	r0, #110	; 0x6e
   865a6:	0041      	lsls	r1, r0, #1
   865a8:	e6b2      	b.n	86310 <_malloc_r+0x80>
   865aa:	bf00      	nop
   865ac:	20070608 	.word	0x20070608
   865b0:	2007ace8 	.word	0x2007ace8
   865b4:	2007acec 	.word	0x2007acec
   865b8:	2007ace4 	.word	0x2007ace4
   865bc:	2007ace0 	.word	0x2007ace0
   865c0:	20070a14 	.word	0x20070a14
   865c4:	0a5a      	lsrs	r2, r3, #9
   865c6:	2a04      	cmp	r2, #4
   865c8:	d955      	bls.n	86676 <_malloc_r+0x3e6>
   865ca:	2a14      	cmp	r2, #20
   865cc:	f200 80a7 	bhi.w	8671e <_malloc_r+0x48e>
   865d0:	325b      	adds	r2, #91	; 0x5b
   865d2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   865d6:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   865da:	f8dc 1008 	ldr.w	r1, [ip, #8]
   865de:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 86798 <_malloc_r+0x508>
   865e2:	4561      	cmp	r1, ip
   865e4:	d07f      	beq.n	866e6 <_malloc_r+0x456>
   865e6:	684a      	ldr	r2, [r1, #4]
   865e8:	f022 0203 	bic.w	r2, r2, #3
   865ec:	4293      	cmp	r3, r2
   865ee:	d202      	bcs.n	865f6 <_malloc_r+0x366>
   865f0:	6889      	ldr	r1, [r1, #8]
   865f2:	458c      	cmp	ip, r1
   865f4:	d1f7      	bne.n	865e6 <_malloc_r+0x356>
   865f6:	68ca      	ldr	r2, [r1, #12]
   865f8:	687b      	ldr	r3, [r7, #4]
   865fa:	60e2      	str	r2, [r4, #12]
   865fc:	60a1      	str	r1, [r4, #8]
   865fe:	6094      	str	r4, [r2, #8]
   86600:	60cc      	str	r4, [r1, #12]
   86602:	e6c7      	b.n	86394 <_malloc_r+0x104>
   86604:	f045 0701 	orr.w	r7, r5, #1
   86608:	f042 0301 	orr.w	r3, r2, #1
   8660c:	4425      	add	r5, r4
   8660e:	6067      	str	r7, [r4, #4]
   86610:	4630      	mov	r0, r6
   86612:	614d      	str	r5, [r1, #20]
   86614:	610d      	str	r5, [r1, #16]
   86616:	f8c5 e00c 	str.w	lr, [r5, #12]
   8661a:	f8c5 e008 	str.w	lr, [r5, #8]
   8661e:	606b      	str	r3, [r5, #4]
   86620:	50aa      	str	r2, [r5, r2]
   86622:	3408      	adds	r4, #8
   86624:	f000 f96a 	bl	868fc <__malloc_unlock>
   86628:	e65e      	b.n	862e8 <_malloc_r+0x58>
   8662a:	684b      	ldr	r3, [r1, #4]
   8662c:	e6b2      	b.n	86394 <_malloc_r+0x104>
   8662e:	f109 0901 	add.w	r9, r9, #1
   86632:	f019 0f03 	tst.w	r9, #3
   86636:	f10c 0c08 	add.w	ip, ip, #8
   8663a:	f47f aebd 	bne.w	863b8 <_malloc_r+0x128>
   8663e:	e02c      	b.n	8669a <_malloc_r+0x40a>
   86640:	f104 0308 	add.w	r3, r4, #8
   86644:	6964      	ldr	r4, [r4, #20]
   86646:	42a3      	cmp	r3, r4
   86648:	bf08      	it	eq
   8664a:	3002      	addeq	r0, #2
   8664c:	f43f ae75 	beq.w	8633a <_malloc_r+0xaa>
   86650:	e63a      	b.n	862c8 <_malloc_r+0x38>
   86652:	461c      	mov	r4, r3
   86654:	441a      	add	r2, r3
   86656:	6851      	ldr	r1, [r2, #4]
   86658:	68db      	ldr	r3, [r3, #12]
   8665a:	f854 5f08 	ldr.w	r5, [r4, #8]!
   8665e:	f041 0101 	orr.w	r1, r1, #1
   86662:	6051      	str	r1, [r2, #4]
   86664:	4630      	mov	r0, r6
   86666:	60eb      	str	r3, [r5, #12]
   86668:	609d      	str	r5, [r3, #8]
   8666a:	f000 f947 	bl	868fc <__malloc_unlock>
   8666e:	e63b      	b.n	862e8 <_malloc_r+0x58>
   86670:	305b      	adds	r0, #91	; 0x5b
   86672:	0041      	lsls	r1, r0, #1
   86674:	e64c      	b.n	86310 <_malloc_r+0x80>
   86676:	099a      	lsrs	r2, r3, #6
   86678:	3238      	adds	r2, #56	; 0x38
   8667a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   8667e:	e7aa      	b.n	865d6 <_malloc_r+0x346>
   86680:	42bc      	cmp	r4, r7
   86682:	4b45      	ldr	r3, [pc, #276]	; (86798 <_malloc_r+0x508>)
   86684:	f43f af0d 	beq.w	864a2 <_malloc_r+0x212>
   86688:	689c      	ldr	r4, [r3, #8]
   8668a:	6862      	ldr	r2, [r4, #4]
   8668c:	f022 0203 	bic.w	r2, r2, #3
   86690:	e767      	b.n	86562 <_malloc_r+0x2d2>
   86692:	f8d8 8000 	ldr.w	r8, [r8]
   86696:	4598      	cmp	r8, r3
   86698:	d17c      	bne.n	86794 <_malloc_r+0x504>
   8669a:	f010 0f03 	tst.w	r0, #3
   8669e:	f1a8 0308 	sub.w	r3, r8, #8
   866a2:	f100 30ff 	add.w	r0, r0, #4294967295
   866a6:	d1f4      	bne.n	86692 <_malloc_r+0x402>
   866a8:	687b      	ldr	r3, [r7, #4]
   866aa:	ea23 0304 	bic.w	r3, r3, r4
   866ae:	607b      	str	r3, [r7, #4]
   866b0:	0064      	lsls	r4, r4, #1
   866b2:	429c      	cmp	r4, r3
   866b4:	f63f aec9 	bhi.w	8644a <_malloc_r+0x1ba>
   866b8:	2c00      	cmp	r4, #0
   866ba:	f43f aec6 	beq.w	8644a <_malloc_r+0x1ba>
   866be:	4223      	tst	r3, r4
   866c0:	4648      	mov	r0, r9
   866c2:	f47f ae75 	bne.w	863b0 <_malloc_r+0x120>
   866c6:	0064      	lsls	r4, r4, #1
   866c8:	4223      	tst	r3, r4
   866ca:	f100 0004 	add.w	r0, r0, #4
   866ce:	d0fa      	beq.n	866c6 <_malloc_r+0x436>
   866d0:	e66e      	b.n	863b0 <_malloc_r+0x120>
   866d2:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   866d6:	d818      	bhi.n	8670a <_malloc_r+0x47a>
   866d8:	0be8      	lsrs	r0, r5, #15
   866da:	3077      	adds	r0, #119	; 0x77
   866dc:	0041      	lsls	r1, r0, #1
   866de:	e617      	b.n	86310 <_malloc_r+0x80>
   866e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   866e4:	e6fa      	b.n	864dc <_malloc_r+0x24c>
   866e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   866ea:	1092      	asrs	r2, r2, #2
   866ec:	f04f 0c01 	mov.w	ip, #1
   866f0:	fa0c f202 	lsl.w	r2, ip, r2
   866f4:	4313      	orrs	r3, r2
   866f6:	f8c8 3004 	str.w	r3, [r8, #4]
   866fa:	460a      	mov	r2, r1
   866fc:	e77d      	b.n	865fa <_malloc_r+0x36a>
   866fe:	2301      	movs	r3, #1
   86700:	f8c9 3004 	str.w	r3, [r9, #4]
   86704:	464c      	mov	r4, r9
   86706:	2200      	movs	r2, #0
   86708:	e72b      	b.n	86562 <_malloc_r+0x2d2>
   8670a:	f240 5354 	movw	r3, #1364	; 0x554
   8670e:	4298      	cmp	r0, r3
   86710:	d81c      	bhi.n	8674c <_malloc_r+0x4bc>
   86712:	0ca8      	lsrs	r0, r5, #18
   86714:	307c      	adds	r0, #124	; 0x7c
   86716:	0041      	lsls	r1, r0, #1
   86718:	e5fa      	b.n	86310 <_malloc_r+0x80>
   8671a:	3210      	adds	r2, #16
   8671c:	e6b3      	b.n	86486 <_malloc_r+0x1f6>
   8671e:	2a54      	cmp	r2, #84	; 0x54
   86720:	d823      	bhi.n	8676a <_malloc_r+0x4da>
   86722:	0b1a      	lsrs	r2, r3, #12
   86724:	326e      	adds	r2, #110	; 0x6e
   86726:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   8672a:	e754      	b.n	865d6 <_malloc_r+0x346>
   8672c:	68bc      	ldr	r4, [r7, #8]
   8672e:	6862      	ldr	r2, [r4, #4]
   86730:	f022 0203 	bic.w	r2, r2, #3
   86734:	e715      	b.n	86562 <_malloc_r+0x2d2>
   86736:	f3cb 000b 	ubfx	r0, fp, #0, #12
   8673a:	2800      	cmp	r0, #0
   8673c:	f47f aeb8 	bne.w	864b0 <_malloc_r+0x220>
   86740:	4442      	add	r2, r8
   86742:	68bb      	ldr	r3, [r7, #8]
   86744:	f042 0201 	orr.w	r2, r2, #1
   86748:	605a      	str	r2, [r3, #4]
   8674a:	e6fc      	b.n	86546 <_malloc_r+0x2b6>
   8674c:	21fc      	movs	r1, #252	; 0xfc
   8674e:	207e      	movs	r0, #126	; 0x7e
   86750:	e5de      	b.n	86310 <_malloc_r+0x80>
   86752:	2201      	movs	r2, #1
   86754:	f04f 0a00 	mov.w	sl, #0
   86758:	e6d3      	b.n	86502 <_malloc_r+0x272>
   8675a:	f104 0108 	add.w	r1, r4, #8
   8675e:	4630      	mov	r0, r6
   86760:	f7ff fa84 	bl	85c6c <_free_r>
   86764:	f8da 1000 	ldr.w	r1, [sl]
   86768:	e6ed      	b.n	86546 <_malloc_r+0x2b6>
   8676a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8676e:	d804      	bhi.n	8677a <_malloc_r+0x4ea>
   86770:	0bda      	lsrs	r2, r3, #15
   86772:	3277      	adds	r2, #119	; 0x77
   86774:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   86778:	e72d      	b.n	865d6 <_malloc_r+0x346>
   8677a:	f240 5154 	movw	r1, #1364	; 0x554
   8677e:	428a      	cmp	r2, r1
   86780:	d804      	bhi.n	8678c <_malloc_r+0x4fc>
   86782:	0c9a      	lsrs	r2, r3, #18
   86784:	327c      	adds	r2, #124	; 0x7c
   86786:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   8678a:	e724      	b.n	865d6 <_malloc_r+0x346>
   8678c:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   86790:	227e      	movs	r2, #126	; 0x7e
   86792:	e720      	b.n	865d6 <_malloc_r+0x346>
   86794:	687b      	ldr	r3, [r7, #4]
   86796:	e78b      	b.n	866b0 <_malloc_r+0x420>
   86798:	20070608 	.word	0x20070608

0008679c <memchr>:
   8679c:	0783      	lsls	r3, r0, #30
   8679e:	b470      	push	{r4, r5, r6}
   867a0:	b2c9      	uxtb	r1, r1
   867a2:	d040      	beq.n	86826 <memchr+0x8a>
   867a4:	1e54      	subs	r4, r2, #1
   867a6:	2a00      	cmp	r2, #0
   867a8:	d03f      	beq.n	8682a <memchr+0x8e>
   867aa:	7803      	ldrb	r3, [r0, #0]
   867ac:	428b      	cmp	r3, r1
   867ae:	bf18      	it	ne
   867b0:	1c43      	addne	r3, r0, #1
   867b2:	d105      	bne.n	867c0 <memchr+0x24>
   867b4:	e01c      	b.n	867f0 <memchr+0x54>
   867b6:	b1ec      	cbz	r4, 867f4 <memchr+0x58>
   867b8:	7802      	ldrb	r2, [r0, #0]
   867ba:	3c01      	subs	r4, #1
   867bc:	428a      	cmp	r2, r1
   867be:	d017      	beq.n	867f0 <memchr+0x54>
   867c0:	f013 0f03 	tst.w	r3, #3
   867c4:	4618      	mov	r0, r3
   867c6:	f103 0301 	add.w	r3, r3, #1
   867ca:	d1f4      	bne.n	867b6 <memchr+0x1a>
   867cc:	2c03      	cmp	r4, #3
   867ce:	d814      	bhi.n	867fa <memchr+0x5e>
   867d0:	b184      	cbz	r4, 867f4 <memchr+0x58>
   867d2:	7803      	ldrb	r3, [r0, #0]
   867d4:	428b      	cmp	r3, r1
   867d6:	d00b      	beq.n	867f0 <memchr+0x54>
   867d8:	1905      	adds	r5, r0, r4
   867da:	1c43      	adds	r3, r0, #1
   867dc:	e002      	b.n	867e4 <memchr+0x48>
   867de:	7802      	ldrb	r2, [r0, #0]
   867e0:	428a      	cmp	r2, r1
   867e2:	d005      	beq.n	867f0 <memchr+0x54>
   867e4:	42ab      	cmp	r3, r5
   867e6:	4618      	mov	r0, r3
   867e8:	f103 0301 	add.w	r3, r3, #1
   867ec:	d1f7      	bne.n	867de <memchr+0x42>
   867ee:	2000      	movs	r0, #0
   867f0:	bc70      	pop	{r4, r5, r6}
   867f2:	4770      	bx	lr
   867f4:	4620      	mov	r0, r4
   867f6:	bc70      	pop	{r4, r5, r6}
   867f8:	4770      	bx	lr
   867fa:	4602      	mov	r2, r0
   867fc:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   86800:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   86804:	6813      	ldr	r3, [r2, #0]
   86806:	4610      	mov	r0, r2
   86808:	4073      	eors	r3, r6
   8680a:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   8680e:	ea25 0303 	bic.w	r3, r5, r3
   86812:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   86816:	f102 0204 	add.w	r2, r2, #4
   8681a:	d1d9      	bne.n	867d0 <memchr+0x34>
   8681c:	3c04      	subs	r4, #4
   8681e:	2c03      	cmp	r4, #3
   86820:	4610      	mov	r0, r2
   86822:	d8ef      	bhi.n	86804 <memchr+0x68>
   86824:	e7d4      	b.n	867d0 <memchr+0x34>
   86826:	4614      	mov	r4, r2
   86828:	e7d0      	b.n	867cc <memchr+0x30>
   8682a:	4610      	mov	r0, r2
   8682c:	e7e0      	b.n	867f0 <memchr+0x54>
   8682e:	bf00      	nop

00086830 <memmove>:
   86830:	4288      	cmp	r0, r1
   86832:	b5f0      	push	{r4, r5, r6, r7, lr}
   86834:	d90d      	bls.n	86852 <memmove+0x22>
   86836:	188b      	adds	r3, r1, r2
   86838:	4298      	cmp	r0, r3
   8683a:	d20a      	bcs.n	86852 <memmove+0x22>
   8683c:	1881      	adds	r1, r0, r2
   8683e:	2a00      	cmp	r2, #0
   86840:	d054      	beq.n	868ec <memmove+0xbc>
   86842:	1a9a      	subs	r2, r3, r2
   86844:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   86848:	4293      	cmp	r3, r2
   8684a:	f801 4d01 	strb.w	r4, [r1, #-1]!
   8684e:	d1f9      	bne.n	86844 <memmove+0x14>
   86850:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86852:	2a0f      	cmp	r2, #15
   86854:	d948      	bls.n	868e8 <memmove+0xb8>
   86856:	ea40 0301 	orr.w	r3, r0, r1
   8685a:	079b      	lsls	r3, r3, #30
   8685c:	d147      	bne.n	868ee <memmove+0xbe>
   8685e:	4615      	mov	r5, r2
   86860:	f100 0410 	add.w	r4, r0, #16
   86864:	f101 0310 	add.w	r3, r1, #16
   86868:	f853 6c10 	ldr.w	r6, [r3, #-16]
   8686c:	3d10      	subs	r5, #16
   8686e:	f844 6c10 	str.w	r6, [r4, #-16]
   86872:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   86876:	2d0f      	cmp	r5, #15
   86878:	f844 6c0c 	str.w	r6, [r4, #-12]
   8687c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   86880:	f104 0410 	add.w	r4, r4, #16
   86884:	f844 6c18 	str.w	r6, [r4, #-24]
   86888:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8688c:	f103 0310 	add.w	r3, r3, #16
   86890:	f844 6c14 	str.w	r6, [r4, #-20]
   86894:	d8e8      	bhi.n	86868 <memmove+0x38>
   86896:	f1a2 0310 	sub.w	r3, r2, #16
   8689a:	f023 030f 	bic.w	r3, r3, #15
   8689e:	f002 0e0f 	and.w	lr, r2, #15
   868a2:	3310      	adds	r3, #16
   868a4:	f1be 0f03 	cmp.w	lr, #3
   868a8:	4419      	add	r1, r3
   868aa:	4403      	add	r3, r0
   868ac:	d921      	bls.n	868f2 <memmove+0xc2>
   868ae:	460e      	mov	r6, r1
   868b0:	4674      	mov	r4, lr
   868b2:	1f1d      	subs	r5, r3, #4
   868b4:	f856 7b04 	ldr.w	r7, [r6], #4
   868b8:	3c04      	subs	r4, #4
   868ba:	2c03      	cmp	r4, #3
   868bc:	f845 7f04 	str.w	r7, [r5, #4]!
   868c0:	d8f8      	bhi.n	868b4 <memmove+0x84>
   868c2:	f1ae 0404 	sub.w	r4, lr, #4
   868c6:	f024 0403 	bic.w	r4, r4, #3
   868ca:	3404      	adds	r4, #4
   868cc:	4423      	add	r3, r4
   868ce:	4421      	add	r1, r4
   868d0:	f002 0203 	and.w	r2, r2, #3
   868d4:	b152      	cbz	r2, 868ec <memmove+0xbc>
   868d6:	3b01      	subs	r3, #1
   868d8:	440a      	add	r2, r1
   868da:	f811 4b01 	ldrb.w	r4, [r1], #1
   868de:	4291      	cmp	r1, r2
   868e0:	f803 4f01 	strb.w	r4, [r3, #1]!
   868e4:	d1f9      	bne.n	868da <memmove+0xaa>
   868e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   868e8:	4603      	mov	r3, r0
   868ea:	e7f3      	b.n	868d4 <memmove+0xa4>
   868ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   868ee:	4603      	mov	r3, r0
   868f0:	e7f1      	b.n	868d6 <memmove+0xa6>
   868f2:	4672      	mov	r2, lr
   868f4:	e7ee      	b.n	868d4 <memmove+0xa4>
   868f6:	bf00      	nop

000868f8 <__malloc_lock>:
   868f8:	4770      	bx	lr
   868fa:	bf00      	nop

000868fc <__malloc_unlock>:
   868fc:	4770      	bx	lr
   868fe:	bf00      	nop

00086900 <_realloc_r>:
   86900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86904:	4617      	mov	r7, r2
   86906:	b083      	sub	sp, #12
   86908:	460d      	mov	r5, r1
   8690a:	2900      	cmp	r1, #0
   8690c:	f000 80e2 	beq.w	86ad4 <_realloc_r+0x1d4>
   86910:	4681      	mov	r9, r0
   86912:	f107 040b 	add.w	r4, r7, #11
   86916:	f7ff ffef 	bl	868f8 <__malloc_lock>
   8691a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   8691e:	2c16      	cmp	r4, #22
   86920:	f023 0603 	bic.w	r6, r3, #3
   86924:	f1a5 0808 	sub.w	r8, r5, #8
   86928:	d84b      	bhi.n	869c2 <_realloc_r+0xc2>
   8692a:	2210      	movs	r2, #16
   8692c:	4614      	mov	r4, r2
   8692e:	42a7      	cmp	r7, r4
   86930:	d84c      	bhi.n	869cc <_realloc_r+0xcc>
   86932:	4296      	cmp	r6, r2
   86934:	da51      	bge.n	869da <_realloc_r+0xda>
   86936:	f8df b3a4 	ldr.w	fp, [pc, #932]	; 86cdc <_realloc_r+0x3dc>
   8693a:	eb08 0106 	add.w	r1, r8, r6
   8693e:	f8db 0008 	ldr.w	r0, [fp, #8]
   86942:	4288      	cmp	r0, r1
   86944:	f000 80d3 	beq.w	86aee <_realloc_r+0x1ee>
   86948:	6848      	ldr	r0, [r1, #4]
   8694a:	f020 0e01 	bic.w	lr, r0, #1
   8694e:	448e      	add	lr, r1
   86950:	f8de e004 	ldr.w	lr, [lr, #4]
   86954:	f01e 0f01 	tst.w	lr, #1
   86958:	d154      	bne.n	86a04 <_realloc_r+0x104>
   8695a:	f020 0003 	bic.w	r0, r0, #3
   8695e:	4430      	add	r0, r6
   86960:	4290      	cmp	r0, r2
   86962:	f280 80bd 	bge.w	86ae0 <_realloc_r+0x1e0>
   86966:	07db      	lsls	r3, r3, #31
   86968:	f100 8090 	bmi.w	86a8c <_realloc_r+0x18c>
   8696c:	f855 3c08 	ldr.w	r3, [r5, #-8]
   86970:	ebc3 0a08 	rsb	sl, r3, r8
   86974:	f8da 3004 	ldr.w	r3, [sl, #4]
   86978:	f023 0303 	bic.w	r3, r3, #3
   8697c:	eb00 0e03 	add.w	lr, r0, r3
   86980:	4596      	cmp	lr, r2
   86982:	db49      	blt.n	86a18 <_realloc_r+0x118>
   86984:	4657      	mov	r7, sl
   86986:	68cb      	ldr	r3, [r1, #12]
   86988:	6889      	ldr	r1, [r1, #8]
   8698a:	1f32      	subs	r2, r6, #4
   8698c:	60cb      	str	r3, [r1, #12]
   8698e:	6099      	str	r1, [r3, #8]
   86990:	f857 1f08 	ldr.w	r1, [r7, #8]!
   86994:	f8da 300c 	ldr.w	r3, [sl, #12]
   86998:	2a24      	cmp	r2, #36	; 0x24
   8699a:	60cb      	str	r3, [r1, #12]
   8699c:	6099      	str	r1, [r3, #8]
   8699e:	f200 8133 	bhi.w	86c08 <_realloc_r+0x308>
   869a2:	2a13      	cmp	r2, #19
   869a4:	f240 80fa 	bls.w	86b9c <_realloc_r+0x29c>
   869a8:	682b      	ldr	r3, [r5, #0]
   869aa:	2a1b      	cmp	r2, #27
   869ac:	f8ca 3008 	str.w	r3, [sl, #8]
   869b0:	686b      	ldr	r3, [r5, #4]
   869b2:	f8ca 300c 	str.w	r3, [sl, #12]
   869b6:	f200 813b 	bhi.w	86c30 <_realloc_r+0x330>
   869ba:	3508      	adds	r5, #8
   869bc:	f10a 0310 	add.w	r3, sl, #16
   869c0:	e0ed      	b.n	86b9e <_realloc_r+0x29e>
   869c2:	f024 0407 	bic.w	r4, r4, #7
   869c6:	2c00      	cmp	r4, #0
   869c8:	4622      	mov	r2, r4
   869ca:	dab0      	bge.n	8692e <_realloc_r+0x2e>
   869cc:	230c      	movs	r3, #12
   869ce:	2000      	movs	r0, #0
   869d0:	f8c9 3000 	str.w	r3, [r9]
   869d4:	b003      	add	sp, #12
   869d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   869da:	462f      	mov	r7, r5
   869dc:	1b32      	subs	r2, r6, r4
   869de:	2a0f      	cmp	r2, #15
   869e0:	f003 0301 	and.w	r3, r3, #1
   869e4:	d840      	bhi.n	86a68 <_realloc_r+0x168>
   869e6:	4333      	orrs	r3, r6
   869e8:	f8c8 3004 	str.w	r3, [r8, #4]
   869ec:	4446      	add	r6, r8
   869ee:	6873      	ldr	r3, [r6, #4]
   869f0:	f043 0301 	orr.w	r3, r3, #1
   869f4:	6073      	str	r3, [r6, #4]
   869f6:	4648      	mov	r0, r9
   869f8:	f7ff ff80 	bl	868fc <__malloc_unlock>
   869fc:	4638      	mov	r0, r7
   869fe:	b003      	add	sp, #12
   86a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86a04:	07d9      	lsls	r1, r3, #31
   86a06:	d441      	bmi.n	86a8c <_realloc_r+0x18c>
   86a08:	f855 3c08 	ldr.w	r3, [r5, #-8]
   86a0c:	ebc3 0a08 	rsb	sl, r3, r8
   86a10:	f8da 3004 	ldr.w	r3, [sl, #4]
   86a14:	f023 0303 	bic.w	r3, r3, #3
   86a18:	4433      	add	r3, r6
   86a1a:	4293      	cmp	r3, r2
   86a1c:	db36      	blt.n	86a8c <_realloc_r+0x18c>
   86a1e:	4657      	mov	r7, sl
   86a20:	f8da 100c 	ldr.w	r1, [sl, #12]
   86a24:	f857 0f08 	ldr.w	r0, [r7, #8]!
   86a28:	1f32      	subs	r2, r6, #4
   86a2a:	2a24      	cmp	r2, #36	; 0x24
   86a2c:	60c1      	str	r1, [r0, #12]
   86a2e:	6088      	str	r0, [r1, #8]
   86a30:	f200 80f5 	bhi.w	86c1e <_realloc_r+0x31e>
   86a34:	2a13      	cmp	r2, #19
   86a36:	f240 80f0 	bls.w	86c1a <_realloc_r+0x31a>
   86a3a:	6829      	ldr	r1, [r5, #0]
   86a3c:	2a1b      	cmp	r2, #27
   86a3e:	f8ca 1008 	str.w	r1, [sl, #8]
   86a42:	6869      	ldr	r1, [r5, #4]
   86a44:	f8ca 100c 	str.w	r1, [sl, #12]
   86a48:	f200 8107 	bhi.w	86c5a <_realloc_r+0x35a>
   86a4c:	3508      	adds	r5, #8
   86a4e:	f10a 0210 	add.w	r2, sl, #16
   86a52:	6829      	ldr	r1, [r5, #0]
   86a54:	461e      	mov	r6, r3
   86a56:	6011      	str	r1, [r2, #0]
   86a58:	6869      	ldr	r1, [r5, #4]
   86a5a:	46d0      	mov	r8, sl
   86a5c:	6051      	str	r1, [r2, #4]
   86a5e:	68ab      	ldr	r3, [r5, #8]
   86a60:	6093      	str	r3, [r2, #8]
   86a62:	f8da 3004 	ldr.w	r3, [sl, #4]
   86a66:	e7b9      	b.n	869dc <_realloc_r+0xdc>
   86a68:	eb08 0104 	add.w	r1, r8, r4
   86a6c:	4323      	orrs	r3, r4
   86a6e:	f042 0001 	orr.w	r0, r2, #1
   86a72:	f8c8 3004 	str.w	r3, [r8, #4]
   86a76:	440a      	add	r2, r1
   86a78:	6048      	str	r0, [r1, #4]
   86a7a:	6853      	ldr	r3, [r2, #4]
   86a7c:	3108      	adds	r1, #8
   86a7e:	f043 0301 	orr.w	r3, r3, #1
   86a82:	6053      	str	r3, [r2, #4]
   86a84:	4648      	mov	r0, r9
   86a86:	f7ff f8f1 	bl	85c6c <_free_r>
   86a8a:	e7b4      	b.n	869f6 <_realloc_r+0xf6>
   86a8c:	4639      	mov	r1, r7
   86a8e:	4648      	mov	r0, r9
   86a90:	f7ff fbfe 	bl	86290 <_malloc_r>
   86a94:	4607      	mov	r7, r0
   86a96:	2800      	cmp	r0, #0
   86a98:	d0ad      	beq.n	869f6 <_realloc_r+0xf6>
   86a9a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   86a9e:	f1a0 0108 	sub.w	r1, r0, #8
   86aa2:	f023 0201 	bic.w	r2, r3, #1
   86aa6:	4442      	add	r2, r8
   86aa8:	4291      	cmp	r1, r2
   86aaa:	f000 80a6 	beq.w	86bfa <_realloc_r+0x2fa>
   86aae:	1f32      	subs	r2, r6, #4
   86ab0:	2a24      	cmp	r2, #36	; 0x24
   86ab2:	f200 8093 	bhi.w	86bdc <_realloc_r+0x2dc>
   86ab6:	2a13      	cmp	r2, #19
   86ab8:	d865      	bhi.n	86b86 <_realloc_r+0x286>
   86aba:	4603      	mov	r3, r0
   86abc:	462a      	mov	r2, r5
   86abe:	6811      	ldr	r1, [r2, #0]
   86ac0:	6019      	str	r1, [r3, #0]
   86ac2:	6851      	ldr	r1, [r2, #4]
   86ac4:	6059      	str	r1, [r3, #4]
   86ac6:	6892      	ldr	r2, [r2, #8]
   86ac8:	609a      	str	r2, [r3, #8]
   86aca:	4629      	mov	r1, r5
   86acc:	4648      	mov	r0, r9
   86ace:	f7ff f8cd 	bl	85c6c <_free_r>
   86ad2:	e790      	b.n	869f6 <_realloc_r+0xf6>
   86ad4:	4611      	mov	r1, r2
   86ad6:	b003      	add	sp, #12
   86ad8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86adc:	f7ff bbd8 	b.w	86290 <_malloc_r>
   86ae0:	68ca      	ldr	r2, [r1, #12]
   86ae2:	6889      	ldr	r1, [r1, #8]
   86ae4:	462f      	mov	r7, r5
   86ae6:	60ca      	str	r2, [r1, #12]
   86ae8:	4606      	mov	r6, r0
   86aea:	6091      	str	r1, [r2, #8]
   86aec:	e776      	b.n	869dc <_realloc_r+0xdc>
   86aee:	6841      	ldr	r1, [r0, #4]
   86af0:	f104 0010 	add.w	r0, r4, #16
   86af4:	f021 0103 	bic.w	r1, r1, #3
   86af8:	4431      	add	r1, r6
   86afa:	4281      	cmp	r1, r0
   86afc:	da5a      	bge.n	86bb4 <_realloc_r+0x2b4>
   86afe:	07db      	lsls	r3, r3, #31
   86b00:	d4c4      	bmi.n	86a8c <_realloc_r+0x18c>
   86b02:	f855 3c08 	ldr.w	r3, [r5, #-8]
   86b06:	ebc3 0a08 	rsb	sl, r3, r8
   86b0a:	f8da 3004 	ldr.w	r3, [sl, #4]
   86b0e:	f023 0303 	bic.w	r3, r3, #3
   86b12:	eb01 0c03 	add.w	ip, r1, r3
   86b16:	4560      	cmp	r0, ip
   86b18:	f73f af7e 	bgt.w	86a18 <_realloc_r+0x118>
   86b1c:	4657      	mov	r7, sl
   86b1e:	f8da 300c 	ldr.w	r3, [sl, #12]
   86b22:	f857 1f08 	ldr.w	r1, [r7, #8]!
   86b26:	1f32      	subs	r2, r6, #4
   86b28:	2a24      	cmp	r2, #36	; 0x24
   86b2a:	60cb      	str	r3, [r1, #12]
   86b2c:	6099      	str	r1, [r3, #8]
   86b2e:	f200 80b6 	bhi.w	86c9e <_realloc_r+0x39e>
   86b32:	2a13      	cmp	r2, #19
   86b34:	f240 80a7 	bls.w	86c86 <_realloc_r+0x386>
   86b38:	682b      	ldr	r3, [r5, #0]
   86b3a:	2a1b      	cmp	r2, #27
   86b3c:	f8ca 3008 	str.w	r3, [sl, #8]
   86b40:	686b      	ldr	r3, [r5, #4]
   86b42:	f8ca 300c 	str.w	r3, [sl, #12]
   86b46:	f200 80b3 	bhi.w	86cb0 <_realloc_r+0x3b0>
   86b4a:	3508      	adds	r5, #8
   86b4c:	f10a 0310 	add.w	r3, sl, #16
   86b50:	682a      	ldr	r2, [r5, #0]
   86b52:	601a      	str	r2, [r3, #0]
   86b54:	686a      	ldr	r2, [r5, #4]
   86b56:	605a      	str	r2, [r3, #4]
   86b58:	68aa      	ldr	r2, [r5, #8]
   86b5a:	609a      	str	r2, [r3, #8]
   86b5c:	ebc4 030c 	rsb	r3, r4, ip
   86b60:	eb0a 0204 	add.w	r2, sl, r4
   86b64:	f043 0301 	orr.w	r3, r3, #1
   86b68:	f8cb 2008 	str.w	r2, [fp, #8]
   86b6c:	6053      	str	r3, [r2, #4]
   86b6e:	f8da 3004 	ldr.w	r3, [sl, #4]
   86b72:	4648      	mov	r0, r9
   86b74:	f003 0301 	and.w	r3, r3, #1
   86b78:	431c      	orrs	r4, r3
   86b7a:	f8ca 4004 	str.w	r4, [sl, #4]
   86b7e:	f7ff febd 	bl	868fc <__malloc_unlock>
   86b82:	4638      	mov	r0, r7
   86b84:	e73b      	b.n	869fe <_realloc_r+0xfe>
   86b86:	682b      	ldr	r3, [r5, #0]
   86b88:	2a1b      	cmp	r2, #27
   86b8a:	6003      	str	r3, [r0, #0]
   86b8c:	686b      	ldr	r3, [r5, #4]
   86b8e:	6043      	str	r3, [r0, #4]
   86b90:	d828      	bhi.n	86be4 <_realloc_r+0x2e4>
   86b92:	f100 0308 	add.w	r3, r0, #8
   86b96:	f105 0208 	add.w	r2, r5, #8
   86b9a:	e790      	b.n	86abe <_realloc_r+0x1be>
   86b9c:	463b      	mov	r3, r7
   86b9e:	682a      	ldr	r2, [r5, #0]
   86ba0:	4676      	mov	r6, lr
   86ba2:	601a      	str	r2, [r3, #0]
   86ba4:	686a      	ldr	r2, [r5, #4]
   86ba6:	46d0      	mov	r8, sl
   86ba8:	605a      	str	r2, [r3, #4]
   86baa:	68aa      	ldr	r2, [r5, #8]
   86bac:	609a      	str	r2, [r3, #8]
   86bae:	f8da 3004 	ldr.w	r3, [sl, #4]
   86bb2:	e713      	b.n	869dc <_realloc_r+0xdc>
   86bb4:	1b0b      	subs	r3, r1, r4
   86bb6:	eb08 0204 	add.w	r2, r8, r4
   86bba:	f043 0301 	orr.w	r3, r3, #1
   86bbe:	f8cb 2008 	str.w	r2, [fp, #8]
   86bc2:	6053      	str	r3, [r2, #4]
   86bc4:	f855 3c04 	ldr.w	r3, [r5, #-4]
   86bc8:	4648      	mov	r0, r9
   86bca:	f003 0301 	and.w	r3, r3, #1
   86bce:	431c      	orrs	r4, r3
   86bd0:	f845 4c04 	str.w	r4, [r5, #-4]
   86bd4:	f7ff fe92 	bl	868fc <__malloc_unlock>
   86bd8:	4628      	mov	r0, r5
   86bda:	e710      	b.n	869fe <_realloc_r+0xfe>
   86bdc:	4629      	mov	r1, r5
   86bde:	f7ff fe27 	bl	86830 <memmove>
   86be2:	e772      	b.n	86aca <_realloc_r+0x1ca>
   86be4:	68ab      	ldr	r3, [r5, #8]
   86be6:	2a24      	cmp	r2, #36	; 0x24
   86be8:	6083      	str	r3, [r0, #8]
   86bea:	68eb      	ldr	r3, [r5, #12]
   86bec:	60c3      	str	r3, [r0, #12]
   86bee:	d02b      	beq.n	86c48 <_realloc_r+0x348>
   86bf0:	f100 0310 	add.w	r3, r0, #16
   86bf4:	f105 0210 	add.w	r2, r5, #16
   86bf8:	e761      	b.n	86abe <_realloc_r+0x1be>
   86bfa:	f850 2c04 	ldr.w	r2, [r0, #-4]
   86bfe:	462f      	mov	r7, r5
   86c00:	f022 0203 	bic.w	r2, r2, #3
   86c04:	4416      	add	r6, r2
   86c06:	e6e9      	b.n	869dc <_realloc_r+0xdc>
   86c08:	4629      	mov	r1, r5
   86c0a:	4638      	mov	r0, r7
   86c0c:	4676      	mov	r6, lr
   86c0e:	46d0      	mov	r8, sl
   86c10:	f7ff fe0e 	bl	86830 <memmove>
   86c14:	f8da 3004 	ldr.w	r3, [sl, #4]
   86c18:	e6e0      	b.n	869dc <_realloc_r+0xdc>
   86c1a:	463a      	mov	r2, r7
   86c1c:	e719      	b.n	86a52 <_realloc_r+0x152>
   86c1e:	4629      	mov	r1, r5
   86c20:	4638      	mov	r0, r7
   86c22:	461e      	mov	r6, r3
   86c24:	46d0      	mov	r8, sl
   86c26:	f7ff fe03 	bl	86830 <memmove>
   86c2a:	f8da 3004 	ldr.w	r3, [sl, #4]
   86c2e:	e6d5      	b.n	869dc <_realloc_r+0xdc>
   86c30:	68ab      	ldr	r3, [r5, #8]
   86c32:	2a24      	cmp	r2, #36	; 0x24
   86c34:	f8ca 3010 	str.w	r3, [sl, #16]
   86c38:	68eb      	ldr	r3, [r5, #12]
   86c3a:	f8ca 3014 	str.w	r3, [sl, #20]
   86c3e:	d018      	beq.n	86c72 <_realloc_r+0x372>
   86c40:	3510      	adds	r5, #16
   86c42:	f10a 0318 	add.w	r3, sl, #24
   86c46:	e7aa      	b.n	86b9e <_realloc_r+0x29e>
   86c48:	692a      	ldr	r2, [r5, #16]
   86c4a:	f100 0318 	add.w	r3, r0, #24
   86c4e:	6102      	str	r2, [r0, #16]
   86c50:	6969      	ldr	r1, [r5, #20]
   86c52:	f105 0218 	add.w	r2, r5, #24
   86c56:	6141      	str	r1, [r0, #20]
   86c58:	e731      	b.n	86abe <_realloc_r+0x1be>
   86c5a:	68a9      	ldr	r1, [r5, #8]
   86c5c:	2a24      	cmp	r2, #36	; 0x24
   86c5e:	f8ca 1010 	str.w	r1, [sl, #16]
   86c62:	68e9      	ldr	r1, [r5, #12]
   86c64:	f8ca 1014 	str.w	r1, [sl, #20]
   86c68:	d00f      	beq.n	86c8a <_realloc_r+0x38a>
   86c6a:	3510      	adds	r5, #16
   86c6c:	f10a 0218 	add.w	r2, sl, #24
   86c70:	e6ef      	b.n	86a52 <_realloc_r+0x152>
   86c72:	692a      	ldr	r2, [r5, #16]
   86c74:	f10a 0320 	add.w	r3, sl, #32
   86c78:	f8ca 2018 	str.w	r2, [sl, #24]
   86c7c:	696a      	ldr	r2, [r5, #20]
   86c7e:	3518      	adds	r5, #24
   86c80:	f8ca 201c 	str.w	r2, [sl, #28]
   86c84:	e78b      	b.n	86b9e <_realloc_r+0x29e>
   86c86:	463b      	mov	r3, r7
   86c88:	e762      	b.n	86b50 <_realloc_r+0x250>
   86c8a:	6929      	ldr	r1, [r5, #16]
   86c8c:	f10a 0220 	add.w	r2, sl, #32
   86c90:	f8ca 1018 	str.w	r1, [sl, #24]
   86c94:	6969      	ldr	r1, [r5, #20]
   86c96:	3518      	adds	r5, #24
   86c98:	f8ca 101c 	str.w	r1, [sl, #28]
   86c9c:	e6d9      	b.n	86a52 <_realloc_r+0x152>
   86c9e:	4629      	mov	r1, r5
   86ca0:	4638      	mov	r0, r7
   86ca2:	f8cd c004 	str.w	ip, [sp, #4]
   86ca6:	f7ff fdc3 	bl	86830 <memmove>
   86caa:	f8dd c004 	ldr.w	ip, [sp, #4]
   86cae:	e755      	b.n	86b5c <_realloc_r+0x25c>
   86cb0:	68ab      	ldr	r3, [r5, #8]
   86cb2:	2a24      	cmp	r2, #36	; 0x24
   86cb4:	f8ca 3010 	str.w	r3, [sl, #16]
   86cb8:	68eb      	ldr	r3, [r5, #12]
   86cba:	f8ca 3014 	str.w	r3, [sl, #20]
   86cbe:	d003      	beq.n	86cc8 <_realloc_r+0x3c8>
   86cc0:	3510      	adds	r5, #16
   86cc2:	f10a 0318 	add.w	r3, sl, #24
   86cc6:	e743      	b.n	86b50 <_realloc_r+0x250>
   86cc8:	692a      	ldr	r2, [r5, #16]
   86cca:	f10a 0320 	add.w	r3, sl, #32
   86cce:	f8ca 2018 	str.w	r2, [sl, #24]
   86cd2:	696a      	ldr	r2, [r5, #20]
   86cd4:	3518      	adds	r5, #24
   86cd6:	f8ca 201c 	str.w	r2, [sl, #28]
   86cda:	e739      	b.n	86b50 <_realloc_r+0x250>
   86cdc:	20070608 	.word	0x20070608

00086ce0 <_sbrk_r>:
   86ce0:	b538      	push	{r3, r4, r5, lr}
   86ce2:	4c07      	ldr	r4, [pc, #28]	; (86d00 <_sbrk_r+0x20>)
   86ce4:	2300      	movs	r3, #0
   86ce6:	4605      	mov	r5, r0
   86ce8:	4608      	mov	r0, r1
   86cea:	6023      	str	r3, [r4, #0]
   86cec:	f7fc fad0 	bl	83290 <_sbrk>
   86cf0:	1c43      	adds	r3, r0, #1
   86cf2:	d000      	beq.n	86cf6 <_sbrk_r+0x16>
   86cf4:	bd38      	pop	{r3, r4, r5, pc}
   86cf6:	6823      	ldr	r3, [r4, #0]
   86cf8:	2b00      	cmp	r3, #0
   86cfa:	d0fb      	beq.n	86cf4 <_sbrk_r+0x14>
   86cfc:	602b      	str	r3, [r5, #0]
   86cfe:	bd38      	pop	{r3, r4, r5, pc}
   86d00:	2007ad74 	.word	0x2007ad74

00086d04 <__sread>:
   86d04:	b510      	push	{r4, lr}
   86d06:	460c      	mov	r4, r1
   86d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86d0c:	f000 f9bc 	bl	87088 <_read_r>
   86d10:	2800      	cmp	r0, #0
   86d12:	db03      	blt.n	86d1c <__sread+0x18>
   86d14:	6d23      	ldr	r3, [r4, #80]	; 0x50
   86d16:	4403      	add	r3, r0
   86d18:	6523      	str	r3, [r4, #80]	; 0x50
   86d1a:	bd10      	pop	{r4, pc}
   86d1c:	89a3      	ldrh	r3, [r4, #12]
   86d1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   86d22:	81a3      	strh	r3, [r4, #12]
   86d24:	bd10      	pop	{r4, pc}
   86d26:	bf00      	nop

00086d28 <__swrite>:
   86d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86d2c:	460c      	mov	r4, r1
   86d2e:	8989      	ldrh	r1, [r1, #12]
   86d30:	461d      	mov	r5, r3
   86d32:	05cb      	lsls	r3, r1, #23
   86d34:	4616      	mov	r6, r2
   86d36:	4607      	mov	r7, r0
   86d38:	d506      	bpl.n	86d48 <__swrite+0x20>
   86d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86d3e:	2200      	movs	r2, #0
   86d40:	2302      	movs	r3, #2
   86d42:	f000 f98d 	bl	87060 <_lseek_r>
   86d46:	89a1      	ldrh	r1, [r4, #12]
   86d48:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   86d4c:	81a1      	strh	r1, [r4, #12]
   86d4e:	4638      	mov	r0, r7
   86d50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86d54:	4632      	mov	r2, r6
   86d56:	462b      	mov	r3, r5
   86d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   86d5c:	f000 b8a0 	b.w	86ea0 <_write_r>

00086d60 <__sseek>:
   86d60:	b510      	push	{r4, lr}
   86d62:	460c      	mov	r4, r1
   86d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86d68:	f000 f97a 	bl	87060 <_lseek_r>
   86d6c:	89a3      	ldrh	r3, [r4, #12]
   86d6e:	1c42      	adds	r2, r0, #1
   86d70:	bf0e      	itee	eq
   86d72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   86d76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   86d7a:	6520      	strne	r0, [r4, #80]	; 0x50
   86d7c:	81a3      	strh	r3, [r4, #12]
   86d7e:	bd10      	pop	{r4, pc}

00086d80 <__sclose>:
   86d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86d84:	f000 b8f2 	b.w	86f6c <_close_r>

00086d88 <__swbuf_r>:
   86d88:	b570      	push	{r4, r5, r6, lr}
   86d8a:	460d      	mov	r5, r1
   86d8c:	4614      	mov	r4, r2
   86d8e:	4606      	mov	r6, r0
   86d90:	b110      	cbz	r0, 86d98 <__swbuf_r+0x10>
   86d92:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86d94:	2b00      	cmp	r3, #0
   86d96:	d048      	beq.n	86e2a <__swbuf_r+0xa2>
   86d98:	89a2      	ldrh	r2, [r4, #12]
   86d9a:	69a3      	ldr	r3, [r4, #24]
   86d9c:	b291      	uxth	r1, r2
   86d9e:	0708      	lsls	r0, r1, #28
   86da0:	60a3      	str	r3, [r4, #8]
   86da2:	d538      	bpl.n	86e16 <__swbuf_r+0x8e>
   86da4:	6923      	ldr	r3, [r4, #16]
   86da6:	2b00      	cmp	r3, #0
   86da8:	d035      	beq.n	86e16 <__swbuf_r+0x8e>
   86daa:	0489      	lsls	r1, r1, #18
   86dac:	b2ed      	uxtb	r5, r5
   86dae:	d515      	bpl.n	86ddc <__swbuf_r+0x54>
   86db0:	6822      	ldr	r2, [r4, #0]
   86db2:	6961      	ldr	r1, [r4, #20]
   86db4:	1ad3      	subs	r3, r2, r3
   86db6:	428b      	cmp	r3, r1
   86db8:	da1c      	bge.n	86df4 <__swbuf_r+0x6c>
   86dba:	3301      	adds	r3, #1
   86dbc:	68a1      	ldr	r1, [r4, #8]
   86dbe:	1c50      	adds	r0, r2, #1
   86dc0:	3901      	subs	r1, #1
   86dc2:	60a1      	str	r1, [r4, #8]
   86dc4:	6020      	str	r0, [r4, #0]
   86dc6:	7015      	strb	r5, [r2, #0]
   86dc8:	6962      	ldr	r2, [r4, #20]
   86dca:	429a      	cmp	r2, r3
   86dcc:	d01a      	beq.n	86e04 <__swbuf_r+0x7c>
   86dce:	89a3      	ldrh	r3, [r4, #12]
   86dd0:	07db      	lsls	r3, r3, #31
   86dd2:	d501      	bpl.n	86dd8 <__swbuf_r+0x50>
   86dd4:	2d0a      	cmp	r5, #10
   86dd6:	d015      	beq.n	86e04 <__swbuf_r+0x7c>
   86dd8:	4628      	mov	r0, r5
   86dda:	bd70      	pop	{r4, r5, r6, pc}
   86ddc:	6e61      	ldr	r1, [r4, #100]	; 0x64
   86dde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   86de2:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   86de6:	81a2      	strh	r2, [r4, #12]
   86de8:	6822      	ldr	r2, [r4, #0]
   86dea:	6661      	str	r1, [r4, #100]	; 0x64
   86dec:	6961      	ldr	r1, [r4, #20]
   86dee:	1ad3      	subs	r3, r2, r3
   86df0:	428b      	cmp	r3, r1
   86df2:	dbe2      	blt.n	86dba <__swbuf_r+0x32>
   86df4:	4630      	mov	r0, r6
   86df6:	4621      	mov	r1, r4
   86df8:	f7fe fdcc 	bl	85994 <_fflush_r>
   86dfc:	b940      	cbnz	r0, 86e10 <__swbuf_r+0x88>
   86dfe:	6822      	ldr	r2, [r4, #0]
   86e00:	2301      	movs	r3, #1
   86e02:	e7db      	b.n	86dbc <__swbuf_r+0x34>
   86e04:	4630      	mov	r0, r6
   86e06:	4621      	mov	r1, r4
   86e08:	f7fe fdc4 	bl	85994 <_fflush_r>
   86e0c:	2800      	cmp	r0, #0
   86e0e:	d0e3      	beq.n	86dd8 <__swbuf_r+0x50>
   86e10:	f04f 30ff 	mov.w	r0, #4294967295
   86e14:	bd70      	pop	{r4, r5, r6, pc}
   86e16:	4630      	mov	r0, r6
   86e18:	4621      	mov	r1, r4
   86e1a:	f7fe fca5 	bl	85768 <__swsetup_r>
   86e1e:	2800      	cmp	r0, #0
   86e20:	d1f6      	bne.n	86e10 <__swbuf_r+0x88>
   86e22:	89a2      	ldrh	r2, [r4, #12]
   86e24:	6923      	ldr	r3, [r4, #16]
   86e26:	b291      	uxth	r1, r2
   86e28:	e7bf      	b.n	86daa <__swbuf_r+0x22>
   86e2a:	f7fe fe47 	bl	85abc <__sinit>
   86e2e:	e7b3      	b.n	86d98 <__swbuf_r+0x10>

00086e30 <_wcrtomb_r>:
   86e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86e34:	4605      	mov	r5, r0
   86e36:	b086      	sub	sp, #24
   86e38:	461e      	mov	r6, r3
   86e3a:	460c      	mov	r4, r1
   86e3c:	b1a1      	cbz	r1, 86e68 <_wcrtomb_r+0x38>
   86e3e:	4b10      	ldr	r3, [pc, #64]	; (86e80 <_wcrtomb_r+0x50>)
   86e40:	4617      	mov	r7, r2
   86e42:	f8d3 8000 	ldr.w	r8, [r3]
   86e46:	f7ff f9a1 	bl	8618c <__locale_charset>
   86e4a:	9600      	str	r6, [sp, #0]
   86e4c:	4603      	mov	r3, r0
   86e4e:	4621      	mov	r1, r4
   86e50:	463a      	mov	r2, r7
   86e52:	4628      	mov	r0, r5
   86e54:	47c0      	blx	r8
   86e56:	1c43      	adds	r3, r0, #1
   86e58:	d103      	bne.n	86e62 <_wcrtomb_r+0x32>
   86e5a:	2200      	movs	r2, #0
   86e5c:	238a      	movs	r3, #138	; 0x8a
   86e5e:	6032      	str	r2, [r6, #0]
   86e60:	602b      	str	r3, [r5, #0]
   86e62:	b006      	add	sp, #24
   86e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86e68:	4b05      	ldr	r3, [pc, #20]	; (86e80 <_wcrtomb_r+0x50>)
   86e6a:	681f      	ldr	r7, [r3, #0]
   86e6c:	f7ff f98e 	bl	8618c <__locale_charset>
   86e70:	9600      	str	r6, [sp, #0]
   86e72:	4603      	mov	r3, r0
   86e74:	4622      	mov	r2, r4
   86e76:	4628      	mov	r0, r5
   86e78:	a903      	add	r1, sp, #12
   86e7a:	47b8      	blx	r7
   86e7c:	e7eb      	b.n	86e56 <_wcrtomb_r+0x26>
   86e7e:	bf00      	nop
   86e80:	20070a18 	.word	0x20070a18

00086e84 <__ascii_wctomb>:
   86e84:	b121      	cbz	r1, 86e90 <__ascii_wctomb+0xc>
   86e86:	2aff      	cmp	r2, #255	; 0xff
   86e88:	d804      	bhi.n	86e94 <__ascii_wctomb+0x10>
   86e8a:	700a      	strb	r2, [r1, #0]
   86e8c:	2001      	movs	r0, #1
   86e8e:	4770      	bx	lr
   86e90:	4608      	mov	r0, r1
   86e92:	4770      	bx	lr
   86e94:	238a      	movs	r3, #138	; 0x8a
   86e96:	6003      	str	r3, [r0, #0]
   86e98:	f04f 30ff 	mov.w	r0, #4294967295
   86e9c:	4770      	bx	lr
   86e9e:	bf00      	nop

00086ea0 <_write_r>:
   86ea0:	b570      	push	{r4, r5, r6, lr}
   86ea2:	4c08      	ldr	r4, [pc, #32]	; (86ec4 <_write_r+0x24>)
   86ea4:	4606      	mov	r6, r0
   86ea6:	2500      	movs	r5, #0
   86ea8:	4608      	mov	r0, r1
   86eaa:	4611      	mov	r1, r2
   86eac:	461a      	mov	r2, r3
   86eae:	6025      	str	r5, [r4, #0]
   86eb0:	f7fb fd84 	bl	829bc <_write>
   86eb4:	1c43      	adds	r3, r0, #1
   86eb6:	d000      	beq.n	86eba <_write_r+0x1a>
   86eb8:	bd70      	pop	{r4, r5, r6, pc}
   86eba:	6823      	ldr	r3, [r4, #0]
   86ebc:	2b00      	cmp	r3, #0
   86ebe:	d0fb      	beq.n	86eb8 <_write_r+0x18>
   86ec0:	6033      	str	r3, [r6, #0]
   86ec2:	bd70      	pop	{r4, r5, r6, pc}
   86ec4:	2007ad74 	.word	0x2007ad74

00086ec8 <__register_exitproc>:
   86ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86ecc:	4c25      	ldr	r4, [pc, #148]	; (86f64 <__register_exitproc+0x9c>)
   86ece:	4606      	mov	r6, r0
   86ed0:	6825      	ldr	r5, [r4, #0]
   86ed2:	4688      	mov	r8, r1
   86ed4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   86ed8:	4692      	mov	sl, r2
   86eda:	4699      	mov	r9, r3
   86edc:	b3c4      	cbz	r4, 86f50 <__register_exitproc+0x88>
   86ede:	6860      	ldr	r0, [r4, #4]
   86ee0:	281f      	cmp	r0, #31
   86ee2:	dc17      	bgt.n	86f14 <__register_exitproc+0x4c>
   86ee4:	1c41      	adds	r1, r0, #1
   86ee6:	b176      	cbz	r6, 86f06 <__register_exitproc+0x3e>
   86ee8:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   86eec:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   86ef0:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   86ef4:	2201      	movs	r2, #1
   86ef6:	4082      	lsls	r2, r0
   86ef8:	4315      	orrs	r5, r2
   86efa:	2e02      	cmp	r6, #2
   86efc:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   86f00:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   86f04:	d01e      	beq.n	86f44 <__register_exitproc+0x7c>
   86f06:	1c83      	adds	r3, r0, #2
   86f08:	6061      	str	r1, [r4, #4]
   86f0a:	2000      	movs	r0, #0
   86f0c:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   86f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86f14:	4b14      	ldr	r3, [pc, #80]	; (86f68 <__register_exitproc+0xa0>)
   86f16:	b303      	cbz	r3, 86f5a <__register_exitproc+0x92>
   86f18:	f44f 70c8 	mov.w	r0, #400	; 0x190
   86f1c:	f7ff f9b0 	bl	86280 <malloc>
   86f20:	4604      	mov	r4, r0
   86f22:	b1d0      	cbz	r0, 86f5a <__register_exitproc+0x92>
   86f24:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   86f28:	2700      	movs	r7, #0
   86f2a:	e884 0088 	stmia.w	r4, {r3, r7}
   86f2e:	4638      	mov	r0, r7
   86f30:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   86f34:	2101      	movs	r1, #1
   86f36:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   86f3a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   86f3e:	2e00      	cmp	r6, #0
   86f40:	d0e1      	beq.n	86f06 <__register_exitproc+0x3e>
   86f42:	e7d1      	b.n	86ee8 <__register_exitproc+0x20>
   86f44:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   86f48:	431a      	orrs	r2, r3
   86f4a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   86f4e:	e7da      	b.n	86f06 <__register_exitproc+0x3e>
   86f50:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   86f54:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   86f58:	e7c1      	b.n	86ede <__register_exitproc+0x16>
   86f5a:	f04f 30ff 	mov.w	r0, #4294967295
   86f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86f62:	bf00      	nop
   86f64:	000877cc 	.word	0x000877cc
   86f68:	00086281 	.word	0x00086281

00086f6c <_close_r>:
   86f6c:	b538      	push	{r3, r4, r5, lr}
   86f6e:	4c07      	ldr	r4, [pc, #28]	; (86f8c <_close_r+0x20>)
   86f70:	2300      	movs	r3, #0
   86f72:	4605      	mov	r5, r0
   86f74:	4608      	mov	r0, r1
   86f76:	6023      	str	r3, [r4, #0]
   86f78:	f7fc f9a4 	bl	832c4 <_close>
   86f7c:	1c43      	adds	r3, r0, #1
   86f7e:	d000      	beq.n	86f82 <_close_r+0x16>
   86f80:	bd38      	pop	{r3, r4, r5, pc}
   86f82:	6823      	ldr	r3, [r4, #0]
   86f84:	2b00      	cmp	r3, #0
   86f86:	d0fb      	beq.n	86f80 <_close_r+0x14>
   86f88:	602b      	str	r3, [r5, #0]
   86f8a:	bd38      	pop	{r3, r4, r5, pc}
   86f8c:	2007ad74 	.word	0x2007ad74

00086f90 <_fclose_r>:
   86f90:	2900      	cmp	r1, #0
   86f92:	d03d      	beq.n	87010 <_fclose_r+0x80>
   86f94:	b570      	push	{r4, r5, r6, lr}
   86f96:	4605      	mov	r5, r0
   86f98:	460c      	mov	r4, r1
   86f9a:	b108      	cbz	r0, 86fa0 <_fclose_r+0x10>
   86f9c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86f9e:	b37b      	cbz	r3, 87000 <_fclose_r+0x70>
   86fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86fa4:	b90b      	cbnz	r3, 86faa <_fclose_r+0x1a>
   86fa6:	2000      	movs	r0, #0
   86fa8:	bd70      	pop	{r4, r5, r6, pc}
   86faa:	4628      	mov	r0, r5
   86fac:	4621      	mov	r1, r4
   86fae:	f7fe fc4d 	bl	8584c <__sflush_r>
   86fb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   86fb4:	4606      	mov	r6, r0
   86fb6:	b133      	cbz	r3, 86fc6 <_fclose_r+0x36>
   86fb8:	4628      	mov	r0, r5
   86fba:	69e1      	ldr	r1, [r4, #28]
   86fbc:	4798      	blx	r3
   86fbe:	2800      	cmp	r0, #0
   86fc0:	bfb8      	it	lt
   86fc2:	f04f 36ff 	movlt.w	r6, #4294967295
   86fc6:	89a3      	ldrh	r3, [r4, #12]
   86fc8:	061b      	lsls	r3, r3, #24
   86fca:	d41c      	bmi.n	87006 <_fclose_r+0x76>
   86fcc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   86fce:	b141      	cbz	r1, 86fe2 <_fclose_r+0x52>
   86fd0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   86fd4:	4299      	cmp	r1, r3
   86fd6:	d002      	beq.n	86fde <_fclose_r+0x4e>
   86fd8:	4628      	mov	r0, r5
   86fda:	f7fe fe47 	bl	85c6c <_free_r>
   86fde:	2300      	movs	r3, #0
   86fe0:	6323      	str	r3, [r4, #48]	; 0x30
   86fe2:	6c61      	ldr	r1, [r4, #68]	; 0x44
   86fe4:	b121      	cbz	r1, 86ff0 <_fclose_r+0x60>
   86fe6:	4628      	mov	r0, r5
   86fe8:	f7fe fe40 	bl	85c6c <_free_r>
   86fec:	2300      	movs	r3, #0
   86fee:	6463      	str	r3, [r4, #68]	; 0x44
   86ff0:	f7fe fd6a 	bl	85ac8 <__sfp_lock_acquire>
   86ff4:	2300      	movs	r3, #0
   86ff6:	81a3      	strh	r3, [r4, #12]
   86ff8:	f7fe fd68 	bl	85acc <__sfp_lock_release>
   86ffc:	4630      	mov	r0, r6
   86ffe:	bd70      	pop	{r4, r5, r6, pc}
   87000:	f7fe fd5c 	bl	85abc <__sinit>
   87004:	e7cc      	b.n	86fa0 <_fclose_r+0x10>
   87006:	4628      	mov	r0, r5
   87008:	6921      	ldr	r1, [r4, #16]
   8700a:	f7fe fe2f 	bl	85c6c <_free_r>
   8700e:	e7dd      	b.n	86fcc <_fclose_r+0x3c>
   87010:	2000      	movs	r0, #0
   87012:	4770      	bx	lr

00087014 <_fstat_r>:
   87014:	b538      	push	{r3, r4, r5, lr}
   87016:	4c08      	ldr	r4, [pc, #32]	; (87038 <_fstat_r+0x24>)
   87018:	2300      	movs	r3, #0
   8701a:	4605      	mov	r5, r0
   8701c:	4608      	mov	r0, r1
   8701e:	4611      	mov	r1, r2
   87020:	6023      	str	r3, [r4, #0]
   87022:	f7fc f953 	bl	832cc <_fstat>
   87026:	1c43      	adds	r3, r0, #1
   87028:	d000      	beq.n	8702c <_fstat_r+0x18>
   8702a:	bd38      	pop	{r3, r4, r5, pc}
   8702c:	6823      	ldr	r3, [r4, #0]
   8702e:	2b00      	cmp	r3, #0
   87030:	d0fb      	beq.n	8702a <_fstat_r+0x16>
   87032:	602b      	str	r3, [r5, #0]
   87034:	bd38      	pop	{r3, r4, r5, pc}
   87036:	bf00      	nop
   87038:	2007ad74 	.word	0x2007ad74

0008703c <_isatty_r>:
   8703c:	b538      	push	{r3, r4, r5, lr}
   8703e:	4c07      	ldr	r4, [pc, #28]	; (8705c <_isatty_r+0x20>)
   87040:	2300      	movs	r3, #0
   87042:	4605      	mov	r5, r0
   87044:	4608      	mov	r0, r1
   87046:	6023      	str	r3, [r4, #0]
   87048:	f7fc f946 	bl	832d8 <_isatty>
   8704c:	1c43      	adds	r3, r0, #1
   8704e:	d000      	beq.n	87052 <_isatty_r+0x16>
   87050:	bd38      	pop	{r3, r4, r5, pc}
   87052:	6823      	ldr	r3, [r4, #0]
   87054:	2b00      	cmp	r3, #0
   87056:	d0fb      	beq.n	87050 <_isatty_r+0x14>
   87058:	602b      	str	r3, [r5, #0]
   8705a:	bd38      	pop	{r3, r4, r5, pc}
   8705c:	2007ad74 	.word	0x2007ad74

00087060 <_lseek_r>:
   87060:	b570      	push	{r4, r5, r6, lr}
   87062:	4c08      	ldr	r4, [pc, #32]	; (87084 <_lseek_r+0x24>)
   87064:	4606      	mov	r6, r0
   87066:	2500      	movs	r5, #0
   87068:	4608      	mov	r0, r1
   8706a:	4611      	mov	r1, r2
   8706c:	461a      	mov	r2, r3
   8706e:	6025      	str	r5, [r4, #0]
   87070:	f7fc f934 	bl	832dc <_lseek>
   87074:	1c43      	adds	r3, r0, #1
   87076:	d000      	beq.n	8707a <_lseek_r+0x1a>
   87078:	bd70      	pop	{r4, r5, r6, pc}
   8707a:	6823      	ldr	r3, [r4, #0]
   8707c:	2b00      	cmp	r3, #0
   8707e:	d0fb      	beq.n	87078 <_lseek_r+0x18>
   87080:	6033      	str	r3, [r6, #0]
   87082:	bd70      	pop	{r4, r5, r6, pc}
   87084:	2007ad74 	.word	0x2007ad74

00087088 <_read_r>:
   87088:	b570      	push	{r4, r5, r6, lr}
   8708a:	4c08      	ldr	r4, [pc, #32]	; (870ac <_read_r+0x24>)
   8708c:	4606      	mov	r6, r0
   8708e:	2500      	movs	r5, #0
   87090:	4608      	mov	r0, r1
   87092:	4611      	mov	r1, r2
   87094:	461a      	mov	r2, r3
   87096:	6025      	str	r5, [r4, #0]
   87098:	f7f9 fa4c 	bl	80534 <_read>
   8709c:	1c43      	adds	r3, r0, #1
   8709e:	d000      	beq.n	870a2 <_read_r+0x1a>
   870a0:	bd70      	pop	{r4, r5, r6, pc}
   870a2:	6823      	ldr	r3, [r4, #0]
   870a4:	2b00      	cmp	r3, #0
   870a6:	d0fb      	beq.n	870a0 <_read_r+0x18>
   870a8:	6033      	str	r3, [r6, #0]
   870aa:	bd70      	pop	{r4, r5, r6, pc}
   870ac:	2007ad74 	.word	0x2007ad74

000870b0 <__aeabi_uldivmod>:
   870b0:	b953      	cbnz	r3, 870c8 <__aeabi_uldivmod+0x18>
   870b2:	b94a      	cbnz	r2, 870c8 <__aeabi_uldivmod+0x18>
   870b4:	2900      	cmp	r1, #0
   870b6:	bf08      	it	eq
   870b8:	2800      	cmpeq	r0, #0
   870ba:	bf1c      	itt	ne
   870bc:	f04f 31ff 	movne.w	r1, #4294967295
   870c0:	f04f 30ff 	movne.w	r0, #4294967295
   870c4:	f000 b83c 	b.w	87140 <__aeabi_idiv0>
   870c8:	b082      	sub	sp, #8
   870ca:	46ec      	mov	ip, sp
   870cc:	e92d 5000 	stmdb	sp!, {ip, lr}
   870d0:	f000 f81e 	bl	87110 <__gnu_uldivmod_helper>
   870d4:	f8dd e004 	ldr.w	lr, [sp, #4]
   870d8:	b002      	add	sp, #8
   870da:	bc0c      	pop	{r2, r3}
   870dc:	4770      	bx	lr
   870de:	bf00      	nop

000870e0 <__gnu_ldivmod_helper>:
   870e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   870e4:	9c06      	ldr	r4, [sp, #24]
   870e6:	4690      	mov	r8, r2
   870e8:	4606      	mov	r6, r0
   870ea:	460f      	mov	r7, r1
   870ec:	461d      	mov	r5, r3
   870ee:	f000 f829 	bl	87144 <__divdi3>
   870f2:	fb08 fc01 	mul.w	ip, r8, r1
   870f6:	fba8 2300 	umull	r2, r3, r8, r0
   870fa:	fb00 c505 	mla	r5, r0, r5, ip
   870fe:	1ab2      	subs	r2, r6, r2
   87100:	442b      	add	r3, r5
   87102:	eb67 0303 	sbc.w	r3, r7, r3
   87106:	4686      	mov	lr, r0
   87108:	e9c4 2300 	strd	r2, r3, [r4]
   8710c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00087110 <__gnu_uldivmod_helper>:
   87110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   87114:	9e08      	ldr	r6, [sp, #32]
   87116:	4617      	mov	r7, r2
   87118:	4680      	mov	r8, r0
   8711a:	4689      	mov	r9, r1
   8711c:	461d      	mov	r5, r3
   8711e:	f000 f967 	bl	873f0 <__udivdi3>
   87122:	fb00 f305 	mul.w	r3, r0, r5
   87126:	fba0 4507 	umull	r4, r5, r0, r7
   8712a:	fb07 3701 	mla	r7, r7, r1, r3
   8712e:	ebb8 0404 	subs.w	r4, r8, r4
   87132:	443d      	add	r5, r7
   87134:	eb69 0505 	sbc.w	r5, r9, r5
   87138:	e9c6 4500 	strd	r4, r5, [r6]
   8713c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00087140 <__aeabi_idiv0>:
   87140:	4770      	bx	lr
   87142:	bf00      	nop

00087144 <__divdi3>:
   87144:	2900      	cmp	r1, #0
   87146:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8714a:	f2c0 80a8 	blt.w	8729e <__divdi3+0x15a>
   8714e:	2600      	movs	r6, #0
   87150:	2b00      	cmp	r3, #0
   87152:	f2c0 809e 	blt.w	87292 <__divdi3+0x14e>
   87156:	4681      	mov	r9, r0
   87158:	468e      	mov	lr, r1
   8715a:	4690      	mov	r8, r2
   8715c:	469c      	mov	ip, r3
   8715e:	4617      	mov	r7, r2
   87160:	4604      	mov	r4, r0
   87162:	460d      	mov	r5, r1
   87164:	2b00      	cmp	r3, #0
   87166:	d13d      	bne.n	871e4 <__divdi3+0xa0>
   87168:	428a      	cmp	r2, r1
   8716a:	d959      	bls.n	87220 <__divdi3+0xdc>
   8716c:	fab2 f382 	clz	r3, r2
   87170:	b13b      	cbz	r3, 87182 <__divdi3+0x3e>
   87172:	f1c3 0220 	rsb	r2, r3, #32
   87176:	409d      	lsls	r5, r3
   87178:	fa20 f202 	lsr.w	r2, r0, r2
   8717c:	409f      	lsls	r7, r3
   8717e:	4315      	orrs	r5, r2
   87180:	409c      	lsls	r4, r3
   87182:	0c39      	lsrs	r1, r7, #16
   87184:	fbb5 f0f1 	udiv	r0, r5, r1
   87188:	fa1f fe87 	uxth.w	lr, r7
   8718c:	fb01 5510 	mls	r5, r1, r0, r5
   87190:	fb0e f300 	mul.w	r3, lr, r0
   87194:	0c22      	lsrs	r2, r4, #16
   87196:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   8719a:	42ab      	cmp	r3, r5
   8719c:	d909      	bls.n	871b2 <__divdi3+0x6e>
   8719e:	19ed      	adds	r5, r5, r7
   871a0:	f100 32ff 	add.w	r2, r0, #4294967295
   871a4:	f080 810b 	bcs.w	873be <__divdi3+0x27a>
   871a8:	42ab      	cmp	r3, r5
   871aa:	f240 8108 	bls.w	873be <__divdi3+0x27a>
   871ae:	3802      	subs	r0, #2
   871b0:	443d      	add	r5, r7
   871b2:	1aed      	subs	r5, r5, r3
   871b4:	fbb5 f3f1 	udiv	r3, r5, r1
   871b8:	fb01 5513 	mls	r5, r1, r3, r5
   871bc:	fb0e fe03 	mul.w	lr, lr, r3
   871c0:	b2a4      	uxth	r4, r4
   871c2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   871c6:	45ae      	cmp	lr, r5
   871c8:	d908      	bls.n	871dc <__divdi3+0x98>
   871ca:	19ed      	adds	r5, r5, r7
   871cc:	f103 32ff 	add.w	r2, r3, #4294967295
   871d0:	f080 80f7 	bcs.w	873c2 <__divdi3+0x27e>
   871d4:	45ae      	cmp	lr, r5
   871d6:	f240 80f4 	bls.w	873c2 <__divdi3+0x27e>
   871da:	3b02      	subs	r3, #2
   871dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   871e0:	2200      	movs	r2, #0
   871e2:	e003      	b.n	871ec <__divdi3+0xa8>
   871e4:	428b      	cmp	r3, r1
   871e6:	d90f      	bls.n	87208 <__divdi3+0xc4>
   871e8:	2200      	movs	r2, #0
   871ea:	4613      	mov	r3, r2
   871ec:	1c34      	adds	r4, r6, #0
   871ee:	bf18      	it	ne
   871f0:	2401      	movne	r4, #1
   871f2:	4260      	negs	r0, r4
   871f4:	f04f 0500 	mov.w	r5, #0
   871f8:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
   871fc:	4058      	eors	r0, r3
   871fe:	4051      	eors	r1, r2
   87200:	1900      	adds	r0, r0, r4
   87202:	4169      	adcs	r1, r5
   87204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   87208:	fab3 f283 	clz	r2, r3
   8720c:	2a00      	cmp	r2, #0
   8720e:	f040 8089 	bne.w	87324 <__divdi3+0x1e0>
   87212:	428b      	cmp	r3, r1
   87214:	d302      	bcc.n	8721c <__divdi3+0xd8>
   87216:	4580      	cmp	r8, r0
   87218:	f200 80e2 	bhi.w	873e0 <__divdi3+0x29c>
   8721c:	2301      	movs	r3, #1
   8721e:	e7e5      	b.n	871ec <__divdi3+0xa8>
   87220:	b912      	cbnz	r2, 87228 <__divdi3+0xe4>
   87222:	2301      	movs	r3, #1
   87224:	fbb3 f7f2 	udiv	r7, r3, r2
   87228:	fab7 f887 	clz	r8, r7
   8722c:	f1b8 0f00 	cmp.w	r8, #0
   87230:	d13b      	bne.n	872aa <__divdi3+0x166>
   87232:	1bed      	subs	r5, r5, r7
   87234:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   87238:	fa1f fe87 	uxth.w	lr, r7
   8723c:	2201      	movs	r2, #1
   8723e:	fbb5 f0fc 	udiv	r0, r5, ip
   87242:	fb0c 5510 	mls	r5, ip, r0, r5
   87246:	fb0e f300 	mul.w	r3, lr, r0
   8724a:	0c21      	lsrs	r1, r4, #16
   8724c:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   87250:	42ab      	cmp	r3, r5
   87252:	d907      	bls.n	87264 <__divdi3+0x120>
   87254:	19ed      	adds	r5, r5, r7
   87256:	f100 31ff 	add.w	r1, r0, #4294967295
   8725a:	d202      	bcs.n	87262 <__divdi3+0x11e>
   8725c:	42ab      	cmp	r3, r5
   8725e:	f200 80c3 	bhi.w	873e8 <__divdi3+0x2a4>
   87262:	4608      	mov	r0, r1
   87264:	1aed      	subs	r5, r5, r3
   87266:	fbb5 f3fc 	udiv	r3, r5, ip
   8726a:	fb0c 5513 	mls	r5, ip, r3, r5
   8726e:	fb0e fe03 	mul.w	lr, lr, r3
   87272:	b2a4      	uxth	r4, r4
   87274:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   87278:	45ae      	cmp	lr, r5
   8727a:	d907      	bls.n	8728c <__divdi3+0x148>
   8727c:	19ed      	adds	r5, r5, r7
   8727e:	f103 31ff 	add.w	r1, r3, #4294967295
   87282:	d202      	bcs.n	8728a <__divdi3+0x146>
   87284:	45ae      	cmp	lr, r5
   87286:	f200 80ad 	bhi.w	873e4 <__divdi3+0x2a0>
   8728a:	460b      	mov	r3, r1
   8728c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   87290:	e7ac      	b.n	871ec <__divdi3+0xa8>
   87292:	4252      	negs	r2, r2
   87294:	ea6f 0606 	mvn.w	r6, r6
   87298:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8729c:	e75b      	b.n	87156 <__divdi3+0x12>
   8729e:	4240      	negs	r0, r0
   872a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   872a4:	f04f 36ff 	mov.w	r6, #4294967295
   872a8:	e752      	b.n	87150 <__divdi3+0xc>
   872aa:	fa07 f708 	lsl.w	r7, r7, r8
   872ae:	f1c8 0220 	rsb	r2, r8, #32
   872b2:	fa25 f302 	lsr.w	r3, r5, r2
   872b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   872ba:	fbb3 f1fc 	udiv	r1, r3, ip
   872be:	fa1f fe87 	uxth.w	lr, r7
   872c2:	fb0c 3311 	mls	r3, ip, r1, r3
   872c6:	fa24 f202 	lsr.w	r2, r4, r2
   872ca:	fa05 f508 	lsl.w	r5, r5, r8
   872ce:	fb0e f901 	mul.w	r9, lr, r1
   872d2:	432a      	orrs	r2, r5
   872d4:	0c10      	lsrs	r0, r2, #16
   872d6:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   872da:	4599      	cmp	r9, r3
   872dc:	fa04 f408 	lsl.w	r4, r4, r8
   872e0:	d907      	bls.n	872f2 <__divdi3+0x1ae>
   872e2:	19db      	adds	r3, r3, r7
   872e4:	f101 30ff 	add.w	r0, r1, #4294967295
   872e8:	d278      	bcs.n	873dc <__divdi3+0x298>
   872ea:	4599      	cmp	r9, r3
   872ec:	d976      	bls.n	873dc <__divdi3+0x298>
   872ee:	3902      	subs	r1, #2
   872f0:	443b      	add	r3, r7
   872f2:	ebc9 0303 	rsb	r3, r9, r3
   872f6:	fbb3 f0fc 	udiv	r0, r3, ip
   872fa:	fb0c 3310 	mls	r3, ip, r0, r3
   872fe:	fb0e f500 	mul.w	r5, lr, r0
   87302:	b292      	uxth	r2, r2
   87304:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   87308:	429d      	cmp	r5, r3
   8730a:	d907      	bls.n	8731c <__divdi3+0x1d8>
   8730c:	19db      	adds	r3, r3, r7
   8730e:	f100 32ff 	add.w	r2, r0, #4294967295
   87312:	d25f      	bcs.n	873d4 <__divdi3+0x290>
   87314:	429d      	cmp	r5, r3
   87316:	d95d      	bls.n	873d4 <__divdi3+0x290>
   87318:	3802      	subs	r0, #2
   8731a:	443b      	add	r3, r7
   8731c:	1b5d      	subs	r5, r3, r5
   8731e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
   87322:	e78c      	b.n	8723e <__divdi3+0xfa>
   87324:	f1c2 0320 	rsb	r3, r2, #32
   87328:	fa28 f103 	lsr.w	r1, r8, r3
   8732c:	fa0c fc02 	lsl.w	ip, ip, r2
   87330:	ea41 0c0c 	orr.w	ip, r1, ip
   87334:	ea4f 401c 	mov.w	r0, ip, lsr #16
   87338:	fa2e f103 	lsr.w	r1, lr, r3
   8733c:	fbb1 f5f0 	udiv	r5, r1, r0
   87340:	fa1f f78c 	uxth.w	r7, ip
   87344:	fb00 1115 	mls	r1, r0, r5, r1
   87348:	fa29 f303 	lsr.w	r3, r9, r3
   8734c:	fa0e fe02 	lsl.w	lr, lr, r2
   87350:	fb07 f905 	mul.w	r9, r7, r5
   87354:	ea43 0e0e 	orr.w	lr, r3, lr
   87358:	ea4f 431e 	mov.w	r3, lr, lsr #16
   8735c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   87360:	4589      	cmp	r9, r1
   87362:	fa08 f802 	lsl.w	r8, r8, r2
   87366:	d908      	bls.n	8737a <__divdi3+0x236>
   87368:	eb11 010c 	adds.w	r1, r1, ip
   8736c:	f105 33ff 	add.w	r3, r5, #4294967295
   87370:	d232      	bcs.n	873d8 <__divdi3+0x294>
   87372:	4589      	cmp	r9, r1
   87374:	d930      	bls.n	873d8 <__divdi3+0x294>
   87376:	3d02      	subs	r5, #2
   87378:	4461      	add	r1, ip
   8737a:	ebc9 0101 	rsb	r1, r9, r1
   8737e:	fbb1 f3f0 	udiv	r3, r1, r0
   87382:	fb00 1113 	mls	r1, r0, r3, r1
   87386:	fb07 f703 	mul.w	r7, r7, r3
   8738a:	fa1f fe8e 	uxth.w	lr, lr
   8738e:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   87392:	4577      	cmp	r7, lr
   87394:	d908      	bls.n	873a8 <__divdi3+0x264>
   87396:	eb1e 0e0c 	adds.w	lr, lr, ip
   8739a:	f103 31ff 	add.w	r1, r3, #4294967295
   8739e:	d217      	bcs.n	873d0 <__divdi3+0x28c>
   873a0:	4577      	cmp	r7, lr
   873a2:	d915      	bls.n	873d0 <__divdi3+0x28c>
   873a4:	3b02      	subs	r3, #2
   873a6:	44e6      	add	lr, ip
   873a8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   873ac:	fba3 8908 	umull	r8, r9, r3, r8
   873b0:	ebc7 0e0e 	rsb	lr, r7, lr
   873b4:	45ce      	cmp	lr, r9
   873b6:	d309      	bcc.n	873cc <__divdi3+0x288>
   873b8:	d005      	beq.n	873c6 <__divdi3+0x282>
   873ba:	2200      	movs	r2, #0
   873bc:	e716      	b.n	871ec <__divdi3+0xa8>
   873be:	4610      	mov	r0, r2
   873c0:	e6f7      	b.n	871b2 <__divdi3+0x6e>
   873c2:	4613      	mov	r3, r2
   873c4:	e70a      	b.n	871dc <__divdi3+0x98>
   873c6:	4094      	lsls	r4, r2
   873c8:	4544      	cmp	r4, r8
   873ca:	d2f6      	bcs.n	873ba <__divdi3+0x276>
   873cc:	3b01      	subs	r3, #1
   873ce:	e7f4      	b.n	873ba <__divdi3+0x276>
   873d0:	460b      	mov	r3, r1
   873d2:	e7e9      	b.n	873a8 <__divdi3+0x264>
   873d4:	4610      	mov	r0, r2
   873d6:	e7a1      	b.n	8731c <__divdi3+0x1d8>
   873d8:	461d      	mov	r5, r3
   873da:	e7ce      	b.n	8737a <__divdi3+0x236>
   873dc:	4601      	mov	r1, r0
   873de:	e788      	b.n	872f2 <__divdi3+0x1ae>
   873e0:	4613      	mov	r3, r2
   873e2:	e703      	b.n	871ec <__divdi3+0xa8>
   873e4:	3b02      	subs	r3, #2
   873e6:	e751      	b.n	8728c <__divdi3+0x148>
   873e8:	3802      	subs	r0, #2
   873ea:	443d      	add	r5, r7
   873ec:	e73a      	b.n	87264 <__divdi3+0x120>
   873ee:	bf00      	nop

000873f0 <__udivdi3>:
   873f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   873f4:	2b00      	cmp	r3, #0
   873f6:	d144      	bne.n	87482 <__udivdi3+0x92>
   873f8:	428a      	cmp	r2, r1
   873fa:	4615      	mov	r5, r2
   873fc:	4604      	mov	r4, r0
   873fe:	d94f      	bls.n	874a0 <__udivdi3+0xb0>
   87400:	fab2 f782 	clz	r7, r2
   87404:	460e      	mov	r6, r1
   87406:	b14f      	cbz	r7, 8741c <__udivdi3+0x2c>
   87408:	f1c7 0320 	rsb	r3, r7, #32
   8740c:	40b9      	lsls	r1, r7
   8740e:	fa20 f603 	lsr.w	r6, r0, r3
   87412:	fa02 f507 	lsl.w	r5, r2, r7
   87416:	430e      	orrs	r6, r1
   87418:	fa00 f407 	lsl.w	r4, r0, r7
   8741c:	0c2f      	lsrs	r7, r5, #16
   8741e:	fbb6 f0f7 	udiv	r0, r6, r7
   87422:	fa1f fe85 	uxth.w	lr, r5
   87426:	fb07 6210 	mls	r2, r7, r0, r6
   8742a:	fb0e f100 	mul.w	r1, lr, r0
   8742e:	0c26      	lsrs	r6, r4, #16
   87430:	ea46 4302 	orr.w	r3, r6, r2, lsl #16
   87434:	4299      	cmp	r1, r3
   87436:	d909      	bls.n	8744c <__udivdi3+0x5c>
   87438:	195b      	adds	r3, r3, r5
   8743a:	f100 32ff 	add.w	r2, r0, #4294967295
   8743e:	f080 80ee 	bcs.w	8761e <__udivdi3+0x22e>
   87442:	4299      	cmp	r1, r3
   87444:	f240 80eb 	bls.w	8761e <__udivdi3+0x22e>
   87448:	3802      	subs	r0, #2
   8744a:	442b      	add	r3, r5
   8744c:	1a59      	subs	r1, r3, r1
   8744e:	fbb1 f3f7 	udiv	r3, r1, r7
   87452:	fb07 1113 	mls	r1, r7, r3, r1
   87456:	fb0e fe03 	mul.w	lr, lr, r3
   8745a:	b2a4      	uxth	r4, r4
   8745c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   87460:	458e      	cmp	lr, r1
   87462:	d908      	bls.n	87476 <__udivdi3+0x86>
   87464:	1949      	adds	r1, r1, r5
   87466:	f103 32ff 	add.w	r2, r3, #4294967295
   8746a:	f080 80da 	bcs.w	87622 <__udivdi3+0x232>
   8746e:	458e      	cmp	lr, r1
   87470:	f240 80d7 	bls.w	87622 <__udivdi3+0x232>
   87474:	3b02      	subs	r3, #2
   87476:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   8747a:	2600      	movs	r6, #0
   8747c:	4631      	mov	r1, r6
   8747e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   87482:	428b      	cmp	r3, r1
   87484:	d847      	bhi.n	87516 <__udivdi3+0x126>
   87486:	fab3 f683 	clz	r6, r3
   8748a:	2e00      	cmp	r6, #0
   8748c:	d148      	bne.n	87520 <__udivdi3+0x130>
   8748e:	428b      	cmp	r3, r1
   87490:	d302      	bcc.n	87498 <__udivdi3+0xa8>
   87492:	4282      	cmp	r2, r0
   87494:	f200 80cf 	bhi.w	87636 <__udivdi3+0x246>
   87498:	2001      	movs	r0, #1
   8749a:	4631      	mov	r1, r6
   8749c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   874a0:	b912      	cbnz	r2, 874a8 <__udivdi3+0xb8>
   874a2:	2501      	movs	r5, #1
   874a4:	fbb5 f5f2 	udiv	r5, r5, r2
   874a8:	fab5 fc85 	clz	ip, r5
   874ac:	f1bc 0f00 	cmp.w	ip, #0
   874b0:	d178      	bne.n	875a4 <__udivdi3+0x1b4>
   874b2:	1b49      	subs	r1, r1, r5
   874b4:	0c2f      	lsrs	r7, r5, #16
   874b6:	fa1f fe85 	uxth.w	lr, r5
   874ba:	2601      	movs	r6, #1
   874bc:	fbb1 f0f7 	udiv	r0, r1, r7
   874c0:	fb07 1110 	mls	r1, r7, r0, r1
   874c4:	fb0e f200 	mul.w	r2, lr, r0
   874c8:	0c23      	lsrs	r3, r4, #16
   874ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   874ce:	428a      	cmp	r2, r1
   874d0:	d907      	bls.n	874e2 <__udivdi3+0xf2>
   874d2:	1949      	adds	r1, r1, r5
   874d4:	f100 33ff 	add.w	r3, r0, #4294967295
   874d8:	d202      	bcs.n	874e0 <__udivdi3+0xf0>
   874da:	428a      	cmp	r2, r1
   874dc:	f200 80bc 	bhi.w	87658 <__udivdi3+0x268>
   874e0:	4618      	mov	r0, r3
   874e2:	1a89      	subs	r1, r1, r2
   874e4:	fbb1 f3f7 	udiv	r3, r1, r7
   874e8:	fb07 1113 	mls	r1, r7, r3, r1
   874ec:	fb0e fe03 	mul.w	lr, lr, r3
   874f0:	b2a4      	uxth	r4, r4
   874f2:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   874f6:	4596      	cmp	lr, r2
   874f8:	d908      	bls.n	8750c <__udivdi3+0x11c>
   874fa:	1952      	adds	r2, r2, r5
   874fc:	f103 31ff 	add.w	r1, r3, #4294967295
   87500:	f080 8091 	bcs.w	87626 <__udivdi3+0x236>
   87504:	4596      	cmp	lr, r2
   87506:	f240 808e 	bls.w	87626 <__udivdi3+0x236>
   8750a:	3b02      	subs	r3, #2
   8750c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   87510:	4631      	mov	r1, r6
   87512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   87516:	2600      	movs	r6, #0
   87518:	4630      	mov	r0, r6
   8751a:	4631      	mov	r1, r6
   8751c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   87520:	f1c6 0420 	rsb	r4, r6, #32
   87524:	fa22 f504 	lsr.w	r5, r2, r4
   87528:	40b3      	lsls	r3, r6
   8752a:	432b      	orrs	r3, r5
   8752c:	fa21 f704 	lsr.w	r7, r1, r4
   87530:	ea4f 4813 	mov.w	r8, r3, lsr #16
   87534:	fbb7 fcf8 	udiv	ip, r7, r8
   87538:	fa1f f983 	uxth.w	r9, r3
   8753c:	fb08 771c 	mls	r7, r8, ip, r7
   87540:	fa20 fe04 	lsr.w	lr, r0, r4
   87544:	fa01 f506 	lsl.w	r5, r1, r6
   87548:	fb09 f40c 	mul.w	r4, r9, ip
   8754c:	ea4e 0505 	orr.w	r5, lr, r5
   87550:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   87554:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
   87558:	42bc      	cmp	r4, r7
   8755a:	fa02 f206 	lsl.w	r2, r2, r6
   8755e:	d904      	bls.n	8756a <__udivdi3+0x17a>
   87560:	18ff      	adds	r7, r7, r3
   87562:	f10c 31ff 	add.w	r1, ip, #4294967295
   87566:	d368      	bcc.n	8763a <__udivdi3+0x24a>
   87568:	468c      	mov	ip, r1
   8756a:	1b3f      	subs	r7, r7, r4
   8756c:	fbb7 f4f8 	udiv	r4, r7, r8
   87570:	fb08 7714 	mls	r7, r8, r4, r7
   87574:	fb09 f904 	mul.w	r9, r9, r4
   87578:	b2ad      	uxth	r5, r5
   8757a:	ea45 4107 	orr.w	r1, r5, r7, lsl #16
   8757e:	4589      	cmp	r9, r1
   87580:	d904      	bls.n	8758c <__udivdi3+0x19c>
   87582:	18c9      	adds	r1, r1, r3
   87584:	f104 35ff 	add.w	r5, r4, #4294967295
   87588:	d35d      	bcc.n	87646 <__udivdi3+0x256>
   8758a:	462c      	mov	r4, r5
   8758c:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
   87590:	fba4 2302 	umull	r2, r3, r4, r2
   87594:	ebc9 0101 	rsb	r1, r9, r1
   87598:	4299      	cmp	r1, r3
   8759a:	d349      	bcc.n	87630 <__udivdi3+0x240>
   8759c:	d045      	beq.n	8762a <__udivdi3+0x23a>
   8759e:	4620      	mov	r0, r4
   875a0:	2600      	movs	r6, #0
   875a2:	e76b      	b.n	8747c <__udivdi3+0x8c>
   875a4:	f1cc 0420 	rsb	r4, ip, #32
   875a8:	fa05 f50c 	lsl.w	r5, r5, ip
   875ac:	fa21 f304 	lsr.w	r3, r1, r4
   875b0:	0c2a      	lsrs	r2, r5, #16
   875b2:	fbb3 f6f2 	udiv	r6, r3, r2
   875b6:	fa1f fe85 	uxth.w	lr, r5
   875ba:	fb02 3816 	mls	r8, r2, r6, r3
   875be:	fa20 f704 	lsr.w	r7, r0, r4
   875c2:	fa01 f10c 	lsl.w	r1, r1, ip
   875c6:	fb0e f906 	mul.w	r9, lr, r6
   875ca:	430f      	orrs	r7, r1
   875cc:	0c3c      	lsrs	r4, r7, #16
   875ce:	ea44 4308 	orr.w	r3, r4, r8, lsl #16
   875d2:	4599      	cmp	r9, r3
   875d4:	fa00 f40c 	lsl.w	r4, r0, ip
   875d8:	d907      	bls.n	875ea <__udivdi3+0x1fa>
   875da:	195b      	adds	r3, r3, r5
   875dc:	f106 31ff 	add.w	r1, r6, #4294967295
   875e0:	d238      	bcs.n	87654 <__udivdi3+0x264>
   875e2:	4599      	cmp	r9, r3
   875e4:	d936      	bls.n	87654 <__udivdi3+0x264>
   875e6:	3e02      	subs	r6, #2
   875e8:	442b      	add	r3, r5
   875ea:	ebc9 0303 	rsb	r3, r9, r3
   875ee:	fbb3 f0f2 	udiv	r0, r3, r2
   875f2:	fb02 3310 	mls	r3, r2, r0, r3
   875f6:	fb0e f100 	mul.w	r1, lr, r0
   875fa:	b2bf      	uxth	r7, r7
   875fc:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   87600:	4299      	cmp	r1, r3
   87602:	d907      	bls.n	87614 <__udivdi3+0x224>
   87604:	195b      	adds	r3, r3, r5
   87606:	f100 37ff 	add.w	r7, r0, #4294967295
   8760a:	d221      	bcs.n	87650 <__udivdi3+0x260>
   8760c:	4299      	cmp	r1, r3
   8760e:	d91f      	bls.n	87650 <__udivdi3+0x260>
   87610:	3802      	subs	r0, #2
   87612:	442b      	add	r3, r5
   87614:	4617      	mov	r7, r2
   87616:	1a59      	subs	r1, r3, r1
   87618:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   8761c:	e74e      	b.n	874bc <__udivdi3+0xcc>
   8761e:	4610      	mov	r0, r2
   87620:	e714      	b.n	8744c <__udivdi3+0x5c>
   87622:	4613      	mov	r3, r2
   87624:	e727      	b.n	87476 <__udivdi3+0x86>
   87626:	460b      	mov	r3, r1
   87628:	e770      	b.n	8750c <__udivdi3+0x11c>
   8762a:	40b0      	lsls	r0, r6
   8762c:	4290      	cmp	r0, r2
   8762e:	d2b6      	bcs.n	8759e <__udivdi3+0x1ae>
   87630:	1e60      	subs	r0, r4, #1
   87632:	2600      	movs	r6, #0
   87634:	e722      	b.n	8747c <__udivdi3+0x8c>
   87636:	4630      	mov	r0, r6
   87638:	e720      	b.n	8747c <__udivdi3+0x8c>
   8763a:	42bc      	cmp	r4, r7
   8763c:	d994      	bls.n	87568 <__udivdi3+0x178>
   8763e:	f1ac 0c02 	sub.w	ip, ip, #2
   87642:	441f      	add	r7, r3
   87644:	e791      	b.n	8756a <__udivdi3+0x17a>
   87646:	4589      	cmp	r9, r1
   87648:	d99f      	bls.n	8758a <__udivdi3+0x19a>
   8764a:	3c02      	subs	r4, #2
   8764c:	4419      	add	r1, r3
   8764e:	e79d      	b.n	8758c <__udivdi3+0x19c>
   87650:	4638      	mov	r0, r7
   87652:	e7df      	b.n	87614 <__udivdi3+0x224>
   87654:	460e      	mov	r6, r1
   87656:	e7c8      	b.n	875ea <__udivdi3+0x1fa>
   87658:	3802      	subs	r0, #2
   8765a:	4429      	add	r1, r5
   8765c:	e741      	b.n	874e2 <__udivdi3+0xf2>
   8765e:	bf00      	nop
   87660:	636c6577 	.word	0x636c6577
   87664:	0a656d6f 	.word	0x0a656d6f
   87668:	00000000 	.word	0x00000000
   8766c:	00000001 	.word	0x00000001
   87670:	00000002 	.word	0x00000002
   87674:	00000004 	.word	0x00000004
   87678:	00000008 	.word	0x00000008
   8767c:	00000010 	.word	0x00000010
   87680:	00000020 	.word	0x00000020
   87684:	00000040 	.word	0x00000040
   87688:	00000080 	.word	0x00000080
   8768c:	00000100 	.word	0x00000100
   87690:	00000200 	.word	0x00000200
   87694:	00000400 	.word	0x00000400
   87698:	09097325 	.word	0x09097325
   8769c:	25096325 	.word	0x25096325
   876a0:	75250975 	.word	0x75250975
   876a4:	0d752509 	.word	0x0d752509
   876a8:	0000000a 	.word	0x0000000a
   876ac:	454c4449 	.word	0x454c4449
   876b0:	00000000 	.word	0x00000000
   876b4:	00000a0d 	.word	0x00000a0d
   876b8:	20726d54 	.word	0x20726d54
   876bc:	00637653 	.word	0x00637653
   876c0:	69727543 	.word	0x69727543
   876c4:	00000065 	.word	0x00000065
   876c8:	74656f4e 	.word	0x74656f4e
   876cc:	00726568 	.word	0x00726568
   876d0:	73726946 	.word	0x73726946
   876d4:	75722074 	.word	0x75722074
   876d8:	61202c6e 	.word	0x61202c6e
   876dc:	656c676e 	.word	0x656c676e
   876e0:	6425203a 	.word	0x6425203a
   876e4:	3a64202c 	.word	0x3a64202c
   876e8:	00642520 	.word	0x00642520
   876ec:	72727543 	.word	0x72727543
   876f0:	20746e65 	.word	0x20746e65
   876f4:	3a736f70 	.word	0x3a736f70
   876f8:	64252820 	.word	0x64252820
   876fc:	6425202c 	.word	0x6425202c
   87700:	00000a29 	.word	0x00000a29
   87704:	6c726145 	.word	0x6c726145
   87708:	20726569 	.word	0x20726569
   8770c:	3a736f70 	.word	0x3a736f70
   87710:	64252820 	.word	0x64252820
   87714:	6425202c 	.word	0x6425202c
   87718:	00000a29 	.word	0x00000a29
   8771c:	72726f63 	.word	0x72726f63
   87720:	69746365 	.word	0x69746365
   87724:	203a6e6f 	.word	0x203a6e6f
   87728:	202c6425 	.word	0x202c6425
   8772c:	25203a64 	.word	0x25203a64
   87730:	00000a64 	.word	0x00000a64
   87734:	656a624f 	.word	0x656a624f
   87738:	203a7463 	.word	0x203a7463
   8773c:	2c642528 	.word	0x2c642528
   87740:	29642520 	.word	0x29642520
   87744:	0000000a 	.word	0x0000000a
   87748:	736e6f43 	.word	0x736e6f43
   8774c:	20656c6f 	.word	0x20656c6f
   87750:	64616572 	.word	0x64616572
   87754:	00000a79 	.word	0x00000a79
   87758:	3d3d3d3d 	.word	0x3d3d3d3d
   8775c:	3d3d3d3d 	.word	0x3d3d3d3d
   87760:	3d3d3d3d 	.word	0x3d3d3d3d
   87764:	00000a3d 	.word	0x00000a3d
   87768:	6f746f6d 	.word	0x6f746f6d
   8776c:	61745f72 	.word	0x61745f72
   87770:	00006b73 	.word	0x00006b73
   87774:	6e69616d 	.word	0x6e69616d
   87778:	7361745f 	.word	0x7361745f
   8777c:	0000006b 	.word	0x0000006b

00087780 <atanlo>:
   87780:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
   87790:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

000877a0 <atanhi>:
   877a0:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
   877b0:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?
   877c0:	74727173 00000000 00000043              sqrt....C...

000877cc <_global_impure_ptr>:
   877cc:	200701b8                                ... 

000877d0 <zeroes.6869>:
   877d0:	30303030 30303030 30303030 30303030     0000000000000000
   877e0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   877f0:	00000000 33323130 37363534 62613938     ....0123456789ab
   87800:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00087810 <blanks.6868>:
   87810:	20202020 20202020 20202020 20202020                     

00087820 <_init>:
   87820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87822:	bf00      	nop
   87824:	bcf8      	pop	{r3, r4, r5, r6, r7}
   87826:	bc08      	pop	{r3}
   87828:	469e      	mov	lr, r3
   8782a:	4770      	bx	lr

0008782c <__init_array_start>:
   8782c:	0008582d 	.word	0x0008582d

00087830 <__frame_dummy_init_array_entry>:
   87830:	00080119                                ....

00087834 <_fini>:
   87834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87836:	bf00      	nop
   87838:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8783a:	bc08      	pop	{r3}
   8783c:	469e      	mov	lr, r3
   8783e:	4770      	bx	lr

00087840 <__fini_array_start>:
   87840:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4a14      	ldr	r2, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b13      	ldr	r3, [r2, #48]	; 0x30
20070048:	f023 0303 	bic.w	r3, r3, #3
2007004c:	f043 0301 	orr.w	r3, r3, #1
20070050:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070054:	f013 0f08 	tst.w	r3, #8
20070058:	d0fb      	beq.n	20070052 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005a:	4a12      	ldr	r2, [pc, #72]	; (200700a4 <SystemInit+0x98>)
2007005c:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
2007005e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070060:	461a      	mov	r2, r3
20070062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070064:	f013 0f02 	tst.w	r3, #2
20070068:	d0fb      	beq.n	20070062 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006a:	2211      	movs	r2, #17
2007006c:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
2007006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070070:	461a      	mov	r2, r3
20070072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070074:	f013 0f08 	tst.w	r3, #8
20070078:	d0fb      	beq.n	20070072 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007a:	2212      	movs	r2, #18
2007007c:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	461a      	mov	r2, r3
20070082:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070084:	f013 0f08 	tst.w	r3, #8
20070088:	d0fb      	beq.n	20070082 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008a:	4a07      	ldr	r2, [pc, #28]	; (200700a8 <SystemInit+0x9c>)
2007008c:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
2007008e:	601a      	str	r2, [r3, #0]
20070090:	4770      	bx	lr
20070092:	bf00      	nop
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	200701b0 	.word	0x200701b0

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <packet_pos>:
	...
20070140:	20070a44 0000000a 00000008              D.. ........

2007014c <uxCriticalNesting>:
2007014c:	aaaaaaaa                                ....

20070150 <xFreeBytesRemaining>:
20070150:	0000a000                                ....

20070154 <xNextTaskUnblockTime>:
20070154:	ffffffff                                ....

20070158 <k>:
20070158:	00000002                                ....

2007015c <mock_positions>:
2007015c:	00640032 00320078 0096008c 01040118     2.d.x.2.........

2007016c <pin_table>:
2007016c:	5c390908 5758591d 675d5556 00003b68     ..9\.YXWVU]gh;..
2007017c:	00000000 0e3a0000 6261600f 07696663     ......:..`abcfi.
2007018c:	4342416a 47464544 14134948 50515253     jABCDEFGHI..SRQP
2007019c:	4c4d4e4f 18102e35 04061617 32310203     ONML5.........12
200701ac:	00013433                                         34

200701ae <g_interrupt_enabled>:
200701ae:	09000001                                         ..

200701b0 <SystemCoreClock>:
200701b0:	003d0900                                ..=.

200701b4 <__fdlib_version>:
200701b4:	00000001                                ....

200701b8 <impure_data>:
200701b8:	00000000 200704a4 2007050c 20070574     ....... ... t.. 
	...
200701ec:	000877c8 00000000 00000000 00000000     .w..............
	...
20070260:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070270:	0005deec 0000000b 00000000 00000000     ................
	...

200705e0 <_impure_ptr>:
200705e0:	200701b8                                ... 

200705e4 <lc_ctype_charset>:
200705e4:	49435341 00000049 00000000 00000000     ASCII...........
	...

20070604 <__mb_cur_max>:
20070604:	00000001                                ....

20070608 <__malloc_av_>:
	...
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 
200709a0:	20070998 20070998 200709a0 200709a0     ... ... ... ... 
200709b0:	200709a8 200709a8 200709b0 200709b0     ... ... ... ... 
200709c0:	200709b8 200709b8 200709c0 200709c0     ... ... ... ... 
200709d0:	200709c8 200709c8 200709d0 200709d0     ... ... ... ... 
200709e0:	200709d8 200709d8 200709e0 200709e0     ... ... ... ... 
200709f0:	200709e8 200709e8 200709f0 200709f0     ... ... ... ... 
20070a00:	200709f8 200709f8 20070a00 20070a00     ... ... ... ... 

20070a10 <__malloc_trim_threshold>:
20070a10:	00020000                                ....

20070a14 <__malloc_sbrk_base>:
20070a14:	ffffffff                                ....

20070a18 <__wctomb>:
20070a18:	00086e85                                .n..
