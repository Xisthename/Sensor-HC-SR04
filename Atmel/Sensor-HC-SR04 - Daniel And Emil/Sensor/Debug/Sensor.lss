
Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004094  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00084094  00084094  0000c094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009dc  20070000  0008409c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000017c  200709dc  00084a78  000109dc  2**2
                  ALLOC
  4 .stack        00002000  20070b58  00084bf4  000109dc  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109dc  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010a05  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000fcc3  00000000  00000000  00010a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002bbf  00000000  00000000  00020723  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004b79  00000000  00000000  000232e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b10  00000000  00000000  00027e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009c8  00000000  00000000  0002896b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00019ab5  00000000  00000000  00029333  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00011843  00000000  00000000  00042de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006357a  00000000  00000000  0005462b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002418  00000000  00000000  000b7ba8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b58 	.word	0x20072b58
   80004:	00080dd5 	.word	0x00080dd5
   80008:	00080dd1 	.word	0x00080dd1
   8000c:	00080dd1 	.word	0x00080dd1
   80010:	00080dd1 	.word	0x00080dd1
   80014:	00080dd1 	.word	0x00080dd1
   80018:	00080dd1 	.word	0x00080dd1
	...
   8002c:	00080dd1 	.word	0x00080dd1
   80030:	00080dd1 	.word	0x00080dd1
   80034:	00000000 	.word	0x00000000
   80038:	00080dd1 	.word	0x00080dd1
   8003c:	00080dd1 	.word	0x00080dd1
   80040:	00080dd1 	.word	0x00080dd1
   80044:	00080dd1 	.word	0x00080dd1
   80048:	00080dd1 	.word	0x00080dd1
   8004c:	00080dd1 	.word	0x00080dd1
   80050:	00080dd1 	.word	0x00080dd1
   80054:	00080dd1 	.word	0x00080dd1
   80058:	00080dd1 	.word	0x00080dd1
   8005c:	00080dd1 	.word	0x00080dd1
   80060:	00080dd1 	.word	0x00080dd1
   80064:	00080dd1 	.word	0x00080dd1
   80068:	00000000 	.word	0x00000000
   8006c:	00080c41 	.word	0x00080c41
   80070:	00080c55 	.word	0x00080c55
   80074:	00080c69 	.word	0x00080c69
   80078:	00080c7d 	.word	0x00080c7d
	...
   80084:	000801b9 	.word	0x000801b9
   80088:	00080dd1 	.word	0x00080dd1
   8008c:	00080dd1 	.word	0x00080dd1
   80090:	00080dd1 	.word	0x00080dd1
   80094:	00080dd1 	.word	0x00080dd1
   80098:	00080dd1 	.word	0x00080dd1
   8009c:	00080dd1 	.word	0x00080dd1
   800a0:	00080dd1 	.word	0x00080dd1
   800a4:	00000000 	.word	0x00000000
   800a8:	00080dd1 	.word	0x00080dd1
   800ac:	000804e1 	.word	0x000804e1
   800b0:	00080dd1 	.word	0x00080dd1
   800b4:	00080dd1 	.word	0x00080dd1
   800b8:	00080dd1 	.word	0x00080dd1
   800bc:	00080dd1 	.word	0x00080dd1
   800c0:	00080dd1 	.word	0x00080dd1
   800c4:	00080dd1 	.word	0x00080dd1
   800c8:	00080dd1 	.word	0x00080dd1
   800cc:	00080dd1 	.word	0x00080dd1
   800d0:	00080dd1 	.word	0x00080dd1
   800d4:	00080dd1 	.word	0x00080dd1
   800d8:	00080dd1 	.word	0x00080dd1
   800dc:	00080dd1 	.word	0x00080dd1
   800e0:	00080dd1 	.word	0x00080dd1
   800e4:	00080dd1 	.word	0x00080dd1
   800e8:	00080dd1 	.word	0x00080dd1
   800ec:	00080dd1 	.word	0x00080dd1
   800f0:	00080dd1 	.word	0x00080dd1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709dc 	.word	0x200709dc
   80110:	00000000 	.word	0x00000000
   80114:	0008409c 	.word	0x0008409c

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	0008409c 	.word	0x0008409c
   80144:	200709e0 	.word	0x200709e0
   80148:	0008409c 	.word	0x0008409c
   8014c:	00000000 	.word	0x00000000

00080150 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
   80150:	b9a8      	cbnz	r0, 8017e <_read+0x2e>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80156:	460c      	mov	r4, r1
   80158:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8015a:	2a00      	cmp	r2, #0
   8015c:	dd0a      	ble.n	80174 <_read+0x24>
   8015e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80160:	4e08      	ldr	r6, [pc, #32]	; (80184 <_read+0x34>)
   80162:	4d09      	ldr	r5, [pc, #36]	; (80188 <_read+0x38>)
   80164:	6830      	ldr	r0, [r6, #0]
   80166:	4621      	mov	r1, r4
   80168:	682b      	ldr	r3, [r5, #0]
   8016a:	4798      	blx	r3
		ptr++;
   8016c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8016e:	42bc      	cmp	r4, r7
   80170:	d1f8      	bne.n	80164 <_read+0x14>
   80172:	e001      	b.n	80178 <_read+0x28>
   80174:	f04f 0800 	mov.w	r8, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   80178:	4640      	mov	r0, r8
   8017a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8017e:	f04f 30ff 	mov.w	r0, #4294967295
   80182:	4770      	bx	lr
   80184:	20070b50 	.word	0x20070b50
   80188:	20070b48 	.word	0x20070b48

0008018c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8018c:	6943      	ldr	r3, [r0, #20]
   8018e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80192:	bf1d      	ittte	ne
   80194:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80198:	61c1      	strne	r1, [r0, #28]
	return 0;
   8019a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8019c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8019e:	4770      	bx	lr

000801a0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   801a0:	6943      	ldr	r3, [r0, #20]
   801a2:	f013 0f01 	tst.w	r3, #1
   801a6:	d005      	beq.n	801b4 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   801a8:	6983      	ldr	r3, [r0, #24]
   801aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
   801ae:	600b      	str	r3, [r1, #0]

	return 0;
   801b0:	2000      	movs	r0, #0
   801b2:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   801b4:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   801b6:	4770      	bx	lr

000801b8 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   801b8:	b500      	push	{lr}
   801ba:	b083      	sub	sp, #12
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
   801bc:	4811      	ldr	r0, [pc, #68]	; (80204 <USART0_Handler+0x4c>)
   801be:	f10d 0107 	add.w	r1, sp, #7
   801c2:	2201      	movs	r2, #1
   801c4:	4b10      	ldr	r3, [pc, #64]	; (80208 <USART0_Handler+0x50>)
   801c6:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   801c8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   801ca:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   801ce:	2200      	movs	r2, #0
   801d0:	4b0e      	ldr	r3, [pc, #56]	; (8020c <USART0_Handler+0x54>)
   801d2:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   801d4:	4b0e      	ldr	r3, [pc, #56]	; (80210 <USART0_Handler+0x58>)
   801d6:	781b      	ldrb	r3, [r3, #0]
   801d8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   801dc:	4a0d      	ldr	r2, [pc, #52]	; (80214 <USART0_Handler+0x5c>)
   801de:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   801e0:	2b9b      	cmp	r3, #155	; 0x9b
   801e2:	d103      	bne.n	801ec <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   801e4:	2200      	movs	r2, #0
   801e6:	4b0a      	ldr	r3, [pc, #40]	; (80210 <USART0_Handler+0x58>)
   801e8:	701a      	strb	r2, [r3, #0]
   801ea:	e002      	b.n	801f2 <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   801ec:	3301      	adds	r3, #1
   801ee:	4a08      	ldr	r2, [pc, #32]	; (80210 <USART0_Handler+0x58>)
   801f0:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   801f2:	2201      	movs	r2, #1
   801f4:	4b05      	ldr	r3, [pc, #20]	; (8020c <USART0_Handler+0x54>)
   801f6:	701a      	strb	r2, [r3, #0]
   801f8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   801fc:	b662      	cpsie	i
}
   801fe:	b003      	add	sp, #12
   80200:	f85d fb04 	ldr.w	pc, [sp], #4
   80204:	40098000 	.word	0x40098000
   80208:	000806c9 	.word	0x000806c9
   8020c:	2007016e 	.word	0x2007016e
   80210:	20070a94 	.word	0x20070a94
   80214:	200709f8 	.word	0x200709f8

00080218 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80218:	b5f0      	push	{r4, r5, r6, r7, lr}
   8021a:	b083      	sub	sp, #12
   8021c:	4604      	mov	r4, r0
   8021e:	460d      	mov	r5, r1
	uint32_t val = 0;
   80220:	2300      	movs	r3, #0
   80222:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80224:	4b1f      	ldr	r3, [pc, #124]	; (802a4 <usart_serial_getchar+0x8c>)
   80226:	4298      	cmp	r0, r3
   80228:	d107      	bne.n	8023a <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   8022a:	461f      	mov	r7, r3
   8022c:	4e1e      	ldr	r6, [pc, #120]	; (802a8 <usart_serial_getchar+0x90>)
   8022e:	4638      	mov	r0, r7
   80230:	4629      	mov	r1, r5
   80232:	47b0      	blx	r6
   80234:	2800      	cmp	r0, #0
   80236:	d1fa      	bne.n	8022e <usart_serial_getchar+0x16>
   80238:	e019      	b.n	8026e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8023a:	4b1c      	ldr	r3, [pc, #112]	; (802ac <usart_serial_getchar+0x94>)
   8023c:	4298      	cmp	r0, r3
   8023e:	d109      	bne.n	80254 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80240:	461f      	mov	r7, r3
   80242:	4e1b      	ldr	r6, [pc, #108]	; (802b0 <usart_serial_getchar+0x98>)
   80244:	4638      	mov	r0, r7
   80246:	a901      	add	r1, sp, #4
   80248:	47b0      	blx	r6
   8024a:	2800      	cmp	r0, #0
   8024c:	d1fa      	bne.n	80244 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   8024e:	9b01      	ldr	r3, [sp, #4]
   80250:	702b      	strb	r3, [r5, #0]
   80252:	e019      	b.n	80288 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80254:	4b17      	ldr	r3, [pc, #92]	; (802b4 <usart_serial_getchar+0x9c>)
   80256:	4298      	cmp	r0, r3
   80258:	d109      	bne.n	8026e <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   8025a:	461e      	mov	r6, r3
   8025c:	4c14      	ldr	r4, [pc, #80]	; (802b0 <usart_serial_getchar+0x98>)
   8025e:	4630      	mov	r0, r6
   80260:	a901      	add	r1, sp, #4
   80262:	47a0      	blx	r4
   80264:	2800      	cmp	r0, #0
   80266:	d1fa      	bne.n	8025e <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80268:	9b01      	ldr	r3, [sp, #4]
   8026a:	702b      	strb	r3, [r5, #0]
   8026c:	e018      	b.n	802a0 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8026e:	4b12      	ldr	r3, [pc, #72]	; (802b8 <usart_serial_getchar+0xa0>)
   80270:	429c      	cmp	r4, r3
   80272:	d109      	bne.n	80288 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80274:	461e      	mov	r6, r3
   80276:	4c0e      	ldr	r4, [pc, #56]	; (802b0 <usart_serial_getchar+0x98>)
   80278:	4630      	mov	r0, r6
   8027a:	a901      	add	r1, sp, #4
   8027c:	47a0      	blx	r4
   8027e:	2800      	cmp	r0, #0
   80280:	d1fa      	bne.n	80278 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80282:	9b01      	ldr	r3, [sp, #4]
   80284:	702b      	strb	r3, [r5, #0]
   80286:	e00b      	b.n	802a0 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80288:	4b0c      	ldr	r3, [pc, #48]	; (802bc <usart_serial_getchar+0xa4>)
   8028a:	429c      	cmp	r4, r3
   8028c:	d108      	bne.n	802a0 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   8028e:	461e      	mov	r6, r3
   80290:	4c07      	ldr	r4, [pc, #28]	; (802b0 <usart_serial_getchar+0x98>)
   80292:	4630      	mov	r0, r6
   80294:	a901      	add	r1, sp, #4
   80296:	47a0      	blx	r4
   80298:	2800      	cmp	r0, #0
   8029a:	d1fa      	bne.n	80292 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   8029c:	9b01      	ldr	r3, [sp, #4]
   8029e:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   802a0:	b003      	add	sp, #12
   802a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   802a4:	400e0800 	.word	0x400e0800
   802a8:	00080829 	.word	0x00080829
   802ac:	40098000 	.word	0x40098000
   802b0:	000801a1 	.word	0x000801a1
   802b4:	4009c000 	.word	0x4009c000
   802b8:	400a0000 	.word	0x400a0000
   802bc:	400a4000 	.word	0x400a4000

000802c0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   802c0:	b570      	push	{r4, r5, r6, lr}
   802c2:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   802c4:	4b1e      	ldr	r3, [pc, #120]	; (80340 <usart_serial_putchar+0x80>)
   802c6:	4298      	cmp	r0, r3
   802c8:	d108      	bne.n	802dc <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
   802ca:	461e      	mov	r6, r3
   802cc:	4d1d      	ldr	r5, [pc, #116]	; (80344 <usart_serial_putchar+0x84>)
   802ce:	4630      	mov	r0, r6
   802d0:	4621      	mov	r1, r4
   802d2:	47a8      	blx	r5
   802d4:	2800      	cmp	r0, #0
   802d6:	d1fa      	bne.n	802ce <usart_serial_putchar+0xe>
		return 1;
   802d8:	2001      	movs	r0, #1
   802da:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   802dc:	4b1a      	ldr	r3, [pc, #104]	; (80348 <usart_serial_putchar+0x88>)
   802de:	4298      	cmp	r0, r3
   802e0:	d108      	bne.n	802f4 <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
   802e2:	461e      	mov	r6, r3
   802e4:	4d19      	ldr	r5, [pc, #100]	; (8034c <usart_serial_putchar+0x8c>)
   802e6:	4630      	mov	r0, r6
   802e8:	4621      	mov	r1, r4
   802ea:	47a8      	blx	r5
   802ec:	2800      	cmp	r0, #0
   802ee:	d1fa      	bne.n	802e6 <usart_serial_putchar+0x26>
		return 1;
   802f0:	2001      	movs	r0, #1
   802f2:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   802f4:	4b16      	ldr	r3, [pc, #88]	; (80350 <usart_serial_putchar+0x90>)
   802f6:	4298      	cmp	r0, r3
   802f8:	d108      	bne.n	8030c <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
   802fa:	461e      	mov	r6, r3
   802fc:	4d13      	ldr	r5, [pc, #76]	; (8034c <usart_serial_putchar+0x8c>)
   802fe:	4630      	mov	r0, r6
   80300:	4621      	mov	r1, r4
   80302:	47a8      	blx	r5
   80304:	2800      	cmp	r0, #0
   80306:	d1fa      	bne.n	802fe <usart_serial_putchar+0x3e>
		return 1;
   80308:	2001      	movs	r0, #1
   8030a:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8030c:	4b11      	ldr	r3, [pc, #68]	; (80354 <usart_serial_putchar+0x94>)
   8030e:	4298      	cmp	r0, r3
   80310:	d108      	bne.n	80324 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
   80312:	461e      	mov	r6, r3
   80314:	4d0d      	ldr	r5, [pc, #52]	; (8034c <usart_serial_putchar+0x8c>)
   80316:	4630      	mov	r0, r6
   80318:	4621      	mov	r1, r4
   8031a:	47a8      	blx	r5
   8031c:	2800      	cmp	r0, #0
   8031e:	d1fa      	bne.n	80316 <usart_serial_putchar+0x56>
		return 1;
   80320:	2001      	movs	r0, #1
   80322:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80324:	4b0c      	ldr	r3, [pc, #48]	; (80358 <usart_serial_putchar+0x98>)
   80326:	4298      	cmp	r0, r3
   80328:	d108      	bne.n	8033c <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
   8032a:	461e      	mov	r6, r3
   8032c:	4d07      	ldr	r5, [pc, #28]	; (8034c <usart_serial_putchar+0x8c>)
   8032e:	4630      	mov	r0, r6
   80330:	4621      	mov	r1, r4
   80332:	47a8      	blx	r5
   80334:	2800      	cmp	r0, #0
   80336:	d1fa      	bne.n	8032e <usart_serial_putchar+0x6e>
		return 1;
   80338:	2001      	movs	r0, #1
   8033a:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   8033c:	2000      	movs	r0, #0
}
   8033e:	bd70      	pop	{r4, r5, r6, pc}
   80340:	400e0800 	.word	0x400e0800
   80344:	00080819 	.word	0x00080819
   80348:	40098000 	.word	0x40098000
   8034c:	0008018d 	.word	0x0008018d
   80350:	4009c000 	.word	0x4009c000
   80354:	400a0000 	.word	0x400a0000
   80358:	400a4000 	.word	0x400a4000

0008035c <console_init>:
#include "console_driver.h"

void console_init(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
/* Note that  the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h */
{
   8035c:	b530      	push	{r4, r5, lr}
   8035e:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80360:	2008      	movs	r0, #8
   80362:	4d15      	ldr	r5, [pc, #84]	; (803b8 <console_init+0x5c>)
   80364:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80366:	4c15      	ldr	r4, [pc, #84]	; (803bc <console_init+0x60>)
   80368:	4b15      	ldr	r3, [pc, #84]	; (803c0 <console_init+0x64>)
   8036a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   8036c:	4a15      	ldr	r2, [pc, #84]	; (803c4 <console_init+0x68>)
   8036e:	4b16      	ldr	r3, [pc, #88]	; (803c8 <console_init+0x6c>)
   80370:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80372:	4a16      	ldr	r2, [pc, #88]	; (803cc <console_init+0x70>)
   80374:	4b16      	ldr	r3, [pc, #88]	; (803d0 <console_init+0x74>)
   80376:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80378:	4b16      	ldr	r3, [pc, #88]	; (803d4 <console_init+0x78>)
   8037a:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   8037c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80380:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80382:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80386:	9303      	str	r3, [sp, #12]
   80388:	2008      	movs	r0, #8
   8038a:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   8038c:	4620      	mov	r0, r4
   8038e:	a901      	add	r1, sp, #4
   80390:	4b11      	ldr	r3, [pc, #68]	; (803d8 <console_init+0x7c>)
   80392:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80394:	4d11      	ldr	r5, [pc, #68]	; (803dc <console_init+0x80>)
   80396:	682b      	ldr	r3, [r5, #0]
   80398:	6898      	ldr	r0, [r3, #8]
   8039a:	2100      	movs	r1, #0
   8039c:	4c10      	ldr	r4, [pc, #64]	; (803e0 <console_init+0x84>)
   8039e:	47a0      	blx	r4
	setbuf(stdin, NULL);
   803a0:	682b      	ldr	r3, [r5, #0]
   803a2:	6858      	ldr	r0, [r3, #4]
   803a4:	2100      	movs	r1, #0
   803a6:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   803a8:	480e      	ldr	r0, [pc, #56]	; (803e4 <console_init+0x88>)
   803aa:	4c0f      	ldr	r4, [pc, #60]	; (803e8 <console_init+0x8c>)
   803ac:	47a0      	blx	r4
	printf("=============\n");
   803ae:	480f      	ldr	r0, [pc, #60]	; (803ec <console_init+0x90>)
   803b0:	47a0      	blx	r4
}
   803b2:	b005      	add	sp, #20
   803b4:	bd30      	pop	{r4, r5, pc}
   803b6:	bf00      	nop
   803b8:	00080d7d 	.word	0x00080d7d
   803bc:	400e0800 	.word	0x400e0800
   803c0:	20070b50 	.word	0x20070b50
   803c4:	000802c1 	.word	0x000802c1
   803c8:	20070b4c 	.word	0x20070b4c
   803cc:	00080219 	.word	0x00080219
   803d0:	20070b48 	.word	0x20070b48
   803d4:	0501bd00 	.word	0x0501bd00
   803d8:	000807e1 	.word	0x000807e1
   803dc:	200705a0 	.word	0x200705a0
   803e0:	000811a1 	.word	0x000811a1
   803e4:	00083fec 	.word	0x00083fec
   803e8:	000810dd 	.word	0x000810dd
   803ec:	00083ffc 	.word	0x00083ffc

000803f0 <delay_init>:

#include "asf.h"
#include "delay.h"
#include "pin_mapper.h"

int delay_init(void) {
   803f0:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC1);	/* power on the peripheral clock for timers */
   803f2:	201c      	movs	r0, #28
   803f4:	4b08      	ldr	r3, [pc, #32]	; (80418 <delay_init+0x28>)
   803f6:	4798      	blx	r3
	tc_init(TC0, 1, 0);				/* Enable timer block 0, channel 1, TCLK1 och capturemode */
   803f8:	4c08      	ldr	r4, [pc, #32]	; (8041c <delay_init+0x2c>)
   803fa:	4620      	mov	r0, r4
   803fc:	2101      	movs	r1, #1
   803fe:	2200      	movs	r2, #0
   80400:	4b07      	ldr	r3, [pc, #28]	; (80420 <delay_init+0x30>)
   80402:	4798      	blx	r3
	tc_set_block_mode(TC0, 1);
   80404:	4620      	mov	r0, r4
   80406:	2101      	movs	r1, #1
   80408:	4b06      	ldr	r3, [pc, #24]	; (80424 <delay_init+0x34>)
   8040a:	4798      	blx	r3
	tc_stop(TC0, 1);					/* making sure the timer does not run  */
   8040c:	4620      	mov	r0, r4
   8040e:	2101      	movs	r1, #1
   80410:	4b05      	ldr	r3, [pc, #20]	; (80428 <delay_init+0x38>)
   80412:	4798      	blx	r3
	return 0;						/* evertyhing is ok, typical response */
}
   80414:	2000      	movs	r0, #0
   80416:	bd10      	pop	{r4, pc}
   80418:	00080d7d 	.word	0x00080d7d
   8041c:	40080000 	.word	0x40080000
   80420:	0008078d 	.word	0x0008078d
   80424:	000807a9 	.word	0x000807a9
   80428:	000807b9 	.word	0x000807b9

0008042c <delay_us>:

/* Beware that function is not thread safe, must only be called within one instance */
void delay_us(uint32_t us){
   8042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8042e:	4604      	mov	r4, r0
	tc_start(TC0, 1);
   80430:	4809      	ldr	r0, [pc, #36]	; (80458 <delay_us+0x2c>)
   80432:	2101      	movs	r1, #1
   80434:	4b09      	ldr	r3, [pc, #36]	; (8045c <delay_us+0x30>)
   80436:	4798      	blx	r3
	while (tc_read_cv(TC0, 1) < us * 42);
   80438:	232a      	movs	r3, #42	; 0x2a
   8043a:	fb03 f404 	mul.w	r4, r3, r4
   8043e:	4f06      	ldr	r7, [pc, #24]	; (80458 <delay_us+0x2c>)
   80440:	2601      	movs	r6, #1
   80442:	4d07      	ldr	r5, [pc, #28]	; (80460 <delay_us+0x34>)
   80444:	4638      	mov	r0, r7
   80446:	4631      	mov	r1, r6
   80448:	47a8      	blx	r5
   8044a:	42a0      	cmp	r0, r4
   8044c:	d3fa      	bcc.n	80444 <delay_us+0x18>
	tc_stop(TC0, 1);
   8044e:	4802      	ldr	r0, [pc, #8]	; (80458 <delay_us+0x2c>)
   80450:	2101      	movs	r1, #1
   80452:	4b04      	ldr	r3, [pc, #16]	; (80464 <delay_us+0x38>)
   80454:	4798      	blx	r3
   80456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80458:	40080000 	.word	0x40080000
   8045c:	000807b1 	.word	0x000807b1
   80460:	000807c1 	.word	0x000807c1
   80464:	000807b9 	.word	0x000807b9

00080468 <edge_detection>:
	ioport_set_pin_level(pin_mapper(TRIG_PIN_DUE), 0); // pin_mapper(TRIG_PIN_DUE)
	
	ioport_set_pin_level(pin_mapper(13), 0);
}

void edge_detection(void) {
   80468:	b510      	push	{r4, lr}
	uint32_t pulse_width_us;

	/* Was it rising edge? start the timer */
	if (pio_get(PIOC, PIO_TYPE_PIO_INPUT, ECHO_PIN_Middle)) {
   8046a:	4811      	ldr	r0, [pc, #68]	; (804b0 <edge_detection+0x48>)
   8046c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80470:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80474:	4b0f      	ldr	r3, [pc, #60]	; (804b4 <edge_detection+0x4c>)
   80476:	4798      	blx	r3
   80478:	b120      	cbz	r0, 80484 <edge_detection+0x1c>
		/* Start TC to measure pulse width */
		tc_start(TC0, 2);
   8047a:	480f      	ldr	r0, [pc, #60]	; (804b8 <edge_detection+0x50>)
   8047c:	2102      	movs	r1, #2
   8047e:	4b0f      	ldr	r3, [pc, #60]	; (804bc <edge_detection+0x54>)
   80480:	4798      	blx	r3
   80482:	bd10      	pop	{r4, pc}
	}
	/* Falling edge, stop timer */
	else {
		pulse_width_us = tc_read_cv(TC0, 2) / 42;
   80484:	4c0c      	ldr	r4, [pc, #48]	; (804b8 <edge_detection+0x50>)
   80486:	4620      	mov	r0, r4
   80488:	2102      	movs	r1, #2
   8048a:	4b0d      	ldr	r3, [pc, #52]	; (804c0 <edge_detection+0x58>)
   8048c:	4798      	blx	r3
   8048e:	0840      	lsrs	r0, r0, #1
   80490:	4b0c      	ldr	r3, [pc, #48]	; (804c4 <edge_detection+0x5c>)
   80492:	fba3 2300 	umull	r2, r3, r3, r0
   80496:	0898      	lsrs	r0, r3, #2
		/* Pulse width proportionate against pulse width / 58, see HC-SR04 datasheet */
		last_sample = pulse_width_us / 58;
   80498:	4b0b      	ldr	r3, [pc, #44]	; (804c8 <edge_detection+0x60>)
   8049a:	fba3 2300 	umull	r2, r3, r3, r0
   8049e:	095b      	lsrs	r3, r3, #5
   804a0:	4a0a      	ldr	r2, [pc, #40]	; (804cc <edge_detection+0x64>)
   804a2:	6013      	str	r3, [r2, #0]
		tc_stop(TC0, 2);
   804a4:	4620      	mov	r0, r4
   804a6:	2102      	movs	r1, #2
   804a8:	4b09      	ldr	r3, [pc, #36]	; (804d0 <edge_detection+0x68>)
   804aa:	4798      	blx	r3
   804ac:	bd10      	pop	{r4, pc}
   804ae:	bf00      	nop
   804b0:	400e1200 	.word	0x400e1200
   804b4:	00080921 	.word	0x00080921
   804b8:	40080000 	.word	0x40080000
   804bc:	000807b1 	.word	0x000807b1
   804c0:	000807c1 	.word	0x000807c1
   804c4:	30c30c31 	.word	0x30c30c31
   804c8:	8d3dcb09 	.word	0x8d3dcb09
   804cc:	20070a98 	.word	0x20070a98
   804d0:	000807b9 	.word	0x000807b9

000804d4 <hcsr04_get_distance>:
#define ECHO_PIN_Middle PIO_PC26 // pin 4

static volatile int last_sample = 0;

int hcsr04_get_distance(void) {
	return last_sample;
   804d4:	4b01      	ldr	r3, [pc, #4]	; (804dc <hcsr04_get_distance+0x8>)
   804d6:	6818      	ldr	r0, [r3, #0]
}
   804d8:	4770      	bx	lr
   804da:	bf00      	nop
   804dc:	20070a98 	.word	0x20070a98

000804e0 <TC0_Handler>:

void TC0_Handler(void)
{
   804e0:	b530      	push	{r4, r5, lr}
   804e2:	b083      	sub	sp, #12
	ioport_set_pin_level(pin_mapper(13), 1);
   804e4:	200d      	movs	r0, #13
   804e6:	4d1f      	ldr	r5, [pc, #124]	; (80564 <TC0_Handler+0x84>)
   804e8:	47a8      	blx	r5
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   804ea:	0943      	lsrs	r3, r0, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   804ec:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   804f0:	f203 7307 	addw	r3, r3, #1799	; 0x707
   804f4:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   804f6:	f000 001f 	and.w	r0, r0, #31
   804fa:	2401      	movs	r4, #1
   804fc:	fa04 f200 	lsl.w	r2, r4, r0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80500:	631a      	str	r2, [r3, #48]	; 0x30
	volatile uint32_t ul_dummy;

	/* Clear status bit to acknowledge interrupt */
	ul_dummy = tc_get_status(TC0, 0);		//The compare bit is cleared by reading the register, manual p. 915
   80502:	4819      	ldr	r0, [pc, #100]	; (80568 <TC0_Handler+0x88>)
   80504:	2100      	movs	r1, #0
   80506:	4b19      	ldr	r3, [pc, #100]	; (8056c <TC0_Handler+0x8c>)
   80508:	4798      	blx	r3
   8050a:	9001      	str	r0, [sp, #4]
	/* Avoid compiler warning */
	UNUSED(ul_dummy);
   8050c:	9b01      	ldr	r3, [sp, #4]
	
	/* Send TRIG pulse for starting sample */
	ioport_set_pin_level(pin_mapper(TRIG_PIN_DUE), 1); // pin_mapper(TRIG_PIN_DUE)
   8050e:	2003      	movs	r0, #3
   80510:	47a8      	blx	r5
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   80512:	0943      	lsrs	r3, r0, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80514:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80518:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8051c:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   8051e:	f000 001f 	and.w	r0, r0, #31
   80522:	fa04 f200 	lsl.w	r2, r4, r0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80526:	631a      	str	r2, [r3, #48]	; 0x30
	delay_us(9); /* Pulse specified to be 10 us wide and */
   80528:	2009      	movs	r0, #9
   8052a:	4b11      	ldr	r3, [pc, #68]	; (80570 <TC0_Handler+0x90>)
   8052c:	4798      	blx	r3
	ioport_set_pin_level(pin_mapper(TRIG_PIN_DUE), 0); // pin_mapper(TRIG_PIN_DUE)
   8052e:	2003      	movs	r0, #3
   80530:	47a8      	blx	r5
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   80532:	0943      	lsrs	r3, r0, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80534:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80538:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8053c:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   8053e:	f000 001f 	and.w	r0, r0, #31
   80542:	fa04 f200 	lsl.w	r2, r4, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80546:	635a      	str	r2, [r3, #52]	; 0x34
	
	ioport_set_pin_level(pin_mapper(13), 0);
   80548:	200d      	movs	r0, #13
   8054a:	47a8      	blx	r5
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   8054c:	0943      	lsrs	r3, r0, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8054e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80552:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80556:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   80558:	f000 001f 	and.w	r0, r0, #31
   8055c:	4084      	lsls	r4, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8055e:	635c      	str	r4, [r3, #52]	; 0x34
}
   80560:	b003      	add	sp, #12
   80562:	bd30      	pop	{r4, r5, pc}
   80564:	0008066d 	.word	0x0008066d
   80568:	40080000 	.word	0x40080000
   8056c:	000807d9 	.word	0x000807d9
   80570:	0008042d 	.word	0x0008042d

00080574 <set_pins>:
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   80574:	4b06      	ldr	r3, [pc, #24]	; (80590 <set_pins+0x1c>)
   80576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8057a:	601a      	str	r2, [r3, #0]
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8057c:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8057e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   80582:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80586:	601a      	str	r2, [r3, #0]
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80588:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8058a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   8058e:	4770      	bx	lr
   80590:	400e1200 	.word	0x400e1200

00080594 <hcsr04_init>:
	ioport_enable_pin(PIO_PC26_IDX);
	ioport_set_pin_dir(PIO_PC26_IDX, IOPORT_DIR_INPUT);
}


void hcsr04_init(void) {
   80594:	b5f0      	push	{r4, r5, r6, r7, lr}
   80596:	b083      	sub	sp, #12
	/* Set pins to inputs/outputs */
	set_pins();
   80598:	4b25      	ldr	r3, [pc, #148]	; (80630 <hcsr04_init+0x9c>)
   8059a:	4798      	blx	r3
*/

static void timer_sample_init(void)
{
	/* Configure PMC */
	pmc_enable_periph_clk(ID_TC0);
   8059c:	201b      	movs	r0, #27
   8059e:	4d25      	ldr	r5, [pc, #148]	; (80634 <hcsr04_init+0xa0>)
   805a0:	47a8      	blx	r5

	tc_init(TC0, 0, 0 | TC_CMR_CPCTRG);			//Timer_clock_1 - MCK/2 - 42 MHz
   805a2:	4c25      	ldr	r4, [pc, #148]	; (80638 <hcsr04_init+0xa4>)
   805a4:	4620      	mov	r0, r4
   805a6:	2100      	movs	r1, #0
   805a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   805ac:	4f23      	ldr	r7, [pc, #140]	; (8063c <hcsr04_init+0xa8>)
   805ae:	47b8      	blx	r7
	tc_write_rc(TC0, 0, 4200000);				//4 200 000 corresponds to fs = 10 Hz
   805b0:	4620      	mov	r0, r4
   805b2:	2100      	movs	r1, #0
   805b4:	4a22      	ldr	r2, [pc, #136]	; (80640 <hcsr04_init+0xac>)
   805b6:	4b23      	ldr	r3, [pc, #140]	; (80644 <hcsr04_init+0xb0>)
   805b8:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   805ba:	4e23      	ldr	r6, [pc, #140]	; (80648 <hcsr04_init+0xb4>)
   805bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   805c0:	6033      	str	r3, [r6, #0]

	/* Configure and enable interrupt on RC compare */
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
   805c2:	4620      	mov	r0, r4
   805c4:	2100      	movs	r1, #0
   805c6:	2210      	movs	r2, #16
   805c8:	4b20      	ldr	r3, [pc, #128]	; (8064c <hcsr04_init+0xb8>)
   805ca:	4798      	blx	r3
	
	tc_start(TC0, 0);
   805cc:	4620      	mov	r0, r4
   805ce:	2100      	movs	r1, #0
   805d0:	4b1f      	ldr	r3, [pc, #124]	; (80650 <hcsr04_init+0xbc>)
   805d2:	4798      	blx	r3
}

static void timer_measure_init(void) {
	/* power on the peripheral clock for timers */
	pmc_enable_periph_clk(ID_TC2);
   805d4:	201d      	movs	r0, #29
   805d6:	47a8      	blx	r5

	tc_init(TC0, 2, 0);				/* Enable timer block 3, channel 0, TCLK1 (MCK/2) and capturemode */
   805d8:	4620      	mov	r0, r4
   805da:	2102      	movs	r1, #2
   805dc:	2200      	movs	r2, #0
   805de:	47b8      	blx	r7
	tc_set_block_mode(TC0, 2);
   805e0:	4620      	mov	r0, r4
   805e2:	2102      	movs	r1, #2
   805e4:	4b1b      	ldr	r3, [pc, #108]	; (80654 <hcsr04_init+0xc0>)
   805e6:	4798      	blx	r3
	tc_stop(TC0, 2);				/* making sure the timer does not run  */
   805e8:	4620      	mov	r0, r4
   805ea:	2102      	movs	r1, #2
   805ec:	4b1a      	ldr	r3, [pc, #104]	; (80658 <hcsr04_init+0xc4>)
   805ee:	4798      	blx	r3
/*
* Enable interrupt to be triggered on rising/falling edge on input pin
*/
static void echo_init_pin_interrupts() {
	/* Enable Clock for PIOB - needed for sampling falling edge */
	pmc_enable_periph_clk(ID_PIOC);		
   805f0:	200d      	movs	r0, #13
   805f2:	47a8      	blx	r5

	/* Set specific pin to use as input */
	pio_set_input(PIOC, ECHO_PIN_Middle, PIO_PULLUP);
   805f4:	f504 24c2 	add.w	r4, r4, #397312	; 0x61000
   805f8:	f504 7400 	add.w	r4, r4, #512	; 0x200
   805fc:	4620      	mov	r0, r4
   805fe:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80602:	2201      	movs	r2, #1
   80604:	4b15      	ldr	r3, [pc, #84]	; (8065c <hcsr04_init+0xc8>)
   80606:	4798      	blx	r3

	/* Unfortunately we can only have one interrupt handler per pin */
	pio_handler_set(PIOC, ID_PIOC, ECHO_PIN_Middle, PIO_IT_EDGE, edge_detection);
   80608:	4b15      	ldr	r3, [pc, #84]	; (80660 <hcsr04_init+0xcc>)
   8060a:	9300      	str	r3, [sp, #0]
   8060c:	4620      	mov	r0, r4
   8060e:	210d      	movs	r1, #13
   80610:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80614:	2340      	movs	r3, #64	; 0x40
   80616:	4d13      	ldr	r5, [pc, #76]	; (80664 <hcsr04_init+0xd0>)
   80618:	47a8      	blx	r5

	/* Enable Interrupt Handling in NVIC and in PIO */
	pio_enable_interrupt(PIOC, ECHO_PIN_Middle);
   8061a:	4620      	mov	r0, r4
   8061c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80620:	4b11      	ldr	r3, [pc, #68]	; (80668 <hcsr04_init+0xd4>)
   80622:	4798      	blx	r3
   80624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80628:	6033      	str	r3, [r6, #0]
	timer_sample_init();
	/* Enable another timer to measure pulse width using capture mode */
	timer_measure_init();
	/* Enable the interrupts for measuring pulse width on ECHO */
	echo_init_pin_interrupts();
   8062a:	b003      	add	sp, #12
   8062c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8062e:	bf00      	nop
   80630:	00080575 	.word	0x00080575
   80634:	00080d7d 	.word	0x00080d7d
   80638:	40080000 	.word	0x40080000
   8063c:	0008078d 	.word	0x0008078d
   80640:	00401640 	.word	0x00401640
   80644:	000807c9 	.word	0x000807c9
   80648:	e000e100 	.word	0xe000e100
   8064c:	000807d1 	.word	0x000807d1
   80650:	000807b1 	.word	0x000807b1
   80654:	000807a9 	.word	0x000807a9
   80658:	000807b9 	.word	0x000807b9
   8065c:	00080979 	.word	0x00080979
   80660:	00080469 	.word	0x00080469
   80664:	00080bd5 	.word	0x00080bd5
   80668:	00080a05 	.word	0x00080a05

0008066c <pin_mapper>:
					PIO_PA22_IDX,PIO_PA6_IDX,PIO_PA4_IDX,PIO_PA3_IDX,PIO_PA2_IDX,PIO_PB17_IDX,
					PIO_PB18_IDX,PIO_PB19_IDX,PIO_PB20_IDX};
					
uint8_t pin_mapper(uint8_t pin) {
	return pin_table[pin];
}
   8066c:	4b01      	ldr	r3, [pc, #4]	; (80674 <pin_mapper+0x8>)
   8066e:	5c18      	ldrb	r0, [r3, r0]
   80670:	4770      	bx	lr
   80672:	bf00      	nop
   80674:	2007012c 	.word	0x2007012c

00080678 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80678:	3801      	subs	r0, #1
   8067a:	2802      	cmp	r0, #2
   8067c:	d818      	bhi.n	806b0 <_write+0x38>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   8067e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80682:	460e      	mov	r6, r1
   80684:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80686:	b182      	cbz	r2, 806aa <_write+0x32>
   80688:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8068a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 806c4 <_write+0x4c>
   8068e:	4f0c      	ldr	r7, [pc, #48]	; (806c0 <_write+0x48>)
   80690:	f8d8 0000 	ldr.w	r0, [r8]
   80694:	f815 1b01 	ldrb.w	r1, [r5], #1
   80698:	683b      	ldr	r3, [r7, #0]
   8069a:	4798      	blx	r3
   8069c:	2800      	cmp	r0, #0
   8069e:	db0a      	blt.n	806b6 <_write+0x3e>
   806a0:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   806a2:	3c01      	subs	r4, #1
   806a4:	d1f4      	bne.n	80690 <_write+0x18>
   806a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   806aa:	2000      	movs	r0, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   806ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   806b0:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   806b4:	4770      	bx	lr
		return -1;
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   806b6:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   806ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   806be:	bf00      	nop
   806c0:	20070b4c 	.word	0x20070b4c
   806c4:	20070b50 	.word	0x20070b50

000806c8 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   806c8:	2a00      	cmp	r2, #0
   806ca:	d04e      	beq.n	8076a <usart_serial_read_packet+0xa2>
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   806cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   806d0:	b085      	sub	sp, #20
   806d2:	4606      	mov	r6, r0
   806d4:	460d      	mov	r5, r1
   806d6:	4617      	mov	r7, r2

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   806d8:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 80780 <usart_serial_read_packet+0xb8>
		while (uart_read((Uart*)p_usart, data));
   806dc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80784 <usart_serial_read_packet+0xbc>
   806e0:	f8cd a000 	str.w	sl, [sp]
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   806e4:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 80788 <usart_serial_read_packet+0xc0>
		while (usart_read(p_usart, &val));
   806e8:	4c21      	ldr	r4, [pc, #132]	; (80770 <usart_serial_read_packet+0xa8>)
   806ea:	f8cd b004 	str.w	fp, [sp, #4]
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   806ee:	2300      	movs	r3, #0
   806f0:	9303      	str	r3, [sp, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   806f2:	4556      	cmp	r6, sl
   806f4:	d105      	bne.n	80702 <usart_serial_read_packet+0x3a>
		while (uart_read((Uart*)p_usart, data));
   806f6:	9800      	ldr	r0, [sp, #0]
   806f8:	4629      	mov	r1, r5
   806fa:	47c8      	blx	r9
   806fc:	2800      	cmp	r0, #0
   806fe:	d1fa      	bne.n	806f6 <usart_serial_read_packet+0x2e>
   80700:	e015      	b.n	8072e <usart_serial_read_packet+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80702:	455e      	cmp	r6, fp
   80704:	d107      	bne.n	80716 <usart_serial_read_packet+0x4e>
		while (usart_read(p_usart, &val));
   80706:	9801      	ldr	r0, [sp, #4]
   80708:	a903      	add	r1, sp, #12
   8070a:	47a0      	blx	r4
   8070c:	2800      	cmp	r0, #0
   8070e:	d1fa      	bne.n	80706 <usart_serial_read_packet+0x3e>
		*data = (uint8_t)(val & 0xFF);
   80710:	9b03      	ldr	r3, [sp, #12]
   80712:	702b      	strb	r3, [r5, #0]
   80714:	e017      	b.n	80746 <usart_serial_read_packet+0x7e>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80716:	4b17      	ldr	r3, [pc, #92]	; (80774 <usart_serial_read_packet+0xac>)
   80718:	429e      	cmp	r6, r3
   8071a:	d108      	bne.n	8072e <usart_serial_read_packet+0x66>
		while (usart_read(p_usart, &val));
   8071c:	4698      	mov	r8, r3
   8071e:	4640      	mov	r0, r8
   80720:	a903      	add	r1, sp, #12
   80722:	47a0      	blx	r4
   80724:	2800      	cmp	r0, #0
   80726:	d1fa      	bne.n	8071e <usart_serial_read_packet+0x56>
		*data = (uint8_t)(val & 0xFF);
   80728:	9b03      	ldr	r3, [sp, #12]
   8072a:	702b      	strb	r3, [r5, #0]
   8072c:	e016      	b.n	8075c <usart_serial_read_packet+0x94>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8072e:	4b12      	ldr	r3, [pc, #72]	; (80778 <usart_serial_read_packet+0xb0>)
   80730:	429e      	cmp	r6, r3
   80732:	d108      	bne.n	80746 <usart_serial_read_packet+0x7e>
		while (usart_read(p_usart, &val));
   80734:	4698      	mov	r8, r3
   80736:	4640      	mov	r0, r8
   80738:	a903      	add	r1, sp, #12
   8073a:	47a0      	blx	r4
   8073c:	2800      	cmp	r0, #0
   8073e:	d1fa      	bne.n	80736 <usart_serial_read_packet+0x6e>
		*data = (uint8_t)(val & 0xFF);
   80740:	9b03      	ldr	r3, [sp, #12]
   80742:	702b      	strb	r3, [r5, #0]
   80744:	e00a      	b.n	8075c <usart_serial_read_packet+0x94>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80746:	4b0d      	ldr	r3, [pc, #52]	; (8077c <usart_serial_read_packet+0xb4>)
   80748:	429e      	cmp	r6, r3
   8074a:	d107      	bne.n	8075c <usart_serial_read_packet+0x94>
		while (usart_read(p_usart, &val));
   8074c:	4698      	mov	r8, r3
   8074e:	4640      	mov	r0, r8
   80750:	a903      	add	r1, sp, #12
   80752:	47a0      	blx	r4
   80754:	2800      	cmp	r0, #0
   80756:	d1fa      	bne.n	8074e <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   80758:	9b03      	ldr	r3, [sp, #12]
   8075a:	702b      	strb	r3, [r5, #0]
	while (len) {
		usart_serial_getchar(usart, data);
		len--;
		data++;
   8075c:	3501      	adds	r5, #1
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   8075e:	3f01      	subs	r7, #1
   80760:	d1c5      	bne.n	806ee <usart_serial_read_packet+0x26>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   80762:	2000      	movs	r0, #0
   80764:	b005      	add	sp, #20
   80766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8076a:	2000      	movs	r0, #0
   8076c:	4770      	bx	lr
   8076e:	bf00      	nop
   80770:	000801a1 	.word	0x000801a1
   80774:	4009c000 	.word	0x4009c000
   80778:	400a0000 	.word	0x400a0000
   8077c:	400a4000 	.word	0x400a4000
   80780:	400e0800 	.word	0x400e0800
   80784:	00080829 	.word	0x00080829
   80788:	40098000 	.word	0x40098000

0008078c <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   8078c:	b410      	push	{r4}
   8078e:	0189      	lsls	r1, r1, #6
   80790:	1843      	adds	r3, r0, r1
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   80792:	2402      	movs	r4, #2
   80794:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   80796:	f04f 31ff 	mov.w	r1, #4294967295
   8079a:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   8079c:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   8079e:	605a      	str	r2, [r3, #4]
}
   807a0:	f85d 4b04 	ldr.w	r4, [sp], #4
   807a4:	4770      	bx	lr
   807a6:	bf00      	nop

000807a8 <tc_set_block_mode>:
		uint32_t ul_blockmode)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
   807a8:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   807ac:	4770      	bx	lr
   807ae:	bf00      	nop

000807b0 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   807b0:	0189      	lsls	r1, r1, #6
   807b2:	2305      	movs	r3, #5
   807b4:	5043      	str	r3, [r0, r1]
   807b6:	4770      	bx	lr

000807b8 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   807b8:	0189      	lsls	r1, r1, #6
   807ba:	2302      	movs	r3, #2
   807bc:	5043      	str	r3, [r0, r1]
   807be:	4770      	bx	lr

000807c0 <tc_read_cv>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   807c0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   807c4:	6908      	ldr	r0, [r1, #16]
}
   807c6:	4770      	bx	lr

000807c8 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   807c8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   807cc:	61ca      	str	r2, [r1, #28]
   807ce:	4770      	bx	lr

000807d0 <tc_enable_interrupt>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
	tc_channel->TC_IER = ul_sources;
   807d0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   807d4:	624a      	str	r2, [r1, #36]	; 0x24
   807d6:	4770      	bx	lr

000807d8 <tc_get_status>:
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
	return tc_channel->TC_SR;
   807d8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   807dc:	6a08      	ldr	r0, [r1, #32]
}
   807de:	4770      	bx	lr

000807e0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   807e0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   807e2:	23ac      	movs	r3, #172	; 0xac
   807e4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   807e6:	680b      	ldr	r3, [r1, #0]
   807e8:	684a      	ldr	r2, [r1, #4]
   807ea:	fbb3 f3f2 	udiv	r3, r3, r2
   807ee:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   807f0:	1e5c      	subs	r4, r3, #1
   807f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   807f6:	4294      	cmp	r4, r2
   807f8:	d80a      	bhi.n	80810 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   807fa:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   807fc:	688b      	ldr	r3, [r1, #8]
   807fe:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80800:	f240 2302 	movw	r3, #514	; 0x202
   80804:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80808:	2350      	movs	r3, #80	; 0x50
   8080a:	6003      	str	r3, [r0, #0]

	return 0;
   8080c:	2000      	movs	r0, #0
   8080e:	e000      	b.n	80812 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80810:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80812:	f85d 4b04 	ldr.w	r4, [sp], #4
   80816:	4770      	bx	lr

00080818 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80818:	6943      	ldr	r3, [r0, #20]
   8081a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8081e:	bf1a      	itte	ne
   80820:	61c1      	strne	r1, [r0, #28]
	return 0;
   80822:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80824:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80826:	4770      	bx	lr

00080828 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80828:	6943      	ldr	r3, [r0, #20]
   8082a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8082e:	bf1d      	ittte	ne
   80830:	6983      	ldrne	r3, [r0, #24]
   80832:	700b      	strbne	r3, [r1, #0]
	return 0;
   80834:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80836:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80838:	4770      	bx	lr
   8083a:	bf00      	nop

0008083c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8083c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8083e:	480e      	ldr	r0, [pc, #56]	; (80878 <sysclk_init+0x3c>)
   80840:	4b0e      	ldr	r3, [pc, #56]	; (8087c <sysclk_init+0x40>)
   80842:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80844:	2000      	movs	r0, #0
   80846:	213e      	movs	r1, #62	; 0x3e
   80848:	4b0d      	ldr	r3, [pc, #52]	; (80880 <sysclk_init+0x44>)
   8084a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8084c:	4c0d      	ldr	r4, [pc, #52]	; (80884 <sysclk_init+0x48>)
   8084e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80850:	2800      	cmp	r0, #0
   80852:	d0fc      	beq.n	8084e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80854:	4b0c      	ldr	r3, [pc, #48]	; (80888 <sysclk_init+0x4c>)
   80856:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80858:	4a0c      	ldr	r2, [pc, #48]	; (8088c <sysclk_init+0x50>)
   8085a:	4b0d      	ldr	r3, [pc, #52]	; (80890 <sysclk_init+0x54>)
   8085c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8085e:	4c0d      	ldr	r4, [pc, #52]	; (80894 <sysclk_init+0x58>)
   80860:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80862:	2800      	cmp	r0, #0
   80864:	d0fc      	beq.n	80860 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80866:	2010      	movs	r0, #16
   80868:	4b0b      	ldr	r3, [pc, #44]	; (80898 <sysclk_init+0x5c>)
   8086a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8086c:	4b0b      	ldr	r3, [pc, #44]	; (8089c <sysclk_init+0x60>)
   8086e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80870:	4801      	ldr	r0, [pc, #4]	; (80878 <sysclk_init+0x3c>)
   80872:	4b02      	ldr	r3, [pc, #8]	; (8087c <sysclk_init+0x40>)
   80874:	4798      	blx	r3
   80876:	bd10      	pop	{r4, pc}
   80878:	0501bd00 	.word	0x0501bd00
   8087c:	200700a5 	.word	0x200700a5
   80880:	00080cf9 	.word	0x00080cf9
   80884:	00080d4d 	.word	0x00080d4d
   80888:	00080d5d 	.word	0x00080d5d
   8088c:	200d3f01 	.word	0x200d3f01
   80890:	400e0600 	.word	0x400e0600
   80894:	00080d6d 	.word	0x00080d6d
   80898:	00080c91 	.word	0x00080c91
   8089c:	00080e85 	.word	0x00080e85

000808a0 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   808a0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   808a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   808a6:	4b16      	ldr	r3, [pc, #88]	; (80900 <board_init+0x60>)
   808a8:	605a      	str	r2, [r3, #4]
   808aa:	200b      	movs	r0, #11
   808ac:	4c15      	ldr	r4, [pc, #84]	; (80904 <board_init+0x64>)
   808ae:	47a0      	blx	r4
   808b0:	200c      	movs	r0, #12
   808b2:	47a0      	blx	r4
   808b4:	200d      	movs	r0, #13
   808b6:	47a0      	blx	r4
   808b8:	200e      	movs	r0, #14
   808ba:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   808bc:	203b      	movs	r0, #59	; 0x3b
   808be:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   808c2:	4c11      	ldr	r4, [pc, #68]	; (80908 <board_init+0x68>)
   808c4:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   808c6:	2055      	movs	r0, #85	; 0x55
   808c8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   808cc:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   808ce:	2056      	movs	r0, #86	; 0x56
   808d0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   808d4:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   808d6:	2068      	movs	r0, #104	; 0x68
   808d8:	490c      	ldr	r1, [pc, #48]	; (8090c <board_init+0x6c>)
   808da:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   808dc:	205c      	movs	r0, #92	; 0x5c
   808de:	490c      	ldr	r1, [pc, #48]	; (80910 <board_init+0x70>)
   808e0:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   808e2:	480c      	ldr	r0, [pc, #48]	; (80914 <board_init+0x74>)
   808e4:	f44f 7140 	mov.w	r1, #768	; 0x300
   808e8:	4a0b      	ldr	r2, [pc, #44]	; (80918 <board_init+0x78>)
   808ea:	4b0c      	ldr	r3, [pc, #48]	; (8091c <board_init+0x7c>)
   808ec:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   808ee:	202b      	movs	r0, #43	; 0x2b
   808f0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   808f4:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   808f6:	202a      	movs	r0, #42	; 0x2a
   808f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   808fc:	47a0      	blx	r4
   808fe:	bd10      	pop	{r4, pc}
   80900:	400e1a50 	.word	0x400e1a50
   80904:	00080d7d 	.word	0x00080d7d
   80908:	00080a11 	.word	0x00080a11
   8090c:	28000079 	.word	0x28000079
   80910:	28000001 	.word	0x28000001
   80914:	400e0e00 	.word	0x400e0e00
   80918:	08000001 	.word	0x08000001
   8091c:	00080ae5 	.word	0x00080ae5

00080920 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   80920:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   80924:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   80928:	bf0c      	ite	eq
   8092a:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   8092c:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   8092e:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   80930:	bf14      	ite	ne
   80932:	2001      	movne	r0, #1
   80934:	2000      	moveq	r0, #0
   80936:	4770      	bx	lr

00080938 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80938:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8093a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8093e:	d016      	beq.n	8096e <pio_set_peripheral+0x36>
   80940:	d804      	bhi.n	8094c <pio_set_peripheral+0x14>
   80942:	b1c1      	cbz	r1, 80976 <pio_set_peripheral+0x3e>
   80944:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80948:	d00a      	beq.n	80960 <pio_set_peripheral+0x28>
   8094a:	e013      	b.n	80974 <pio_set_peripheral+0x3c>
   8094c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80950:	d011      	beq.n	80976 <pio_set_peripheral+0x3e>
   80952:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80956:	d00e      	beq.n	80976 <pio_set_peripheral+0x3e>
   80958:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8095c:	d10a      	bne.n	80974 <pio_set_peripheral+0x3c>
   8095e:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80960:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80962:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80964:	400b      	ands	r3, r1
   80966:	ea23 0302 	bic.w	r3, r3, r2
   8096a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8096c:	e002      	b.n	80974 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8096e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80970:	4313      	orrs	r3, r2
   80972:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80974:	6042      	str	r2, [r0, #4]
   80976:	4770      	bx	lr

00080978 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80978:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8097a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8097e:	bf14      	ite	ne
   80980:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80982:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80984:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80988:	bf14      	ite	ne
   8098a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8098c:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8098e:	f012 0f02 	tst.w	r2, #2
   80992:	d002      	beq.n	8099a <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80994:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80998:	e004      	b.n	809a4 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8099a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8099e:	bf18      	it	ne
   809a0:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   809a4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   809a6:	6001      	str	r1, [r0, #0]
   809a8:	4770      	bx	lr
   809aa:	bf00      	nop

000809ac <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   809ac:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   809ae:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   809b0:	9c01      	ldr	r4, [sp, #4]
   809b2:	b10c      	cbz	r4, 809b8 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   809b4:	6641      	str	r1, [r0, #100]	; 0x64
   809b6:	e000      	b.n	809ba <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   809b8:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   809ba:	b10b      	cbz	r3, 809c0 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   809bc:	6501      	str	r1, [r0, #80]	; 0x50
   809be:	e000      	b.n	809c2 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   809c0:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   809c2:	b10a      	cbz	r2, 809c8 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   809c4:	6301      	str	r1, [r0, #48]	; 0x30
   809c6:	e000      	b.n	809ca <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   809c8:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   809ca:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   809cc:	6001      	str	r1, [r0, #0]
}
   809ce:	f85d 4b04 	ldr.w	r4, [sp], #4
   809d2:	4770      	bx	lr

000809d4 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   809d4:	f012 0f10 	tst.w	r2, #16
   809d8:	d010      	beq.n	809fc <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
   809da:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   809de:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   809e2:	bf14      	ite	ne
   809e4:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   809e8:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   809ec:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   809f0:	bf14      	ite	ne
   809f2:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   809f6:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   809fa:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   809fc:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   80a00:	4770      	bx	lr
   80a02:	bf00      	nop

00080a04 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
   80a04:	6401      	str	r1, [r0, #64]	; 0x40
   80a06:	4770      	bx	lr

00080a08 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80a08:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80a0a:	4770      	bx	lr

00080a0c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80a0c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80a0e:	4770      	bx	lr

00080a10 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80a10:	b570      	push	{r4, r5, r6, lr}
   80a12:	b082      	sub	sp, #8
   80a14:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80a16:	0943      	lsrs	r3, r0, #5
   80a18:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80a1c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80a20:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80a22:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80a26:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80a2a:	d030      	beq.n	80a8e <pio_configure_pin+0x7e>
   80a2c:	d806      	bhi.n	80a3c <pio_configure_pin+0x2c>
   80a2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80a32:	d00a      	beq.n	80a4a <pio_configure_pin+0x3a>
   80a34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80a38:	d018      	beq.n	80a6c <pio_configure_pin+0x5c>
   80a3a:	e049      	b.n	80ad0 <pio_configure_pin+0xc0>
   80a3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80a40:	d030      	beq.n	80aa4 <pio_configure_pin+0x94>
   80a42:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80a46:	d02d      	beq.n	80aa4 <pio_configure_pin+0x94>
   80a48:	e042      	b.n	80ad0 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80a4a:	f000 001f 	and.w	r0, r0, #31
   80a4e:	2601      	movs	r6, #1
   80a50:	4086      	lsls	r6, r0
   80a52:	4620      	mov	r0, r4
   80a54:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a58:	4632      	mov	r2, r6
   80a5a:	4b1f      	ldr	r3, [pc, #124]	; (80ad8 <pio_configure_pin+0xc8>)
   80a5c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a5e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80a62:	bf14      	ite	ne
   80a64:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a66:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80a68:	2001      	movs	r0, #1
   80a6a:	e032      	b.n	80ad2 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80a6c:	f000 001f 	and.w	r0, r0, #31
   80a70:	2601      	movs	r6, #1
   80a72:	4086      	lsls	r6, r0
   80a74:	4620      	mov	r0, r4
   80a76:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80a7a:	4632      	mov	r2, r6
   80a7c:	4b16      	ldr	r3, [pc, #88]	; (80ad8 <pio_configure_pin+0xc8>)
   80a7e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80a80:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80a84:	bf14      	ite	ne
   80a86:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80a88:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80a8a:	2001      	movs	r0, #1
   80a8c:	e021      	b.n	80ad2 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80a8e:	f000 031f 	and.w	r3, r0, #31
   80a92:	2601      	movs	r6, #1
   80a94:	4620      	mov	r0, r4
   80a96:	fa06 f103 	lsl.w	r1, r6, r3
   80a9a:	462a      	mov	r2, r5
   80a9c:	4b0f      	ldr	r3, [pc, #60]	; (80adc <pio_configure_pin+0xcc>)
   80a9e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80aa0:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80aa2:	e016      	b.n	80ad2 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80aa4:	f000 031f 	and.w	r3, r0, #31
   80aa8:	2601      	movs	r6, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80aaa:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80aae:	ea05 0106 	and.w	r1, r5, r6
   80ab2:	9100      	str	r1, [sp, #0]
   80ab4:	4620      	mov	r0, r4
   80ab6:	fa06 f103 	lsl.w	r1, r6, r3
   80aba:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80abe:	bf14      	ite	ne
   80ac0:	2200      	movne	r2, #0
   80ac2:	2201      	moveq	r2, #1
   80ac4:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80ac8:	4c05      	ldr	r4, [pc, #20]	; (80ae0 <pio_configure_pin+0xd0>)
   80aca:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80acc:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80ace:	e000      	b.n	80ad2 <pio_configure_pin+0xc2>

	default:
		return 0;
   80ad0:	2000      	movs	r0, #0
	}

	return 1;
}
   80ad2:	b002      	add	sp, #8
   80ad4:	bd70      	pop	{r4, r5, r6, pc}
   80ad6:	bf00      	nop
   80ad8:	00080939 	.word	0x00080939
   80adc:	00080979 	.word	0x00080979
   80ae0:	000809ad 	.word	0x000809ad

00080ae4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   80ae4:	b570      	push	{r4, r5, r6, lr}
   80ae6:	b082      	sub	sp, #8
   80ae8:	4606      	mov	r6, r0
   80aea:	460d      	mov	r5, r1
   80aec:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80aee:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80af2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80af6:	d026      	beq.n	80b46 <pio_configure_pin_group+0x62>
   80af8:	d806      	bhi.n	80b08 <pio_configure_pin_group+0x24>
   80afa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80afe:	d00a      	beq.n	80b16 <pio_configure_pin_group+0x32>
   80b00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80b04:	d013      	beq.n	80b2e <pio_configure_pin_group+0x4a>
   80b06:	e034      	b.n	80b72 <pio_configure_pin_group+0x8e>
   80b08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80b0c:	d01f      	beq.n	80b4e <pio_configure_pin_group+0x6a>
   80b0e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80b12:	d01c      	beq.n	80b4e <pio_configure_pin_group+0x6a>
   80b14:	e02d      	b.n	80b72 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80b16:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b1a:	462a      	mov	r2, r5
   80b1c:	4b16      	ldr	r3, [pc, #88]	; (80b78 <pio_configure_pin_group+0x94>)
   80b1e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80b20:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80b24:	bf14      	ite	ne
   80b26:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80b28:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80b2a:	2001      	movs	r0, #1
   80b2c:	e022      	b.n	80b74 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80b2e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80b32:	462a      	mov	r2, r5
   80b34:	4b10      	ldr	r3, [pc, #64]	; (80b78 <pio_configure_pin_group+0x94>)
   80b36:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80b38:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80b3c:	bf14      	ite	ne
   80b3e:	6675      	strne	r5, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80b40:	6635      	streq	r5, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80b42:	2001      	movs	r0, #1
   80b44:	e016      	b.n	80b74 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80b46:	4b0d      	ldr	r3, [pc, #52]	; (80b7c <pio_configure_pin_group+0x98>)
   80b48:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80b4a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80b4c:	e012      	b.n	80b74 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80b4e:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80b52:	f004 0301 	and.w	r3, r4, #1
   80b56:	9300      	str	r3, [sp, #0]
   80b58:	4630      	mov	r0, r6
   80b5a:	4629      	mov	r1, r5
   80b5c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80b60:	bf14      	ite	ne
   80b62:	2200      	movne	r2, #0
   80b64:	2201      	moveq	r2, #1
   80b66:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80b6a:	4c05      	ldr	r4, [pc, #20]	; (80b80 <pio_configure_pin_group+0x9c>)
   80b6c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80b6e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80b70:	e000      	b.n	80b74 <pio_configure_pin_group+0x90>

	default:
		return 0;
   80b72:	2000      	movs	r0, #0
	}

	return 1;
}
   80b74:	b002      	add	sp, #8
   80b76:	bd70      	pop	{r4, r5, r6, pc}
   80b78:	00080939 	.word	0x00080939
   80b7c:	00080979 	.word	0x00080979
   80b80:	000809ad 	.word	0x000809ad

00080b84 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80b88:	4604      	mov	r4, r0
   80b8a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80b8c:	4b0e      	ldr	r3, [pc, #56]	; (80bc8 <pio_handler_process+0x44>)
   80b8e:	4798      	blx	r3
   80b90:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80b92:	4620      	mov	r0, r4
   80b94:	4b0d      	ldr	r3, [pc, #52]	; (80bcc <pio_handler_process+0x48>)
   80b96:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80b98:	4005      	ands	r5, r0
   80b9a:	d013      	beq.n	80bc4 <pio_handler_process+0x40>
   80b9c:	4c0c      	ldr	r4, [pc, #48]	; (80bd0 <pio_handler_process+0x4c>)
   80b9e:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80ba2:	6823      	ldr	r3, [r4, #0]
   80ba4:	4543      	cmp	r3, r8
   80ba6:	d108      	bne.n	80bba <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80ba8:	6861      	ldr	r1, [r4, #4]
   80baa:	4229      	tst	r1, r5
   80bac:	d005      	beq.n	80bba <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80bae:	68e3      	ldr	r3, [r4, #12]
   80bb0:	4640      	mov	r0, r8
   80bb2:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80bb4:	6863      	ldr	r3, [r4, #4]
   80bb6:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80bba:	42b4      	cmp	r4, r6
   80bbc:	d002      	beq.n	80bc4 <pio_handler_process+0x40>
   80bbe:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80bc0:	2d00      	cmp	r5, #0
   80bc2:	d1ee      	bne.n	80ba2 <pio_handler_process+0x1e>
   80bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80bc8:	00080a09 	.word	0x00080a09
   80bcc:	00080a0d 	.word	0x00080a0d
   80bd0:	20070aa0 	.word	0x20070aa0

00080bd4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   80bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   80bd6:	4c17      	ldr	r4, [pc, #92]	; (80c34 <pio_handler_set+0x60>)
   80bd8:	6827      	ldr	r7, [r4, #0]
   80bda:	2f06      	cmp	r7, #6
   80bdc:	d827      	bhi.n	80c2e <pio_handler_set+0x5a>
   80bde:	f04f 0c00 	mov.w	ip, #0
   80be2:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
   80be4:	4e14      	ldr	r6, [pc, #80]	; (80c38 <pio_handler_set+0x64>)
   80be6:	0125      	lsls	r5, r4, #4
   80be8:	eb06 0e05 	add.w	lr, r6, r5
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   80bec:	5975      	ldr	r5, [r6, r5]
   80bee:	428d      	cmp	r5, r1
   80bf0:	d104      	bne.n	80bfc <pio_handler_set+0x28>
   80bf2:	eb06 1504 	add.w	r5, r6, r4, lsl #4
   80bf6:	686d      	ldr	r5, [r5, #4]
   80bf8:	4295      	cmp	r5, r2
   80bfa:	d004      	beq.n	80c06 <pio_handler_set+0x32>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   80bfc:	3401      	adds	r4, #1
   80bfe:	b2e4      	uxtb	r4, r4
   80c00:	46a4      	mov	ip, r4
   80c02:	42a7      	cmp	r7, r4
   80c04:	d2ef      	bcs.n	80be6 <pio_handler_set+0x12>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   80c06:	f8ce 1000 	str.w	r1, [lr]
	pSource->mask = ul_mask;
   80c0a:	f8ce 2004 	str.w	r2, [lr, #4]
	pSource->attr = ul_attr;
   80c0e:	f8ce 3008 	str.w	r3, [lr, #8]
	pSource->handler = p_handler;
   80c12:	9906      	ldr	r1, [sp, #24]
   80c14:	f8ce 100c 	str.w	r1, [lr, #12]
	if (i == gs_ul_nb_sources + 1) {
   80c18:	3701      	adds	r7, #1
   80c1a:	4567      	cmp	r7, ip
		gs_ul_nb_sources++;
   80c1c:	bf04      	itt	eq
   80c1e:	4905      	ldreq	r1, [pc, #20]	; (80c34 <pio_handler_set+0x60>)
   80c20:	600f      	streq	r7, [r1, #0]
   80c22:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   80c24:	461a      	mov	r2, r3
   80c26:	4b05      	ldr	r3, [pc, #20]	; (80c3c <pio_handler_set+0x68>)
   80c28:	4798      	blx	r3

	return 0;
   80c2a:	2000      	movs	r0, #0
   80c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
   80c2e:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
   80c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80c32:	bf00      	nop
   80c34:	20070a9c 	.word	0x20070a9c
   80c38:	20070aa0 	.word	0x20070aa0
   80c3c:	000809d5 	.word	0x000809d5

00080c40 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80c40:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80c42:	4802      	ldr	r0, [pc, #8]	; (80c4c <PIOA_Handler+0xc>)
   80c44:	210b      	movs	r1, #11
   80c46:	4b02      	ldr	r3, [pc, #8]	; (80c50 <PIOA_Handler+0x10>)
   80c48:	4798      	blx	r3
   80c4a:	bd08      	pop	{r3, pc}
   80c4c:	400e0e00 	.word	0x400e0e00
   80c50:	00080b85 	.word	0x00080b85

00080c54 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80c54:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80c56:	4802      	ldr	r0, [pc, #8]	; (80c60 <PIOB_Handler+0xc>)
   80c58:	210c      	movs	r1, #12
   80c5a:	4b02      	ldr	r3, [pc, #8]	; (80c64 <PIOB_Handler+0x10>)
   80c5c:	4798      	blx	r3
   80c5e:	bd08      	pop	{r3, pc}
   80c60:	400e1000 	.word	0x400e1000
   80c64:	00080b85 	.word	0x00080b85

00080c68 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80c68:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80c6a:	4802      	ldr	r0, [pc, #8]	; (80c74 <PIOC_Handler+0xc>)
   80c6c:	210d      	movs	r1, #13
   80c6e:	4b02      	ldr	r3, [pc, #8]	; (80c78 <PIOC_Handler+0x10>)
   80c70:	4798      	blx	r3
   80c72:	bd08      	pop	{r3, pc}
   80c74:	400e1200 	.word	0x400e1200
   80c78:	00080b85 	.word	0x00080b85

00080c7c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80c7c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80c7e:	4802      	ldr	r0, [pc, #8]	; (80c88 <PIOD_Handler+0xc>)
   80c80:	210e      	movs	r1, #14
   80c82:	4b02      	ldr	r3, [pc, #8]	; (80c8c <PIOD_Handler+0x10>)
   80c84:	4798      	blx	r3
   80c86:	bd08      	pop	{r3, pc}
   80c88:	400e1400 	.word	0x400e1400
   80c8c:	00080b85 	.word	0x00080b85

00080c90 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80c90:	4a18      	ldr	r2, [pc, #96]	; (80cf4 <pmc_switch_mck_to_pllack+0x64>)
   80c92:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80c98:	4318      	orrs	r0, r3
   80c9a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80c9c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80c9e:	f013 0f08 	tst.w	r3, #8
   80ca2:	d003      	beq.n	80cac <pmc_switch_mck_to_pllack+0x1c>
   80ca4:	e009      	b.n	80cba <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80ca6:	3b01      	subs	r3, #1
   80ca8:	d103      	bne.n	80cb2 <pmc_switch_mck_to_pllack+0x22>
   80caa:	e01e      	b.n	80cea <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80cac:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80cb0:	4910      	ldr	r1, [pc, #64]	; (80cf4 <pmc_switch_mck_to_pllack+0x64>)
   80cb2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80cb4:	f012 0f08 	tst.w	r2, #8
   80cb8:	d0f5      	beq.n	80ca6 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80cba:	4a0e      	ldr	r2, [pc, #56]	; (80cf4 <pmc_switch_mck_to_pllack+0x64>)
   80cbc:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80cbe:	f023 0303 	bic.w	r3, r3, #3
   80cc2:	f043 0302 	orr.w	r3, r3, #2
   80cc6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80cc8:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80cca:	f010 0008 	ands.w	r0, r0, #8
   80cce:	d004      	beq.n	80cda <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80cd0:	2000      	movs	r0, #0
   80cd2:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80cd4:	3b01      	subs	r3, #1
   80cd6:	d103      	bne.n	80ce0 <pmc_switch_mck_to_pllack+0x50>
   80cd8:	e009      	b.n	80cee <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80cda:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80cde:	4905      	ldr	r1, [pc, #20]	; (80cf4 <pmc_switch_mck_to_pllack+0x64>)
   80ce0:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80ce2:	f012 0f08 	tst.w	r2, #8
   80ce6:	d0f5      	beq.n	80cd4 <pmc_switch_mck_to_pllack+0x44>
   80ce8:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80cea:	2001      	movs	r0, #1
   80cec:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80cee:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80cf0:	4770      	bx	lr
   80cf2:	bf00      	nop
   80cf4:	400e0600 	.word	0x400e0600

00080cf8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80cf8:	b138      	cbz	r0, 80d0a <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80cfa:	4911      	ldr	r1, [pc, #68]	; (80d40 <pmc_switch_mainck_to_xtal+0x48>)
   80cfc:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80cfe:	4a11      	ldr	r2, [pc, #68]	; (80d44 <pmc_switch_mainck_to_xtal+0x4c>)
   80d00:	401a      	ands	r2, r3
   80d02:	4b11      	ldr	r3, [pc, #68]	; (80d48 <pmc_switch_mainck_to_xtal+0x50>)
   80d04:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80d06:	620b      	str	r3, [r1, #32]
   80d08:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80d0a:	4a0d      	ldr	r2, [pc, #52]	; (80d40 <pmc_switch_mainck_to_xtal+0x48>)
   80d0c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80d0e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80d12:	f023 0303 	bic.w	r3, r3, #3
   80d16:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80d1a:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80d1e:	0209      	lsls	r1, r1, #8
   80d20:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80d22:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80d24:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80d26:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80d28:	f013 0f01 	tst.w	r3, #1
   80d2c:	d0fb      	beq.n	80d26 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80d2e:	4a04      	ldr	r2, [pc, #16]	; (80d40 <pmc_switch_mainck_to_xtal+0x48>)
   80d30:	6a13      	ldr	r3, [r2, #32]
   80d32:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80d3a:	6213      	str	r3, [r2, #32]
   80d3c:	4770      	bx	lr
   80d3e:	bf00      	nop
   80d40:	400e0600 	.word	0x400e0600
   80d44:	fec8fffc 	.word	0xfec8fffc
   80d48:	01370002 	.word	0x01370002

00080d4c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80d4c:	4b02      	ldr	r3, [pc, #8]	; (80d58 <pmc_osc_is_ready_mainck+0xc>)
   80d4e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80d50:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80d54:	4770      	bx	lr
   80d56:	bf00      	nop
   80d58:	400e0600 	.word	0x400e0600

00080d5c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80d5c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80d60:	4b01      	ldr	r3, [pc, #4]	; (80d68 <pmc_disable_pllack+0xc>)
   80d62:	629a      	str	r2, [r3, #40]	; 0x28
   80d64:	4770      	bx	lr
   80d66:	bf00      	nop
   80d68:	400e0600 	.word	0x400e0600

00080d6c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80d6c:	4b02      	ldr	r3, [pc, #8]	; (80d78 <pmc_is_locked_pllack+0xc>)
   80d6e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80d70:	f000 0002 	and.w	r0, r0, #2
   80d74:	4770      	bx	lr
   80d76:	bf00      	nop
   80d78:	400e0600 	.word	0x400e0600

00080d7c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80d7c:	282c      	cmp	r0, #44	; 0x2c
   80d7e:	d81e      	bhi.n	80dbe <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80d80:	281f      	cmp	r0, #31
   80d82:	d80c      	bhi.n	80d9e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80d84:	4b11      	ldr	r3, [pc, #68]	; (80dcc <pmc_enable_periph_clk+0x50>)
   80d86:	699a      	ldr	r2, [r3, #24]
   80d88:	2301      	movs	r3, #1
   80d8a:	4083      	lsls	r3, r0
   80d8c:	401a      	ands	r2, r3
   80d8e:	4293      	cmp	r3, r2
   80d90:	d017      	beq.n	80dc2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80d92:	2301      	movs	r3, #1
   80d94:	4083      	lsls	r3, r0
   80d96:	4a0d      	ldr	r2, [pc, #52]	; (80dcc <pmc_enable_periph_clk+0x50>)
   80d98:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80d9a:	2000      	movs	r0, #0
   80d9c:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80d9e:	4b0b      	ldr	r3, [pc, #44]	; (80dcc <pmc_enable_periph_clk+0x50>)
   80da0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   80da4:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80da6:	2301      	movs	r3, #1
   80da8:	4083      	lsls	r3, r0
   80daa:	401a      	ands	r2, r3
   80dac:	4293      	cmp	r3, r2
   80dae:	d00a      	beq.n	80dc6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80db0:	2301      	movs	r3, #1
   80db2:	4083      	lsls	r3, r0
   80db4:	4a05      	ldr	r2, [pc, #20]	; (80dcc <pmc_enable_periph_clk+0x50>)
   80db6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   80dba:	2000      	movs	r0, #0
   80dbc:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80dbe:	2001      	movs	r0, #1
   80dc0:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80dc2:	2000      	movs	r0, #0
   80dc4:	4770      	bx	lr
   80dc6:	2000      	movs	r0, #0
}
   80dc8:	4770      	bx	lr
   80dca:	bf00      	nop
   80dcc:	400e0600 	.word	0x400e0600

00080dd0 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
   80dd0:	e7fe      	b.n	80dd0 <Dummy_Handler>
   80dd2:	bf00      	nop

00080dd4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80dd4:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80dd6:	4b1f      	ldr	r3, [pc, #124]	; (80e54 <Reset_Handler+0x80>)
   80dd8:	4a1f      	ldr	r2, [pc, #124]	; (80e58 <Reset_Handler+0x84>)
   80dda:	429a      	cmp	r2, r3
   80ddc:	d003      	beq.n	80de6 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80dde:	4b1f      	ldr	r3, [pc, #124]	; (80e5c <Reset_Handler+0x88>)
   80de0:	4a1c      	ldr	r2, [pc, #112]	; (80e54 <Reset_Handler+0x80>)
   80de2:	429a      	cmp	r2, r3
   80de4:	d304      	bcc.n	80df0 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80de6:	4b1e      	ldr	r3, [pc, #120]	; (80e60 <Reset_Handler+0x8c>)
   80de8:	4a1e      	ldr	r2, [pc, #120]	; (80e64 <Reset_Handler+0x90>)
   80dea:	429a      	cmp	r2, r3
   80dec:	d310      	bcc.n	80e10 <Reset_Handler+0x3c>
   80dee:	e01b      	b.n	80e28 <Reset_Handler+0x54>
   80df0:	4918      	ldr	r1, [pc, #96]	; (80e54 <Reset_Handler+0x80>)
   80df2:	1d0a      	adds	r2, r1, #4
   80df4:	4b1c      	ldr	r3, [pc, #112]	; (80e68 <Reset_Handler+0x94>)
   80df6:	1a9b      	subs	r3, r3, r2
   80df8:	f023 0303 	bic.w	r3, r3, #3
   80dfc:	3304      	adds	r3, #4
   80dfe:	4a16      	ldr	r2, [pc, #88]	; (80e58 <Reset_Handler+0x84>)
   80e00:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   80e02:	f852 0b04 	ldr.w	r0, [r2], #4
   80e06:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80e0a:	429a      	cmp	r2, r3
   80e0c:	d1f9      	bne.n	80e02 <Reset_Handler+0x2e>
   80e0e:	e7ea      	b.n	80de6 <Reset_Handler+0x12>
   80e10:	4b16      	ldr	r3, [pc, #88]	; (80e6c <Reset_Handler+0x98>)
   80e12:	4a17      	ldr	r2, [pc, #92]	; (80e70 <Reset_Handler+0x9c>)
   80e14:	1ad2      	subs	r2, r2, r3
   80e16:	f022 0203 	bic.w	r2, r2, #3
   80e1a:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80e1c:	3b04      	subs	r3, #4
		*pDest++ = 0;
   80e1e:	2100      	movs	r1, #0
   80e20:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80e24:	4293      	cmp	r3, r2
   80e26:	d1fb      	bne.n	80e20 <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80e28:	4b12      	ldr	r3, [pc, #72]	; (80e74 <Reset_Handler+0xa0>)
   80e2a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80e2e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80e32:	4911      	ldr	r1, [pc, #68]	; (80e78 <Reset_Handler+0xa4>)
   80e34:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80e36:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80e3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80e3e:	d203      	bcs.n	80e48 <Reset_Handler+0x74>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80e40:	688b      	ldr	r3, [r1, #8]
   80e42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80e46:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80e48:	4b0c      	ldr	r3, [pc, #48]	; (80e7c <Reset_Handler+0xa8>)
   80e4a:	4798      	blx	r3

	/* Branch to main function */
	main();
   80e4c:	4b0c      	ldr	r3, [pc, #48]	; (80e80 <Reset_Handler+0xac>)
   80e4e:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   80e50:	e7fe      	b.n	80e50 <Reset_Handler+0x7c>
   80e52:	bf00      	nop
   80e54:	20070000 	.word	0x20070000
   80e58:	0008409c 	.word	0x0008409c
   80e5c:	200709dc 	.word	0x200709dc
   80e60:	20070b58 	.word	0x20070b58
   80e64:	200709dc 	.word	0x200709dc
   80e68:	200709df 	.word	0x200709df
   80e6c:	200709e0 	.word	0x200709e0
   80e70:	20070b5b 	.word	0x20070b5b
   80e74:	00080000 	.word	0x00080000
   80e78:	e000ed00 	.word	0xe000ed00
   80e7c:	0008108d 	.word	0x0008108d
   80e80:	00080ff1 	.word	0x00080ff1

00080e84 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80e84:	4b3e      	ldr	r3, [pc, #248]	; (80f80 <SystemCoreClockUpdate+0xfc>)
   80e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80e88:	f003 0303 	and.w	r3, r3, #3
   80e8c:	2b03      	cmp	r3, #3
   80e8e:	d85f      	bhi.n	80f50 <SystemCoreClockUpdate+0xcc>
   80e90:	e8df f003 	tbb	[pc, r3]
   80e94:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80e98:	4b3a      	ldr	r3, [pc, #232]	; (80f84 <SystemCoreClockUpdate+0x100>)
   80e9a:	695b      	ldr	r3, [r3, #20]
   80e9c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80ea0:	bf14      	ite	ne
   80ea2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80ea6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80eaa:	4b37      	ldr	r3, [pc, #220]	; (80f88 <SystemCoreClockUpdate+0x104>)
   80eac:	601a      	str	r2, [r3, #0]
   80eae:	e04f      	b.n	80f50 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80eb0:	4b33      	ldr	r3, [pc, #204]	; (80f80 <SystemCoreClockUpdate+0xfc>)
   80eb2:	6a1b      	ldr	r3, [r3, #32]
   80eb4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80eb8:	d003      	beq.n	80ec2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80eba:	4a34      	ldr	r2, [pc, #208]	; (80f8c <SystemCoreClockUpdate+0x108>)
   80ebc:	4b32      	ldr	r3, [pc, #200]	; (80f88 <SystemCoreClockUpdate+0x104>)
   80ebe:	601a      	str	r2, [r3, #0]
   80ec0:	e046      	b.n	80f50 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80ec2:	4a33      	ldr	r2, [pc, #204]	; (80f90 <SystemCoreClockUpdate+0x10c>)
   80ec4:	4b30      	ldr	r3, [pc, #192]	; (80f88 <SystemCoreClockUpdate+0x104>)
   80ec6:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80ec8:	4b2d      	ldr	r3, [pc, #180]	; (80f80 <SystemCoreClockUpdate+0xfc>)
   80eca:	6a1b      	ldr	r3, [r3, #32]
   80ecc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80ed0:	2b10      	cmp	r3, #16
   80ed2:	d002      	beq.n	80eda <SystemCoreClockUpdate+0x56>
   80ed4:	2b20      	cmp	r3, #32
   80ed6:	d004      	beq.n	80ee2 <SystemCoreClockUpdate+0x5e>
   80ed8:	e03a      	b.n	80f50 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80eda:	4a2e      	ldr	r2, [pc, #184]	; (80f94 <SystemCoreClockUpdate+0x110>)
   80edc:	4b2a      	ldr	r3, [pc, #168]	; (80f88 <SystemCoreClockUpdate+0x104>)
   80ede:	601a      	str	r2, [r3, #0]
				break;
   80ee0:	e036      	b.n	80f50 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80ee2:	4a2a      	ldr	r2, [pc, #168]	; (80f8c <SystemCoreClockUpdate+0x108>)
   80ee4:	4b28      	ldr	r3, [pc, #160]	; (80f88 <SystemCoreClockUpdate+0x104>)
   80ee6:	601a      	str	r2, [r3, #0]
				break;
   80ee8:	e032      	b.n	80f50 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80eea:	4b25      	ldr	r3, [pc, #148]	; (80f80 <SystemCoreClockUpdate+0xfc>)
   80eec:	6a1b      	ldr	r3, [r3, #32]
   80eee:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80ef2:	d003      	beq.n	80efc <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80ef4:	4a25      	ldr	r2, [pc, #148]	; (80f8c <SystemCoreClockUpdate+0x108>)
   80ef6:	4b24      	ldr	r3, [pc, #144]	; (80f88 <SystemCoreClockUpdate+0x104>)
   80ef8:	601a      	str	r2, [r3, #0]
   80efa:	e012      	b.n	80f22 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80efc:	4a24      	ldr	r2, [pc, #144]	; (80f90 <SystemCoreClockUpdate+0x10c>)
   80efe:	4b22      	ldr	r3, [pc, #136]	; (80f88 <SystemCoreClockUpdate+0x104>)
   80f00:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80f02:	4b1f      	ldr	r3, [pc, #124]	; (80f80 <SystemCoreClockUpdate+0xfc>)
   80f04:	6a1b      	ldr	r3, [r3, #32]
   80f06:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f0a:	2b10      	cmp	r3, #16
   80f0c:	d002      	beq.n	80f14 <SystemCoreClockUpdate+0x90>
   80f0e:	2b20      	cmp	r3, #32
   80f10:	d004      	beq.n	80f1c <SystemCoreClockUpdate+0x98>
   80f12:	e006      	b.n	80f22 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80f14:	4a1f      	ldr	r2, [pc, #124]	; (80f94 <SystemCoreClockUpdate+0x110>)
   80f16:	4b1c      	ldr	r3, [pc, #112]	; (80f88 <SystemCoreClockUpdate+0x104>)
   80f18:	601a      	str	r2, [r3, #0]
				break;
   80f1a:	e002      	b.n	80f22 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80f1c:	4a1b      	ldr	r2, [pc, #108]	; (80f8c <SystemCoreClockUpdate+0x108>)
   80f1e:	4b1a      	ldr	r3, [pc, #104]	; (80f88 <SystemCoreClockUpdate+0x104>)
   80f20:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80f22:	4b17      	ldr	r3, [pc, #92]	; (80f80 <SystemCoreClockUpdate+0xfc>)
   80f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80f26:	f003 0303 	and.w	r3, r3, #3
   80f2a:	2b02      	cmp	r3, #2
   80f2c:	d10d      	bne.n	80f4a <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80f2e:	4a14      	ldr	r2, [pc, #80]	; (80f80 <SystemCoreClockUpdate+0xfc>)
   80f30:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80f32:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80f34:	4814      	ldr	r0, [pc, #80]	; (80f88 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80f36:	f3c3 410a 	ubfx	r1, r3, #16, #11
   80f3a:	6803      	ldr	r3, [r0, #0]
   80f3c:	fb01 3303 	mla	r3, r1, r3, r3
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80f40:	b2d2      	uxtb	r2, r2
   80f42:	fbb3 f3f2 	udiv	r3, r3, r2
   80f46:	6003      	str	r3, [r0, #0]
   80f48:	e002      	b.n	80f50 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80f4a:	4a13      	ldr	r2, [pc, #76]	; (80f98 <SystemCoreClockUpdate+0x114>)
   80f4c:	4b0e      	ldr	r3, [pc, #56]	; (80f88 <SystemCoreClockUpdate+0x104>)
   80f4e:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80f50:	4b0b      	ldr	r3, [pc, #44]	; (80f80 <SystemCoreClockUpdate+0xfc>)
   80f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80f54:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f58:	2b70      	cmp	r3, #112	; 0x70
   80f5a:	d107      	bne.n	80f6c <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80f5c:	4a0a      	ldr	r2, [pc, #40]	; (80f88 <SystemCoreClockUpdate+0x104>)
   80f5e:	6813      	ldr	r3, [r2, #0]
   80f60:	490e      	ldr	r1, [pc, #56]	; (80f9c <SystemCoreClockUpdate+0x118>)
   80f62:	fba1 1303 	umull	r1, r3, r1, r3
   80f66:	085b      	lsrs	r3, r3, #1
   80f68:	6013      	str	r3, [r2, #0]
   80f6a:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80f6c:	4b04      	ldr	r3, [pc, #16]	; (80f80 <SystemCoreClockUpdate+0xfc>)
   80f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80f70:	4905      	ldr	r1, [pc, #20]	; (80f88 <SystemCoreClockUpdate+0x104>)
   80f72:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80f76:	680b      	ldr	r3, [r1, #0]
   80f78:	40d3      	lsrs	r3, r2
   80f7a:	600b      	str	r3, [r1, #0]
   80f7c:	4770      	bx	lr
   80f7e:	bf00      	nop
   80f80:	400e0600 	.word	0x400e0600
   80f84:	400e1a10 	.word	0x400e1a10
   80f88:	20070170 	.word	0x20070170
   80f8c:	00b71b00 	.word	0x00b71b00
   80f90:	003d0900 	.word	0x003d0900
   80f94:	007a1200 	.word	0x007a1200
   80f98:	0e4e1c00 	.word	0x0e4e1c00
   80f9c:	aaaaaaab 	.word	0xaaaaaaab

00080fa0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80fa0:	4b09      	ldr	r3, [pc, #36]	; (80fc8 <_sbrk+0x28>)
   80fa2:	681b      	ldr	r3, [r3, #0]
   80fa4:	b913      	cbnz	r3, 80fac <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80fa6:	4a09      	ldr	r2, [pc, #36]	; (80fcc <_sbrk+0x2c>)
   80fa8:	4b07      	ldr	r3, [pc, #28]	; (80fc8 <_sbrk+0x28>)
   80faa:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80fac:	4b06      	ldr	r3, [pc, #24]	; (80fc8 <_sbrk+0x28>)
   80fae:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80fb0:	181a      	adds	r2, r3, r0
   80fb2:	4907      	ldr	r1, [pc, #28]	; (80fd0 <_sbrk+0x30>)
   80fb4:	4291      	cmp	r1, r2
   80fb6:	db04      	blt.n	80fc2 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80fb8:	4610      	mov	r0, r2
   80fba:	4a03      	ldr	r2, [pc, #12]	; (80fc8 <_sbrk+0x28>)
   80fbc:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80fbe:	4618      	mov	r0, r3
   80fc0:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80fc2:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80fc6:	4770      	bx	lr
   80fc8:	20070b10 	.word	0x20070b10
   80fcc:	20072b58 	.word	0x20072b58
   80fd0:	20087ffc 	.word	0x20087ffc

00080fd4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80fd4:	f04f 30ff 	mov.w	r0, #4294967295
   80fd8:	4770      	bx	lr
   80fda:	bf00      	nop

00080fdc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80fdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80fe0:	604b      	str	r3, [r1, #4]

	return 0;
}
   80fe2:	2000      	movs	r0, #0
   80fe4:	4770      	bx	lr
   80fe6:	bf00      	nop

00080fe8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80fe8:	2001      	movs	r0, #1
   80fea:	4770      	bx	lr

00080fec <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80fec:	2000      	movs	r0, #0
   80fee:	4770      	bx	lr

00080ff0 <main>:
#include "pin_mapper.h"
#include "drivers/delay.h"
#include "drivers/console_driver.h"
#include "drivers/hcsr04.h"

int main (void) {
   80ff0:	b508      	push	{r3, lr}
	sysclk_init();
   80ff2:	4b1c      	ldr	r3, [pc, #112]	; (81064 <main+0x74>)
   80ff4:	4798      	blx	r3
	board_init();
   80ff6:	4b1c      	ldr	r3, [pc, #112]	; (81068 <main+0x78>)
   80ff8:	4798      	blx	r3
   80ffa:	200b      	movs	r0, #11
   80ffc:	4c1b      	ldr	r4, [pc, #108]	; (8106c <main+0x7c>)
   80ffe:	47a0      	blx	r4
   81000:	200c      	movs	r0, #12
   81002:	47a0      	blx	r4
   81004:	200d      	movs	r0, #13
   81006:	47a0      	blx	r4
   81008:	200e      	movs	r0, #14
   8100a:	47a0      	blx	r4

	ioport_init();
	delay_init();
   8100c:	4b18      	ldr	r3, [pc, #96]	; (81070 <main+0x80>)
   8100e:	4798      	blx	r3
	console_init();
   81010:	4b18      	ldr	r3, [pc, #96]	; (81074 <main+0x84>)
   81012:	4798      	blx	r3
	
	ioport_enable_pin(pin_mapper(13));
   81014:	200d      	movs	r0, #13
   81016:	4d18      	ldr	r5, [pc, #96]	; (81078 <main+0x88>)
   81018:	47a8      	blx	r5
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   8101a:	f000 031f 	and.w	r3, r0, #31
   8101e:	2401      	movs	r4, #1
   81020:	fa04 f203 	lsl.w	r2, r4, r3
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   81024:	0943      	lsrs	r3, r0, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81026:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8102a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8102e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   81030:	601a      	str	r2, [r3, #0]
	ioport_set_pin_dir(pin_mapper(13), IOPORT_DIR_OUTPUT);
   81032:	200d      	movs	r0, #13
   81034:	47a8      	blx	r5
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   81036:	0943      	lsrs	r3, r0, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81038:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8103c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81040:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   81042:	f000 001f 	and.w	r0, r0, #31
   81046:	4084      	lsls	r4, r0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81048:	611c      	str	r4, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8104a:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
	
	hcsr04_init();
   8104e:	4b0b      	ldr	r3, [pc, #44]	; (8107c <main+0x8c>)
   81050:	4798      	blx	r3

	while(1) {
		printf("Sample: %d\n", hcsr04_get_distance());
   81052:	4e0b      	ldr	r6, [pc, #44]	; (81080 <main+0x90>)
   81054:	4d0b      	ldr	r5, [pc, #44]	; (81084 <main+0x94>)
   81056:	4c0c      	ldr	r4, [pc, #48]	; (81088 <main+0x98>)
   81058:	47b0      	blx	r6
   8105a:	4601      	mov	r1, r0
   8105c:	4628      	mov	r0, r5
   8105e:	47a0      	blx	r4
	}
   81060:	e7fa      	b.n	81058 <main+0x68>
   81062:	bf00      	nop
   81064:	0008083d 	.word	0x0008083d
   81068:	000808a1 	.word	0x000808a1
   8106c:	00080d7d 	.word	0x00080d7d
   81070:	000803f1 	.word	0x000803f1
   81074:	0008035d 	.word	0x0008035d
   81078:	0008066d 	.word	0x0008066d
   8107c:	00080595 	.word	0x00080595
   81080:	000804d5 	.word	0x000804d5
   81084:	0008400c 	.word	0x0008400c
   81088:	000810dd 	.word	0x000810dd

0008108c <__libc_init_array>:
   8108c:	b570      	push	{r4, r5, r6, lr}
   8108e:	4e0f      	ldr	r6, [pc, #60]	; (810cc <__libc_init_array+0x40>)
   81090:	4d0f      	ldr	r5, [pc, #60]	; (810d0 <__libc_init_array+0x44>)
   81092:	1b76      	subs	r6, r6, r5
   81094:	10b6      	asrs	r6, r6, #2
   81096:	bf18      	it	ne
   81098:	2400      	movne	r4, #0
   8109a:	d005      	beq.n	810a8 <__libc_init_array+0x1c>
   8109c:	3401      	adds	r4, #1
   8109e:	f855 3b04 	ldr.w	r3, [r5], #4
   810a2:	4798      	blx	r3
   810a4:	42a6      	cmp	r6, r4
   810a6:	d1f9      	bne.n	8109c <__libc_init_array+0x10>
   810a8:	4e0a      	ldr	r6, [pc, #40]	; (810d4 <__libc_init_array+0x48>)
   810aa:	4d0b      	ldr	r5, [pc, #44]	; (810d8 <__libc_init_array+0x4c>)
   810ac:	f002 ffe0 	bl	84070 <_init>
   810b0:	1b76      	subs	r6, r6, r5
   810b2:	10b6      	asrs	r6, r6, #2
   810b4:	bf18      	it	ne
   810b6:	2400      	movne	r4, #0
   810b8:	d006      	beq.n	810c8 <__libc_init_array+0x3c>
   810ba:	3401      	adds	r4, #1
   810bc:	f855 3b04 	ldr.w	r3, [r5], #4
   810c0:	4798      	blx	r3
   810c2:	42a6      	cmp	r6, r4
   810c4:	d1f9      	bne.n	810ba <__libc_init_array+0x2e>
   810c6:	bd70      	pop	{r4, r5, r6, pc}
   810c8:	bd70      	pop	{r4, r5, r6, pc}
   810ca:	bf00      	nop
   810cc:	0008407c 	.word	0x0008407c
   810d0:	0008407c 	.word	0x0008407c
   810d4:	00084084 	.word	0x00084084
   810d8:	0008407c 	.word	0x0008407c

000810dc <iprintf>:
   810dc:	b40f      	push	{r0, r1, r2, r3}
   810de:	b510      	push	{r4, lr}
   810e0:	4b07      	ldr	r3, [pc, #28]	; (81100 <iprintf+0x24>)
   810e2:	b082      	sub	sp, #8
   810e4:	ac04      	add	r4, sp, #16
   810e6:	f854 2b04 	ldr.w	r2, [r4], #4
   810ea:	6818      	ldr	r0, [r3, #0]
   810ec:	4623      	mov	r3, r4
   810ee:	6881      	ldr	r1, [r0, #8]
   810f0:	9401      	str	r4, [sp, #4]
   810f2:	f000 f915 	bl	81320 <_vfiprintf_r>
   810f6:	b002      	add	sp, #8
   810f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   810fc:	b004      	add	sp, #16
   810fe:	4770      	bx	lr
   81100:	200705a0 	.word	0x200705a0

00081104 <memset>:
   81104:	b470      	push	{r4, r5, r6}
   81106:	0784      	lsls	r4, r0, #30
   81108:	d046      	beq.n	81198 <memset+0x94>
   8110a:	1e54      	subs	r4, r2, #1
   8110c:	2a00      	cmp	r2, #0
   8110e:	d041      	beq.n	81194 <memset+0x90>
   81110:	b2cd      	uxtb	r5, r1
   81112:	4603      	mov	r3, r0
   81114:	e002      	b.n	8111c <memset+0x18>
   81116:	1e62      	subs	r2, r4, #1
   81118:	b3e4      	cbz	r4, 81194 <memset+0x90>
   8111a:	4614      	mov	r4, r2
   8111c:	f803 5b01 	strb.w	r5, [r3], #1
   81120:	079a      	lsls	r2, r3, #30
   81122:	d1f8      	bne.n	81116 <memset+0x12>
   81124:	2c03      	cmp	r4, #3
   81126:	d92e      	bls.n	81186 <memset+0x82>
   81128:	b2cd      	uxtb	r5, r1
   8112a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8112e:	2c0f      	cmp	r4, #15
   81130:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81134:	d919      	bls.n	8116a <memset+0x66>
   81136:	4626      	mov	r6, r4
   81138:	f103 0210 	add.w	r2, r3, #16
   8113c:	3e10      	subs	r6, #16
   8113e:	2e0f      	cmp	r6, #15
   81140:	f842 5c10 	str.w	r5, [r2, #-16]
   81144:	f842 5c0c 	str.w	r5, [r2, #-12]
   81148:	f842 5c08 	str.w	r5, [r2, #-8]
   8114c:	f842 5c04 	str.w	r5, [r2, #-4]
   81150:	f102 0210 	add.w	r2, r2, #16
   81154:	d8f2      	bhi.n	8113c <memset+0x38>
   81156:	f1a4 0210 	sub.w	r2, r4, #16
   8115a:	f022 020f 	bic.w	r2, r2, #15
   8115e:	f004 040f 	and.w	r4, r4, #15
   81162:	3210      	adds	r2, #16
   81164:	2c03      	cmp	r4, #3
   81166:	4413      	add	r3, r2
   81168:	d90d      	bls.n	81186 <memset+0x82>
   8116a:	461e      	mov	r6, r3
   8116c:	4622      	mov	r2, r4
   8116e:	3a04      	subs	r2, #4
   81170:	2a03      	cmp	r2, #3
   81172:	f846 5b04 	str.w	r5, [r6], #4
   81176:	d8fa      	bhi.n	8116e <memset+0x6a>
   81178:	1f22      	subs	r2, r4, #4
   8117a:	f022 0203 	bic.w	r2, r2, #3
   8117e:	3204      	adds	r2, #4
   81180:	4413      	add	r3, r2
   81182:	f004 0403 	and.w	r4, r4, #3
   81186:	b12c      	cbz	r4, 81194 <memset+0x90>
   81188:	b2c9      	uxtb	r1, r1
   8118a:	441c      	add	r4, r3
   8118c:	f803 1b01 	strb.w	r1, [r3], #1
   81190:	42a3      	cmp	r3, r4
   81192:	d1fb      	bne.n	8118c <memset+0x88>
   81194:	bc70      	pop	{r4, r5, r6}
   81196:	4770      	bx	lr
   81198:	4614      	mov	r4, r2
   8119a:	4603      	mov	r3, r0
   8119c:	e7c2      	b.n	81124 <memset+0x20>
   8119e:	bf00      	nop

000811a0 <setbuf>:
   811a0:	2900      	cmp	r1, #0
   811a2:	bf0c      	ite	eq
   811a4:	2202      	moveq	r2, #2
   811a6:	2200      	movne	r2, #0
   811a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   811ac:	f000 b800 	b.w	811b0 <setvbuf>

000811b0 <setvbuf>:
   811b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   811b4:	4d3a      	ldr	r5, [pc, #232]	; (812a0 <setvbuf+0xf0>)
   811b6:	4604      	mov	r4, r0
   811b8:	682e      	ldr	r6, [r5, #0]
   811ba:	4690      	mov	r8, r2
   811bc:	460d      	mov	r5, r1
   811be:	461f      	mov	r7, r3
   811c0:	b116      	cbz	r6, 811c8 <setvbuf+0x18>
   811c2:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   811c4:	2b00      	cmp	r3, #0
   811c6:	d03c      	beq.n	81242 <setvbuf+0x92>
   811c8:	f1b8 0f02 	cmp.w	r8, #2
   811cc:	d82f      	bhi.n	8122e <setvbuf+0x7e>
   811ce:	2f00      	cmp	r7, #0
   811d0:	db2d      	blt.n	8122e <setvbuf+0x7e>
   811d2:	4621      	mov	r1, r4
   811d4:	4630      	mov	r0, r6
   811d6:	f000 ffff 	bl	821d8 <_fflush_r>
   811da:	89a1      	ldrh	r1, [r4, #12]
   811dc:	2300      	movs	r3, #0
   811de:	6063      	str	r3, [r4, #4]
   811e0:	61a3      	str	r3, [r4, #24]
   811e2:	060b      	lsls	r3, r1, #24
   811e4:	d427      	bmi.n	81236 <setvbuf+0x86>
   811e6:	f021 0183 	bic.w	r1, r1, #131	; 0x83
   811ea:	b289      	uxth	r1, r1
   811ec:	f1b8 0f02 	cmp.w	r8, #2
   811f0:	81a1      	strh	r1, [r4, #12]
   811f2:	d02a      	beq.n	8124a <setvbuf+0x9a>
   811f4:	2d00      	cmp	r5, #0
   811f6:	d036      	beq.n	81266 <setvbuf+0xb6>
   811f8:	f1b8 0f01 	cmp.w	r8, #1
   811fc:	d011      	beq.n	81222 <setvbuf+0x72>
   811fe:	b289      	uxth	r1, r1
   81200:	f001 0008 	and.w	r0, r1, #8
   81204:	4b27      	ldr	r3, [pc, #156]	; (812a4 <setvbuf+0xf4>)
   81206:	b280      	uxth	r0, r0
   81208:	63f3      	str	r3, [r6, #60]	; 0x3c
   8120a:	6025      	str	r5, [r4, #0]
   8120c:	6125      	str	r5, [r4, #16]
   8120e:	6167      	str	r7, [r4, #20]
   81210:	b178      	cbz	r0, 81232 <setvbuf+0x82>
   81212:	f011 0f03 	tst.w	r1, #3
   81216:	bf18      	it	ne
   81218:	2700      	movne	r7, #0
   8121a:	2000      	movs	r0, #0
   8121c:	60a7      	str	r7, [r4, #8]
   8121e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81222:	f041 0101 	orr.w	r1, r1, #1
   81226:	427b      	negs	r3, r7
   81228:	81a1      	strh	r1, [r4, #12]
   8122a:	61a3      	str	r3, [r4, #24]
   8122c:	e7e7      	b.n	811fe <setvbuf+0x4e>
   8122e:	f04f 30ff 	mov.w	r0, #4294967295
   81232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81236:	6921      	ldr	r1, [r4, #16]
   81238:	4630      	mov	r0, r6
   8123a:	f001 f939 	bl	824b0 <_free_r>
   8123e:	89a1      	ldrh	r1, [r4, #12]
   81240:	e7d1      	b.n	811e6 <setvbuf+0x36>
   81242:	4630      	mov	r0, r6
   81244:	f001 f85c 	bl	82300 <__sinit>
   81248:	e7be      	b.n	811c8 <setvbuf+0x18>
   8124a:	2000      	movs	r0, #0
   8124c:	f104 0343 	add.w	r3, r4, #67	; 0x43
   81250:	f041 0102 	orr.w	r1, r1, #2
   81254:	2500      	movs	r5, #0
   81256:	2201      	movs	r2, #1
   81258:	81a1      	strh	r1, [r4, #12]
   8125a:	60a5      	str	r5, [r4, #8]
   8125c:	6023      	str	r3, [r4, #0]
   8125e:	6123      	str	r3, [r4, #16]
   81260:	6162      	str	r2, [r4, #20]
   81262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81266:	2f00      	cmp	r7, #0
   81268:	bf08      	it	eq
   8126a:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   8126e:	4638      	mov	r0, r7
   81270:	f001 fc28 	bl	82ac4 <malloc>
   81274:	4605      	mov	r5, r0
   81276:	b128      	cbz	r0, 81284 <setvbuf+0xd4>
   81278:	89a1      	ldrh	r1, [r4, #12]
   8127a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   8127e:	b289      	uxth	r1, r1
   81280:	81a1      	strh	r1, [r4, #12]
   81282:	e7b9      	b.n	811f8 <setvbuf+0x48>
   81284:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81288:	f001 fc1c 	bl	82ac4 <malloc>
   8128c:	4605      	mov	r5, r0
   8128e:	b918      	cbnz	r0, 81298 <setvbuf+0xe8>
   81290:	89a1      	ldrh	r1, [r4, #12]
   81292:	f04f 30ff 	mov.w	r0, #4294967295
   81296:	e7d9      	b.n	8124c <setvbuf+0x9c>
   81298:	f44f 6780 	mov.w	r7, #1024	; 0x400
   8129c:	e7ec      	b.n	81278 <setvbuf+0xc8>
   8129e:	bf00      	nop
   812a0:	200705a0 	.word	0x200705a0
   812a4:	00082205 	.word	0x00082205

000812a8 <__sprint_r.part.0>:
   812a8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   812aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   812ae:	049c      	lsls	r4, r3, #18
   812b0:	460f      	mov	r7, r1
   812b2:	4692      	mov	sl, r2
   812b4:	d52b      	bpl.n	8130e <__sprint_r.part.0+0x66>
   812b6:	6893      	ldr	r3, [r2, #8]
   812b8:	6812      	ldr	r2, [r2, #0]
   812ba:	b333      	cbz	r3, 8130a <__sprint_r.part.0+0x62>
   812bc:	4680      	mov	r8, r0
   812be:	f102 0908 	add.w	r9, r2, #8
   812c2:	e919 0060 	ldmdb	r9, {r5, r6}
   812c6:	08b6      	lsrs	r6, r6, #2
   812c8:	d017      	beq.n	812fa <__sprint_r.part.0+0x52>
   812ca:	3d04      	subs	r5, #4
   812cc:	2400      	movs	r4, #0
   812ce:	e001      	b.n	812d4 <__sprint_r.part.0+0x2c>
   812d0:	42a6      	cmp	r6, r4
   812d2:	d010      	beq.n	812f6 <__sprint_r.part.0+0x4e>
   812d4:	4640      	mov	r0, r8
   812d6:	f855 1f04 	ldr.w	r1, [r5, #4]!
   812da:	463a      	mov	r2, r7
   812dc:	f001 f888 	bl	823f0 <_fputwc_r>
   812e0:	1c43      	adds	r3, r0, #1
   812e2:	f104 0401 	add.w	r4, r4, #1
   812e6:	d1f3      	bne.n	812d0 <__sprint_r.part.0+0x28>
   812e8:	2300      	movs	r3, #0
   812ea:	f8ca 3008 	str.w	r3, [sl, #8]
   812ee:	f8ca 3004 	str.w	r3, [sl, #4]
   812f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   812f6:	f8da 3008 	ldr.w	r3, [sl, #8]
   812fa:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   812fe:	f8ca 3008 	str.w	r3, [sl, #8]
   81302:	f109 0908 	add.w	r9, r9, #8
   81306:	2b00      	cmp	r3, #0
   81308:	d1db      	bne.n	812c2 <__sprint_r.part.0+0x1a>
   8130a:	2000      	movs	r0, #0
   8130c:	e7ec      	b.n	812e8 <__sprint_r.part.0+0x40>
   8130e:	f001 f9a7 	bl	82660 <__sfvwrite_r>
   81312:	2300      	movs	r3, #0
   81314:	f8ca 3008 	str.w	r3, [sl, #8]
   81318:	f8ca 3004 	str.w	r3, [sl, #4]
   8131c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00081320 <_vfiprintf_r>:
   81320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81324:	b0ab      	sub	sp, #172	; 0xac
   81326:	461c      	mov	r4, r3
   81328:	9100      	str	r1, [sp, #0]
   8132a:	4693      	mov	fp, r2
   8132c:	9304      	str	r3, [sp, #16]
   8132e:	9001      	str	r0, [sp, #4]
   81330:	b118      	cbz	r0, 8133a <_vfiprintf_r+0x1a>
   81332:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81334:	2b00      	cmp	r3, #0
   81336:	f000 80e3 	beq.w	81500 <_vfiprintf_r+0x1e0>
   8133a:	9b00      	ldr	r3, [sp, #0]
   8133c:	8999      	ldrh	r1, [r3, #12]
   8133e:	b28a      	uxth	r2, r1
   81340:	0490      	lsls	r0, r2, #18
   81342:	d408      	bmi.n	81356 <_vfiprintf_r+0x36>
   81344:	4618      	mov	r0, r3
   81346:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   81348:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   8134c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   81350:	8182      	strh	r2, [r0, #12]
   81352:	6643      	str	r3, [r0, #100]	; 0x64
   81354:	b292      	uxth	r2, r2
   81356:	0711      	lsls	r1, r2, #28
   81358:	f140 80b2 	bpl.w	814c0 <_vfiprintf_r+0x1a0>
   8135c:	9b00      	ldr	r3, [sp, #0]
   8135e:	691b      	ldr	r3, [r3, #16]
   81360:	2b00      	cmp	r3, #0
   81362:	f000 80ad 	beq.w	814c0 <_vfiprintf_r+0x1a0>
   81366:	f002 021a 	and.w	r2, r2, #26
   8136a:	2a0a      	cmp	r2, #10
   8136c:	f000 80b4 	beq.w	814d8 <_vfiprintf_r+0x1b8>
   81370:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   81374:	4654      	mov	r4, sl
   81376:	2300      	movs	r3, #0
   81378:	9309      	str	r3, [sp, #36]	; 0x24
   8137a:	9302      	str	r3, [sp, #8]
   8137c:	930f      	str	r3, [sp, #60]	; 0x3c
   8137e:	930e      	str	r3, [sp, #56]	; 0x38
   81380:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   81384:	f89b 3000 	ldrb.w	r3, [fp]
   81388:	2b00      	cmp	r3, #0
   8138a:	f000 84a3 	beq.w	81cd4 <_vfiprintf_r+0x9b4>
   8138e:	2b25      	cmp	r3, #37	; 0x25
   81390:	f000 84a0 	beq.w	81cd4 <_vfiprintf_r+0x9b4>
   81394:	465a      	mov	r2, fp
   81396:	e001      	b.n	8139c <_vfiprintf_r+0x7c>
   81398:	2b25      	cmp	r3, #37	; 0x25
   8139a:	d003      	beq.n	813a4 <_vfiprintf_r+0x84>
   8139c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   813a0:	2b00      	cmp	r3, #0
   813a2:	d1f9      	bne.n	81398 <_vfiprintf_r+0x78>
   813a4:	ebcb 0602 	rsb	r6, fp, r2
   813a8:	4615      	mov	r5, r2
   813aa:	b196      	cbz	r6, 813d2 <_vfiprintf_r+0xb2>
   813ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   813ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   813b0:	3301      	adds	r3, #1
   813b2:	4432      	add	r2, r6
   813b4:	2b07      	cmp	r3, #7
   813b6:	f8c4 b000 	str.w	fp, [r4]
   813ba:	6066      	str	r6, [r4, #4]
   813bc:	920f      	str	r2, [sp, #60]	; 0x3c
   813be:	930e      	str	r3, [sp, #56]	; 0x38
   813c0:	dd79      	ble.n	814b6 <_vfiprintf_r+0x196>
   813c2:	2a00      	cmp	r2, #0
   813c4:	f040 84ad 	bne.w	81d22 <_vfiprintf_r+0xa02>
   813c8:	4654      	mov	r4, sl
   813ca:	9b02      	ldr	r3, [sp, #8]
   813cc:	920e      	str	r2, [sp, #56]	; 0x38
   813ce:	4433      	add	r3, r6
   813d0:	9302      	str	r3, [sp, #8]
   813d2:	782b      	ldrb	r3, [r5, #0]
   813d4:	2b00      	cmp	r3, #0
   813d6:	f000 835f 	beq.w	81a98 <_vfiprintf_r+0x778>
   813da:	f04f 0300 	mov.w	r3, #0
   813de:	2100      	movs	r1, #0
   813e0:	f04f 3cff 	mov.w	ip, #4294967295
   813e4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   813e8:	1c68      	adds	r0, r5, #1
   813ea:	786b      	ldrb	r3, [r5, #1]
   813ec:	4688      	mov	r8, r1
   813ee:	460d      	mov	r5, r1
   813f0:	4666      	mov	r6, ip
   813f2:	f100 0b01 	add.w	fp, r0, #1
   813f6:	f1a3 0220 	sub.w	r2, r3, #32
   813fa:	2a58      	cmp	r2, #88	; 0x58
   813fc:	f200 82aa 	bhi.w	81954 <_vfiprintf_r+0x634>
   81400:	e8df f012 	tbh	[pc, r2, lsl #1]
   81404:	02a8029a 	.word	0x02a8029a
   81408:	02a202a8 	.word	0x02a202a8
   8140c:	02a802a8 	.word	0x02a802a8
   81410:	02a802a8 	.word	0x02a802a8
   81414:	02a802a8 	.word	0x02a802a8
   81418:	02600254 	.word	0x02600254
   8141c:	010d02a8 	.word	0x010d02a8
   81420:	02a8026c 	.word	0x02a8026c
   81424:	012f0129 	.word	0x012f0129
   81428:	012f012f 	.word	0x012f012f
   8142c:	012f012f 	.word	0x012f012f
   81430:	012f012f 	.word	0x012f012f
   81434:	012f012f 	.word	0x012f012f
   81438:	02a802a8 	.word	0x02a802a8
   8143c:	02a802a8 	.word	0x02a802a8
   81440:	02a802a8 	.word	0x02a802a8
   81444:	02a802a8 	.word	0x02a802a8
   81448:	02a802a8 	.word	0x02a802a8
   8144c:	02a8013d 	.word	0x02a8013d
   81450:	02a802a8 	.word	0x02a802a8
   81454:	02a802a8 	.word	0x02a802a8
   81458:	02a802a8 	.word	0x02a802a8
   8145c:	02a802a8 	.word	0x02a802a8
   81460:	017402a8 	.word	0x017402a8
   81464:	02a802a8 	.word	0x02a802a8
   81468:	02a802a8 	.word	0x02a802a8
   8146c:	018b02a8 	.word	0x018b02a8
   81470:	02a802a8 	.word	0x02a802a8
   81474:	02a801a3 	.word	0x02a801a3
   81478:	02a802a8 	.word	0x02a802a8
   8147c:	02a802a8 	.word	0x02a802a8
   81480:	02a802a8 	.word	0x02a802a8
   81484:	02a802a8 	.word	0x02a802a8
   81488:	01c702a8 	.word	0x01c702a8
   8148c:	02a801da 	.word	0x02a801da
   81490:	02a802a8 	.word	0x02a802a8
   81494:	01da0123 	.word	0x01da0123
   81498:	02a802a8 	.word	0x02a802a8
   8149c:	02a8024b 	.word	0x02a8024b
   814a0:	01130288 	.word	0x01130288
   814a4:	020701f4 	.word	0x020701f4
   814a8:	020d02a8 	.word	0x020d02a8
   814ac:	008102a8 	.word	0x008102a8
   814b0:	02a802a8 	.word	0x02a802a8
   814b4:	0232      	.short	0x0232
   814b6:	3408      	adds	r4, #8
   814b8:	9b02      	ldr	r3, [sp, #8]
   814ba:	4433      	add	r3, r6
   814bc:	9302      	str	r3, [sp, #8]
   814be:	e788      	b.n	813d2 <_vfiprintf_r+0xb2>
   814c0:	9801      	ldr	r0, [sp, #4]
   814c2:	9900      	ldr	r1, [sp, #0]
   814c4:	f000 fd72 	bl	81fac <__swsetup_r>
   814c8:	b9a8      	cbnz	r0, 814f6 <_vfiprintf_r+0x1d6>
   814ca:	9b00      	ldr	r3, [sp, #0]
   814cc:	899a      	ldrh	r2, [r3, #12]
   814ce:	f002 021a 	and.w	r2, r2, #26
   814d2:	2a0a      	cmp	r2, #10
   814d4:	f47f af4c 	bne.w	81370 <_vfiprintf_r+0x50>
   814d8:	9b00      	ldr	r3, [sp, #0]
   814da:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
   814de:	2b00      	cmp	r3, #0
   814e0:	f6ff af46 	blt.w	81370 <_vfiprintf_r+0x50>
   814e4:	9801      	ldr	r0, [sp, #4]
   814e6:	9900      	ldr	r1, [sp, #0]
   814e8:	465a      	mov	r2, fp
   814ea:	4623      	mov	r3, r4
   814ec:	f000 fd20 	bl	81f30 <__sbprintf>
   814f0:	b02b      	add	sp, #172	; 0xac
   814f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   814f6:	f04f 30ff 	mov.w	r0, #4294967295
   814fa:	b02b      	add	sp, #172	; 0xac
   814fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81500:	f000 fefe 	bl	82300 <__sinit>
   81504:	e719      	b.n	8133a <_vfiprintf_r+0x1a>
   81506:	f018 0f20 	tst.w	r8, #32
   8150a:	9503      	str	r5, [sp, #12]
   8150c:	46b4      	mov	ip, r6
   8150e:	f000 810c 	beq.w	8172a <_vfiprintf_r+0x40a>
   81512:	9b04      	ldr	r3, [sp, #16]
   81514:	3307      	adds	r3, #7
   81516:	f023 0307 	bic.w	r3, r3, #7
   8151a:	f103 0208 	add.w	r2, r3, #8
   8151e:	e9d3 6700 	ldrd	r6, r7, [r3]
   81522:	9204      	str	r2, [sp, #16]
   81524:	2301      	movs	r3, #1
   81526:	f04f 0200 	mov.w	r2, #0
   8152a:	46e1      	mov	r9, ip
   8152c:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   81530:	2500      	movs	r5, #0
   81532:	f1bc 0f00 	cmp.w	ip, #0
   81536:	bfa8      	it	ge
   81538:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   8153c:	ea56 0207 	orrs.w	r2, r6, r7
   81540:	f040 80c4 	bne.w	816cc <_vfiprintf_r+0x3ac>
   81544:	f1bc 0f00 	cmp.w	ip, #0
   81548:	f000 8380 	beq.w	81c4c <_vfiprintf_r+0x92c>
   8154c:	2b01      	cmp	r3, #1
   8154e:	f000 80c5 	beq.w	816dc <_vfiprintf_r+0x3bc>
   81552:	2b02      	cmp	r3, #2
   81554:	f000 8386 	beq.w	81c64 <_vfiprintf_r+0x944>
   81558:	4651      	mov	r1, sl
   8155a:	08f2      	lsrs	r2, r6, #3
   8155c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   81560:	08f8      	lsrs	r0, r7, #3
   81562:	f006 0307 	and.w	r3, r6, #7
   81566:	4607      	mov	r7, r0
   81568:	4616      	mov	r6, r2
   8156a:	3330      	adds	r3, #48	; 0x30
   8156c:	ea56 0207 	orrs.w	r2, r6, r7
   81570:	f801 3d01 	strb.w	r3, [r1, #-1]!
   81574:	d1f1      	bne.n	8155a <_vfiprintf_r+0x23a>
   81576:	f018 0f01 	tst.w	r8, #1
   8157a:	9107      	str	r1, [sp, #28]
   8157c:	f040 83fa 	bne.w	81d74 <_vfiprintf_r+0xa54>
   81580:	ebc1 090a 	rsb	r9, r1, sl
   81584:	45e1      	cmp	r9, ip
   81586:	464e      	mov	r6, r9
   81588:	bfb8      	it	lt
   8158a:	4666      	movlt	r6, ip
   8158c:	b105      	cbz	r5, 81590 <_vfiprintf_r+0x270>
   8158e:	3601      	adds	r6, #1
   81590:	f018 0302 	ands.w	r3, r8, #2
   81594:	9305      	str	r3, [sp, #20]
   81596:	bf18      	it	ne
   81598:	3602      	addne	r6, #2
   8159a:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   8159e:	9306      	str	r3, [sp, #24]
   815a0:	f040 81f9 	bne.w	81996 <_vfiprintf_r+0x676>
   815a4:	9b03      	ldr	r3, [sp, #12]
   815a6:	1b9d      	subs	r5, r3, r6
   815a8:	2d00      	cmp	r5, #0
   815aa:	f340 81f4 	ble.w	81996 <_vfiprintf_r+0x676>
   815ae:	2d10      	cmp	r5, #16
   815b0:	f340 848a 	ble.w	81ec8 <_vfiprintf_r+0xba8>
   815b4:	4620      	mov	r0, r4
   815b6:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   815ba:	4664      	mov	r4, ip
   815bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   815be:	4fc4      	ldr	r7, [pc, #784]	; (818d0 <_vfiprintf_r+0x5b0>)
   815c0:	2310      	movs	r3, #16
   815c2:	4671      	mov	r1, lr
   815c4:	4684      	mov	ip, r0
   815c6:	e007      	b.n	815d8 <_vfiprintf_r+0x2b8>
   815c8:	f101 0e02 	add.w	lr, r1, #2
   815cc:	4601      	mov	r1, r0
   815ce:	f10c 0c08 	add.w	ip, ip, #8
   815d2:	3d10      	subs	r5, #16
   815d4:	2d10      	cmp	r5, #16
   815d6:	dd13      	ble.n	81600 <_vfiprintf_r+0x2e0>
   815d8:	1c48      	adds	r0, r1, #1
   815da:	3210      	adds	r2, #16
   815dc:	2807      	cmp	r0, #7
   815de:	920f      	str	r2, [sp, #60]	; 0x3c
   815e0:	f8cc 7000 	str.w	r7, [ip]
   815e4:	f8cc 3004 	str.w	r3, [ip, #4]
   815e8:	900e      	str	r0, [sp, #56]	; 0x38
   815ea:	dded      	ble.n	815c8 <_vfiprintf_r+0x2a8>
   815ec:	2a00      	cmp	r2, #0
   815ee:	f040 81c2 	bne.w	81976 <_vfiprintf_r+0x656>
   815f2:	3d10      	subs	r5, #16
   815f4:	2d10      	cmp	r5, #16
   815f6:	4611      	mov	r1, r2
   815f8:	f04f 0e01 	mov.w	lr, #1
   815fc:	46d4      	mov	ip, sl
   815fe:	dceb      	bgt.n	815d8 <_vfiprintf_r+0x2b8>
   81600:	4663      	mov	r3, ip
   81602:	4671      	mov	r1, lr
   81604:	46a4      	mov	ip, r4
   81606:	461c      	mov	r4, r3
   81608:	442a      	add	r2, r5
   8160a:	2907      	cmp	r1, #7
   8160c:	920f      	str	r2, [sp, #60]	; 0x3c
   8160e:	6027      	str	r7, [r4, #0]
   81610:	6065      	str	r5, [r4, #4]
   81612:	910e      	str	r1, [sp, #56]	; 0x38
   81614:	f300 8346 	bgt.w	81ca4 <_vfiprintf_r+0x984>
   81618:	3408      	adds	r4, #8
   8161a:	1c48      	adds	r0, r1, #1
   8161c:	e1be      	b.n	8199c <_vfiprintf_r+0x67c>
   8161e:	4658      	mov	r0, fp
   81620:	f048 0804 	orr.w	r8, r8, #4
   81624:	f89b 3000 	ldrb.w	r3, [fp]
   81628:	e6e3      	b.n	813f2 <_vfiprintf_r+0xd2>
   8162a:	f018 0320 	ands.w	r3, r8, #32
   8162e:	9503      	str	r5, [sp, #12]
   81630:	46b4      	mov	ip, r6
   81632:	d062      	beq.n	816fa <_vfiprintf_r+0x3da>
   81634:	9b04      	ldr	r3, [sp, #16]
   81636:	3307      	adds	r3, #7
   81638:	f023 0307 	bic.w	r3, r3, #7
   8163c:	f103 0208 	add.w	r2, r3, #8
   81640:	e9d3 6700 	ldrd	r6, r7, [r3]
   81644:	9204      	str	r2, [sp, #16]
   81646:	2300      	movs	r3, #0
   81648:	e76d      	b.n	81526 <_vfiprintf_r+0x206>
   8164a:	f048 0840 	orr.w	r8, r8, #64	; 0x40
   8164e:	f89b 3000 	ldrb.w	r3, [fp]
   81652:	4658      	mov	r0, fp
   81654:	e6cd      	b.n	813f2 <_vfiprintf_r+0xd2>
   81656:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   8165a:	f89b 3000 	ldrb.w	r3, [fp]
   8165e:	4658      	mov	r0, fp
   81660:	e6c7      	b.n	813f2 <_vfiprintf_r+0xd2>
   81662:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81666:	2500      	movs	r5, #0
   81668:	f81b 3b01 	ldrb.w	r3, [fp], #1
   8166c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81670:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   81674:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   81678:	2a09      	cmp	r2, #9
   8167a:	d9f5      	bls.n	81668 <_vfiprintf_r+0x348>
   8167c:	e6bb      	b.n	813f6 <_vfiprintf_r+0xd6>
   8167e:	f048 0810 	orr.w	r8, r8, #16
   81682:	f018 0f20 	tst.w	r8, #32
   81686:	9503      	str	r5, [sp, #12]
   81688:	46b4      	mov	ip, r6
   8168a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   8168e:	f000 809b 	beq.w	817c8 <_vfiprintf_r+0x4a8>
   81692:	9904      	ldr	r1, [sp, #16]
   81694:	3107      	adds	r1, #7
   81696:	f021 0107 	bic.w	r1, r1, #7
   8169a:	e9d1 2300 	ldrd	r2, r3, [r1]
   8169e:	4616      	mov	r6, r2
   816a0:	461f      	mov	r7, r3
   816a2:	3108      	adds	r1, #8
   816a4:	9104      	str	r1, [sp, #16]
   816a6:	2a00      	cmp	r2, #0
   816a8:	f173 0300 	sbcs.w	r3, r3, #0
   816ac:	f2c0 83a4 	blt.w	81df8 <_vfiprintf_r+0xad8>
   816b0:	f1bc 0f00 	cmp.w	ip, #0
   816b4:	bfa8      	it	ge
   816b6:	f028 0880 	bicge.w	r8, r8, #128	; 0x80
   816ba:	ea56 0207 	orrs.w	r2, r6, r7
   816be:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   816c2:	46e1      	mov	r9, ip
   816c4:	f04f 0301 	mov.w	r3, #1
   816c8:	f43f af3c 	beq.w	81544 <_vfiprintf_r+0x224>
   816cc:	2b01      	cmp	r3, #1
   816ce:	f47f af40 	bne.w	81552 <_vfiprintf_r+0x232>
   816d2:	2f00      	cmp	r7, #0
   816d4:	bf08      	it	eq
   816d6:	2e0a      	cmpeq	r6, #10
   816d8:	f080 8332 	bcs.w	81d40 <_vfiprintf_r+0xa20>
   816dc:	ab2a      	add	r3, sp, #168	; 0xa8
   816de:	3630      	adds	r6, #48	; 0x30
   816e0:	f803 6d41 	strb.w	r6, [r3, #-65]!
   816e4:	ebc3 090a 	rsb	r9, r3, sl
   816e8:	9307      	str	r3, [sp, #28]
   816ea:	e74b      	b.n	81584 <_vfiprintf_r+0x264>
   816ec:	f048 0810 	orr.w	r8, r8, #16
   816f0:	f018 0320 	ands.w	r3, r8, #32
   816f4:	9503      	str	r5, [sp, #12]
   816f6:	46b4      	mov	ip, r6
   816f8:	d19c      	bne.n	81634 <_vfiprintf_r+0x314>
   816fa:	f018 0210 	ands.w	r2, r8, #16
   816fe:	f040 82f7 	bne.w	81cf0 <_vfiprintf_r+0x9d0>
   81702:	f018 0340 	ands.w	r3, r8, #64	; 0x40
   81706:	f000 82f3 	beq.w	81cf0 <_vfiprintf_r+0x9d0>
   8170a:	9904      	ldr	r1, [sp, #16]
   8170c:	4613      	mov	r3, r2
   8170e:	460a      	mov	r2, r1
   81710:	3204      	adds	r2, #4
   81712:	880e      	ldrh	r6, [r1, #0]
   81714:	2700      	movs	r7, #0
   81716:	9204      	str	r2, [sp, #16]
   81718:	e705      	b.n	81526 <_vfiprintf_r+0x206>
   8171a:	f048 0810 	orr.w	r8, r8, #16
   8171e:	f018 0f20 	tst.w	r8, #32
   81722:	9503      	str	r5, [sp, #12]
   81724:	46b4      	mov	ip, r6
   81726:	f47f aef4 	bne.w	81512 <_vfiprintf_r+0x1f2>
   8172a:	9a04      	ldr	r2, [sp, #16]
   8172c:	f018 0f10 	tst.w	r8, #16
   81730:	4613      	mov	r3, r2
   81732:	f040 82e4 	bne.w	81cfe <_vfiprintf_r+0x9de>
   81736:	f018 0f40 	tst.w	r8, #64	; 0x40
   8173a:	f000 82e0 	beq.w	81cfe <_vfiprintf_r+0x9de>
   8173e:	8816      	ldrh	r6, [r2, #0]
   81740:	3204      	adds	r2, #4
   81742:	2700      	movs	r7, #0
   81744:	2301      	movs	r3, #1
   81746:	9204      	str	r2, [sp, #16]
   81748:	e6ed      	b.n	81526 <_vfiprintf_r+0x206>
   8174a:	4a62      	ldr	r2, [pc, #392]	; (818d4 <_vfiprintf_r+0x5b4>)
   8174c:	f018 0f20 	tst.w	r8, #32
   81750:	9503      	str	r5, [sp, #12]
   81752:	46b4      	mov	ip, r6
   81754:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81758:	9209      	str	r2, [sp, #36]	; 0x24
   8175a:	f000 808f 	beq.w	8187c <_vfiprintf_r+0x55c>
   8175e:	9a04      	ldr	r2, [sp, #16]
   81760:	3207      	adds	r2, #7
   81762:	f022 0207 	bic.w	r2, r2, #7
   81766:	f102 0108 	add.w	r1, r2, #8
   8176a:	9104      	str	r1, [sp, #16]
   8176c:	e9d2 6700 	ldrd	r6, r7, [r2]
   81770:	f018 0f01 	tst.w	r8, #1
   81774:	f000 828f 	beq.w	81c96 <_vfiprintf_r+0x976>
   81778:	ea56 0207 	orrs.w	r2, r6, r7
   8177c:	f000 828b 	beq.w	81c96 <_vfiprintf_r+0x976>
   81780:	2230      	movs	r2, #48	; 0x30
   81782:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   81786:	f048 0802 	orr.w	r8, r8, #2
   8178a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   8178e:	2302      	movs	r3, #2
   81790:	e6c9      	b.n	81526 <_vfiprintf_r+0x206>
   81792:	9a04      	ldr	r2, [sp, #16]
   81794:	2601      	movs	r6, #1
   81796:	6813      	ldr	r3, [r2, #0]
   81798:	f04f 0100 	mov.w	r1, #0
   8179c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   817a0:	4613      	mov	r3, r2
   817a2:	46b1      	mov	r9, r6
   817a4:	3304      	adds	r3, #4
   817a6:	9304      	str	r3, [sp, #16]
   817a8:	ab10      	add	r3, sp, #64	; 0x40
   817aa:	9503      	str	r5, [sp, #12]
   817ac:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   817b0:	9307      	str	r3, [sp, #28]
   817b2:	f04f 0c00 	mov.w	ip, #0
   817b6:	e6eb      	b.n	81590 <_vfiprintf_r+0x270>
   817b8:	f018 0f20 	tst.w	r8, #32
   817bc:	9503      	str	r5, [sp, #12]
   817be:	46b4      	mov	ip, r6
   817c0:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   817c4:	f47f af65 	bne.w	81692 <_vfiprintf_r+0x372>
   817c8:	9a04      	ldr	r2, [sp, #16]
   817ca:	f018 0f10 	tst.w	r8, #16
   817ce:	4613      	mov	r3, r2
   817d0:	f040 82a0 	bne.w	81d14 <_vfiprintf_r+0x9f4>
   817d4:	f018 0f40 	tst.w	r8, #64	; 0x40
   817d8:	f000 829c 	beq.w	81d14 <_vfiprintf_r+0x9f4>
   817dc:	f9b2 6000 	ldrsh.w	r6, [r2]
   817e0:	3304      	adds	r3, #4
   817e2:	17f7      	asrs	r7, r6, #31
   817e4:	9304      	str	r3, [sp, #16]
   817e6:	4632      	mov	r2, r6
   817e8:	463b      	mov	r3, r7
   817ea:	e75c      	b.n	816a6 <_vfiprintf_r+0x386>
   817ec:	9904      	ldr	r1, [sp, #16]
   817ee:	2378      	movs	r3, #120	; 0x78
   817f0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   817f4:	4b38      	ldr	r3, [pc, #224]	; (818d8 <_vfiprintf_r+0x5b8>)
   817f6:	46b4      	mov	ip, r6
   817f8:	2230      	movs	r2, #48	; 0x30
   817fa:	680e      	ldr	r6, [r1, #0]
   817fc:	3104      	adds	r1, #4
   817fe:	9309      	str	r3, [sp, #36]	; 0x24
   81800:	9503      	str	r5, [sp, #12]
   81802:	f048 0802 	orr.w	r8, r8, #2
   81806:	9104      	str	r1, [sp, #16]
   81808:	2700      	movs	r7, #0
   8180a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   8180e:	2302      	movs	r3, #2
   81810:	e689      	b.n	81526 <_vfiprintf_r+0x206>
   81812:	f048 0820 	orr.w	r8, r8, #32
   81816:	f89b 3000 	ldrb.w	r3, [fp]
   8181a:	4658      	mov	r0, fp
   8181c:	e5e9      	b.n	813f2 <_vfiprintf_r+0xd2>
   8181e:	f04f 0100 	mov.w	r1, #0
   81822:	9a04      	ldr	r2, [sp, #16]
   81824:	9503      	str	r5, [sp, #12]
   81826:	6813      	ldr	r3, [r2, #0]
   81828:	46b4      	mov	ip, r6
   8182a:	9307      	str	r3, [sp, #28]
   8182c:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81830:	1d15      	adds	r5, r2, #4
   81832:	2b00      	cmp	r3, #0
   81834:	f000 834e 	beq.w	81ed4 <_vfiprintf_r+0xbb4>
   81838:	2e00      	cmp	r6, #0
   8183a:	f2c0 8329 	blt.w	81e90 <_vfiprintf_r+0xb70>
   8183e:	9e07      	ldr	r6, [sp, #28]
   81840:	4662      	mov	r2, ip
   81842:	4630      	mov	r0, r6
   81844:	2100      	movs	r1, #0
   81846:	f8cd c010 	str.w	ip, [sp, #16]
   8184a:	f001 fbc9 	bl	82fe0 <memchr>
   8184e:	f8dd c010 	ldr.w	ip, [sp, #16]
   81852:	2800      	cmp	r0, #0
   81854:	f000 834e 	beq.w	81ef4 <_vfiprintf_r+0xbd4>
   81858:	9504      	str	r5, [sp, #16]
   8185a:	ebc6 0900 	rsb	r9, r6, r0
   8185e:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   81862:	f04f 0c00 	mov.w	ip, #0
   81866:	e68d      	b.n	81584 <_vfiprintf_r+0x264>
   81868:	4a1b      	ldr	r2, [pc, #108]	; (818d8 <_vfiprintf_r+0x5b8>)
   8186a:	f018 0f20 	tst.w	r8, #32
   8186e:	9503      	str	r5, [sp, #12]
   81870:	46b4      	mov	ip, r6
   81872:	9209      	str	r2, [sp, #36]	; 0x24
   81874:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   81878:	f47f af71 	bne.w	8175e <_vfiprintf_r+0x43e>
   8187c:	9904      	ldr	r1, [sp, #16]
   8187e:	f018 0f10 	tst.w	r8, #16
   81882:	460a      	mov	r2, r1
   81884:	f040 8241 	bne.w	81d0a <_vfiprintf_r+0x9ea>
   81888:	f018 0f40 	tst.w	r8, #64	; 0x40
   8188c:	f000 823d 	beq.w	81d0a <_vfiprintf_r+0x9ea>
   81890:	3204      	adds	r2, #4
   81892:	880e      	ldrh	r6, [r1, #0]
   81894:	2700      	movs	r7, #0
   81896:	9204      	str	r2, [sp, #16]
   81898:	e76a      	b.n	81770 <_vfiprintf_r+0x450>
   8189a:	f89b 3000 	ldrb.w	r3, [fp]
   8189e:	2b6c      	cmp	r3, #108	; 0x6c
   818a0:	f000 82e9 	beq.w	81e76 <_vfiprintf_r+0xb56>
   818a4:	f048 0810 	orr.w	r8, r8, #16
   818a8:	4658      	mov	r0, fp
   818aa:	e5a2      	b.n	813f2 <_vfiprintf_r+0xd2>
   818ac:	9a04      	ldr	r2, [sp, #16]
   818ae:	4613      	mov	r3, r2
   818b0:	6815      	ldr	r5, [r2, #0]
   818b2:	3304      	adds	r3, #4
   818b4:	2d00      	cmp	r5, #0
   818b6:	f2c0 82e6 	blt.w	81e86 <_vfiprintf_r+0xb66>
   818ba:	9304      	str	r3, [sp, #16]
   818bc:	f89b 3000 	ldrb.w	r3, [fp]
   818c0:	4658      	mov	r0, fp
   818c2:	e596      	b.n	813f2 <_vfiprintf_r+0xd2>
   818c4:	f89b 3000 	ldrb.w	r3, [fp]
   818c8:	4658      	mov	r0, fp
   818ca:	212b      	movs	r1, #43	; 0x2b
   818cc:	e591      	b.n	813f2 <_vfiprintf_r+0xd2>
   818ce:	bf00      	nop
   818d0:	00084060 	.word	0x00084060
   818d4:	00084030 	.word	0x00084030
   818d8:	00084044 	.word	0x00084044
   818dc:	f89b 3000 	ldrb.w	r3, [fp]
   818e0:	f10b 0001 	add.w	r0, fp, #1
   818e4:	2b2a      	cmp	r3, #42	; 0x2a
   818e6:	f000 830f 	beq.w	81f08 <_vfiprintf_r+0xbe8>
   818ea:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   818ee:	2a09      	cmp	r2, #9
   818f0:	4683      	mov	fp, r0
   818f2:	f04f 0600 	mov.w	r6, #0
   818f6:	f63f ad7e 	bhi.w	813f6 <_vfiprintf_r+0xd6>
   818fa:	f81b 3b01 	ldrb.w	r3, [fp], #1
   818fe:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   81902:	eb02 0646 	add.w	r6, r2, r6, lsl #1
   81906:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8190a:	2a09      	cmp	r2, #9
   8190c:	d9f5      	bls.n	818fa <_vfiprintf_r+0x5da>
   8190e:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
   81912:	e570      	b.n	813f6 <_vfiprintf_r+0xd6>
   81914:	f018 0f20 	tst.w	r8, #32
   81918:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   8191c:	f000 8283 	beq.w	81e26 <_vfiprintf_r+0xb06>
   81920:	9a04      	ldr	r2, [sp, #16]
   81922:	4613      	mov	r3, r2
   81924:	3304      	adds	r3, #4
   81926:	9304      	str	r3, [sp, #16]
   81928:	9b02      	ldr	r3, [sp, #8]
   8192a:	6811      	ldr	r1, [r2, #0]
   8192c:	17df      	asrs	r7, r3, #31
   8192e:	461a      	mov	r2, r3
   81930:	463b      	mov	r3, r7
   81932:	e9c1 2300 	strd	r2, r3, [r1]
   81936:	e525      	b.n	81384 <_vfiprintf_r+0x64>
   81938:	4658      	mov	r0, fp
   8193a:	f89b 3000 	ldrb.w	r3, [fp]
   8193e:	2900      	cmp	r1, #0
   81940:	f47f ad57 	bne.w	813f2 <_vfiprintf_r+0xd2>
   81944:	2120      	movs	r1, #32
   81946:	e554      	b.n	813f2 <_vfiprintf_r+0xd2>
   81948:	f048 0801 	orr.w	r8, r8, #1
   8194c:	4658      	mov	r0, fp
   8194e:	f89b 3000 	ldrb.w	r3, [fp]
   81952:	e54e      	b.n	813f2 <_vfiprintf_r+0xd2>
   81954:	9503      	str	r5, [sp, #12]
   81956:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   8195a:	2b00      	cmp	r3, #0
   8195c:	f000 809c 	beq.w	81a98 <_vfiprintf_r+0x778>
   81960:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   81964:	f04f 0300 	mov.w	r3, #0
   81968:	2601      	movs	r6, #1
   8196a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   8196e:	ab10      	add	r3, sp, #64	; 0x40
   81970:	46b1      	mov	r9, r6
   81972:	9307      	str	r3, [sp, #28]
   81974:	e71d      	b.n	817b2 <_vfiprintf_r+0x492>
   81976:	9801      	ldr	r0, [sp, #4]
   81978:	9900      	ldr	r1, [sp, #0]
   8197a:	aa0d      	add	r2, sp, #52	; 0x34
   8197c:	9308      	str	r3, [sp, #32]
   8197e:	f7ff fc93 	bl	812a8 <__sprint_r.part.0>
   81982:	2800      	cmp	r0, #0
   81984:	f040 808f 	bne.w	81aa6 <_vfiprintf_r+0x786>
   81988:	990e      	ldr	r1, [sp, #56]	; 0x38
   8198a:	46d4      	mov	ip, sl
   8198c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8198e:	f101 0e01 	add.w	lr, r1, #1
   81992:	9b08      	ldr	r3, [sp, #32]
   81994:	e61d      	b.n	815d2 <_vfiprintf_r+0x2b2>
   81996:	990e      	ldr	r1, [sp, #56]	; 0x38
   81998:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8199a:	1c48      	adds	r0, r1, #1
   8199c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   819a0:	b16b      	cbz	r3, 819be <_vfiprintf_r+0x69e>
   819a2:	3201      	adds	r2, #1
   819a4:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
   819a8:	2101      	movs	r1, #1
   819aa:	2807      	cmp	r0, #7
   819ac:	920f      	str	r2, [sp, #60]	; 0x3c
   819ae:	900e      	str	r0, [sp, #56]	; 0x38
   819b0:	6023      	str	r3, [r4, #0]
   819b2:	6061      	str	r1, [r4, #4]
   819b4:	f300 8134 	bgt.w	81c20 <_vfiprintf_r+0x900>
   819b8:	4601      	mov	r1, r0
   819ba:	3408      	adds	r4, #8
   819bc:	3001      	adds	r0, #1
   819be:	9b05      	ldr	r3, [sp, #20]
   819c0:	b163      	cbz	r3, 819dc <_vfiprintf_r+0x6bc>
   819c2:	3202      	adds	r2, #2
   819c4:	a90c      	add	r1, sp, #48	; 0x30
   819c6:	2302      	movs	r3, #2
   819c8:	2807      	cmp	r0, #7
   819ca:	920f      	str	r2, [sp, #60]	; 0x3c
   819cc:	900e      	str	r0, [sp, #56]	; 0x38
   819ce:	e884 000a 	stmia.w	r4, {r1, r3}
   819d2:	f300 8134 	bgt.w	81c3e <_vfiprintf_r+0x91e>
   819d6:	4601      	mov	r1, r0
   819d8:	3408      	adds	r4, #8
   819da:	3001      	adds	r0, #1
   819dc:	9b06      	ldr	r3, [sp, #24]
   819de:	2b80      	cmp	r3, #128	; 0x80
   819e0:	f000 80d4 	beq.w	81b8c <_vfiprintf_r+0x86c>
   819e4:	ebc9 070c 	rsb	r7, r9, ip
   819e8:	2f00      	cmp	r7, #0
   819ea:	dd2b      	ble.n	81a44 <_vfiprintf_r+0x724>
   819ec:	2f10      	cmp	r7, #16
   819ee:	4dab      	ldr	r5, [pc, #684]	; (81c9c <_vfiprintf_r+0x97c>)
   819f0:	dd1f      	ble.n	81a32 <_vfiprintf_r+0x712>
   819f2:	46a6      	mov	lr, r4
   819f4:	2310      	movs	r3, #16
   819f6:	9c01      	ldr	r4, [sp, #4]
   819f8:	e007      	b.n	81a0a <_vfiprintf_r+0x6ea>
   819fa:	f101 0c02 	add.w	ip, r1, #2
   819fe:	4601      	mov	r1, r0
   81a00:	f10e 0e08 	add.w	lr, lr, #8
   81a04:	3f10      	subs	r7, #16
   81a06:	2f10      	cmp	r7, #16
   81a08:	dd11      	ble.n	81a2e <_vfiprintf_r+0x70e>
   81a0a:	1c48      	adds	r0, r1, #1
   81a0c:	3210      	adds	r2, #16
   81a0e:	2807      	cmp	r0, #7
   81a10:	920f      	str	r2, [sp, #60]	; 0x3c
   81a12:	f8ce 5000 	str.w	r5, [lr]
   81a16:	f8ce 3004 	str.w	r3, [lr, #4]
   81a1a:	900e      	str	r0, [sp, #56]	; 0x38
   81a1c:	dded      	ble.n	819fa <_vfiprintf_r+0x6da>
   81a1e:	bb6a      	cbnz	r2, 81a7c <_vfiprintf_r+0x75c>
   81a20:	3f10      	subs	r7, #16
   81a22:	2f10      	cmp	r7, #16
   81a24:	f04f 0c01 	mov.w	ip, #1
   81a28:	4611      	mov	r1, r2
   81a2a:	46d6      	mov	lr, sl
   81a2c:	dced      	bgt.n	81a0a <_vfiprintf_r+0x6ea>
   81a2e:	4674      	mov	r4, lr
   81a30:	4660      	mov	r0, ip
   81a32:	443a      	add	r2, r7
   81a34:	2807      	cmp	r0, #7
   81a36:	920f      	str	r2, [sp, #60]	; 0x3c
   81a38:	e884 00a0 	stmia.w	r4, {r5, r7}
   81a3c:	900e      	str	r0, [sp, #56]	; 0x38
   81a3e:	dc3b      	bgt.n	81ab8 <_vfiprintf_r+0x798>
   81a40:	3408      	adds	r4, #8
   81a42:	3001      	adds	r0, #1
   81a44:	eb02 0309 	add.w	r3, r2, r9
   81a48:	9a07      	ldr	r2, [sp, #28]
   81a4a:	2807      	cmp	r0, #7
   81a4c:	930f      	str	r3, [sp, #60]	; 0x3c
   81a4e:	e884 0204 	stmia.w	r4, {r2, r9}
   81a52:	900e      	str	r0, [sp, #56]	; 0x38
   81a54:	dd3d      	ble.n	81ad2 <_vfiprintf_r+0x7b2>
   81a56:	2b00      	cmp	r3, #0
   81a58:	f040 813f 	bne.w	81cda <_vfiprintf_r+0x9ba>
   81a5c:	f018 0f04 	tst.w	r8, #4
   81a60:	930e      	str	r3, [sp, #56]	; 0x38
   81a62:	f040 8130 	bne.w	81cc6 <_vfiprintf_r+0x9a6>
   81a66:	9b02      	ldr	r3, [sp, #8]
   81a68:	9a03      	ldr	r2, [sp, #12]
   81a6a:	4296      	cmp	r6, r2
   81a6c:	bfac      	ite	ge
   81a6e:	199b      	addge	r3, r3, r6
   81a70:	189b      	addlt	r3, r3, r2
   81a72:	9302      	str	r3, [sp, #8]
   81a74:	2300      	movs	r3, #0
   81a76:	930e      	str	r3, [sp, #56]	; 0x38
   81a78:	4654      	mov	r4, sl
   81a7a:	e483      	b.n	81384 <_vfiprintf_r+0x64>
   81a7c:	4620      	mov	r0, r4
   81a7e:	9900      	ldr	r1, [sp, #0]
   81a80:	aa0d      	add	r2, sp, #52	; 0x34
   81a82:	9305      	str	r3, [sp, #20]
   81a84:	f7ff fc10 	bl	812a8 <__sprint_r.part.0>
   81a88:	b968      	cbnz	r0, 81aa6 <_vfiprintf_r+0x786>
   81a8a:	990e      	ldr	r1, [sp, #56]	; 0x38
   81a8c:	46d6      	mov	lr, sl
   81a8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81a90:	f101 0c01 	add.w	ip, r1, #1
   81a94:	9b05      	ldr	r3, [sp, #20]
   81a96:	e7b5      	b.n	81a04 <_vfiprintf_r+0x6e4>
   81a98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81a9a:	b123      	cbz	r3, 81aa6 <_vfiprintf_r+0x786>
   81a9c:	9801      	ldr	r0, [sp, #4]
   81a9e:	9900      	ldr	r1, [sp, #0]
   81aa0:	aa0d      	add	r2, sp, #52	; 0x34
   81aa2:	f7ff fc01 	bl	812a8 <__sprint_r.part.0>
   81aa6:	9b00      	ldr	r3, [sp, #0]
   81aa8:	899b      	ldrh	r3, [r3, #12]
   81aaa:	065b      	lsls	r3, r3, #25
   81aac:	f53f ad23 	bmi.w	814f6 <_vfiprintf_r+0x1d6>
   81ab0:	9802      	ldr	r0, [sp, #8]
   81ab2:	b02b      	add	sp, #172	; 0xac
   81ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81ab8:	2a00      	cmp	r2, #0
   81aba:	f040 8190 	bne.w	81dde <_vfiprintf_r+0xabe>
   81abe:	464b      	mov	r3, r9
   81ac0:	4654      	mov	r4, sl
   81ac2:	9907      	ldr	r1, [sp, #28]
   81ac4:	2201      	movs	r2, #1
   81ac6:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
   81aca:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   81ace:	911a      	str	r1, [sp, #104]	; 0x68
   81ad0:	920e      	str	r2, [sp, #56]	; 0x38
   81ad2:	f104 0208 	add.w	r2, r4, #8
   81ad6:	f018 0f04 	tst.w	r8, #4
   81ada:	d039      	beq.n	81b50 <_vfiprintf_r+0x830>
   81adc:	9903      	ldr	r1, [sp, #12]
   81ade:	1b8d      	subs	r5, r1, r6
   81ae0:	2d00      	cmp	r5, #0
   81ae2:	dd35      	ble.n	81b50 <_vfiprintf_r+0x830>
   81ae4:	2d10      	cmp	r5, #16
   81ae6:	f340 8200 	ble.w	81eea <_vfiprintf_r+0xbca>
   81aea:	980e      	ldr	r0, [sp, #56]	; 0x38
   81aec:	4f6c      	ldr	r7, [pc, #432]	; (81ca0 <_vfiprintf_r+0x980>)
   81aee:	2410      	movs	r4, #16
   81af0:	f8dd 8004 	ldr.w	r8, [sp, #4]
   81af4:	f8dd 9000 	ldr.w	r9, [sp]
   81af8:	e006      	b.n	81b08 <_vfiprintf_r+0x7e8>
   81afa:	f100 0e02 	add.w	lr, r0, #2
   81afe:	4608      	mov	r0, r1
   81b00:	3208      	adds	r2, #8
   81b02:	3d10      	subs	r5, #16
   81b04:	2d10      	cmp	r5, #16
   81b06:	dd10      	ble.n	81b2a <_vfiprintf_r+0x80a>
   81b08:	1c41      	adds	r1, r0, #1
   81b0a:	3310      	adds	r3, #16
   81b0c:	2907      	cmp	r1, #7
   81b0e:	930f      	str	r3, [sp, #60]	; 0x3c
   81b10:	6017      	str	r7, [r2, #0]
   81b12:	6054      	str	r4, [r2, #4]
   81b14:	910e      	str	r1, [sp, #56]	; 0x38
   81b16:	ddf0      	ble.n	81afa <_vfiprintf_r+0x7da>
   81b18:	2b00      	cmp	r3, #0
   81b1a:	d12a      	bne.n	81b72 <_vfiprintf_r+0x852>
   81b1c:	3d10      	subs	r5, #16
   81b1e:	2d10      	cmp	r5, #16
   81b20:	f04f 0e01 	mov.w	lr, #1
   81b24:	4618      	mov	r0, r3
   81b26:	4652      	mov	r2, sl
   81b28:	dcee      	bgt.n	81b08 <_vfiprintf_r+0x7e8>
   81b2a:	442b      	add	r3, r5
   81b2c:	f1be 0f07 	cmp.w	lr, #7
   81b30:	930f      	str	r3, [sp, #60]	; 0x3c
   81b32:	6017      	str	r7, [r2, #0]
   81b34:	6055      	str	r5, [r2, #4]
   81b36:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   81b3a:	dd09      	ble.n	81b50 <_vfiprintf_r+0x830>
   81b3c:	2b00      	cmp	r3, #0
   81b3e:	d092      	beq.n	81a66 <_vfiprintf_r+0x746>
   81b40:	9801      	ldr	r0, [sp, #4]
   81b42:	9900      	ldr	r1, [sp, #0]
   81b44:	aa0d      	add	r2, sp, #52	; 0x34
   81b46:	f7ff fbaf 	bl	812a8 <__sprint_r.part.0>
   81b4a:	2800      	cmp	r0, #0
   81b4c:	d1ab      	bne.n	81aa6 <_vfiprintf_r+0x786>
   81b4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81b50:	9a02      	ldr	r2, [sp, #8]
   81b52:	9903      	ldr	r1, [sp, #12]
   81b54:	428e      	cmp	r6, r1
   81b56:	bfac      	ite	ge
   81b58:	1992      	addge	r2, r2, r6
   81b5a:	1852      	addlt	r2, r2, r1
   81b5c:	9202      	str	r2, [sp, #8]
   81b5e:	2b00      	cmp	r3, #0
   81b60:	d088      	beq.n	81a74 <_vfiprintf_r+0x754>
   81b62:	9801      	ldr	r0, [sp, #4]
   81b64:	9900      	ldr	r1, [sp, #0]
   81b66:	aa0d      	add	r2, sp, #52	; 0x34
   81b68:	f7ff fb9e 	bl	812a8 <__sprint_r.part.0>
   81b6c:	2800      	cmp	r0, #0
   81b6e:	d081      	beq.n	81a74 <_vfiprintf_r+0x754>
   81b70:	e799      	b.n	81aa6 <_vfiprintf_r+0x786>
   81b72:	4640      	mov	r0, r8
   81b74:	4649      	mov	r1, r9
   81b76:	aa0d      	add	r2, sp, #52	; 0x34
   81b78:	f7ff fb96 	bl	812a8 <__sprint_r.part.0>
   81b7c:	2800      	cmp	r0, #0
   81b7e:	d192      	bne.n	81aa6 <_vfiprintf_r+0x786>
   81b80:	980e      	ldr	r0, [sp, #56]	; 0x38
   81b82:	4652      	mov	r2, sl
   81b84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81b86:	f100 0e01 	add.w	lr, r0, #1
   81b8a:	e7ba      	b.n	81b02 <_vfiprintf_r+0x7e2>
   81b8c:	9b03      	ldr	r3, [sp, #12]
   81b8e:	1b9f      	subs	r7, r3, r6
   81b90:	2f00      	cmp	r7, #0
   81b92:	f77f af27 	ble.w	819e4 <_vfiprintf_r+0x6c4>
   81b96:	2f10      	cmp	r7, #16
   81b98:	f340 81b3 	ble.w	81f02 <_vfiprintf_r+0xbe2>
   81b9c:	4620      	mov	r0, r4
   81b9e:	4d3f      	ldr	r5, [pc, #252]	; (81c9c <_vfiprintf_r+0x97c>)
   81ba0:	4664      	mov	r4, ip
   81ba2:	2310      	movs	r3, #16
   81ba4:	4684      	mov	ip, r0
   81ba6:	e007      	b.n	81bb8 <_vfiprintf_r+0x898>
   81ba8:	f101 0e02 	add.w	lr, r1, #2
   81bac:	4601      	mov	r1, r0
   81bae:	f10c 0c08 	add.w	ip, ip, #8
   81bb2:	3f10      	subs	r7, #16
   81bb4:	2f10      	cmp	r7, #16
   81bb6:	dd11      	ble.n	81bdc <_vfiprintf_r+0x8bc>
   81bb8:	1c48      	adds	r0, r1, #1
   81bba:	3210      	adds	r2, #16
   81bbc:	2807      	cmp	r0, #7
   81bbe:	920f      	str	r2, [sp, #60]	; 0x3c
   81bc0:	f8cc 5000 	str.w	r5, [ip]
   81bc4:	f8cc 3004 	str.w	r3, [ip, #4]
   81bc8:	900e      	str	r0, [sp, #56]	; 0x38
   81bca:	dded      	ble.n	81ba8 <_vfiprintf_r+0x888>
   81bcc:	b9c2      	cbnz	r2, 81c00 <_vfiprintf_r+0x8e0>
   81bce:	3f10      	subs	r7, #16
   81bd0:	2f10      	cmp	r7, #16
   81bd2:	f04f 0e01 	mov.w	lr, #1
   81bd6:	4611      	mov	r1, r2
   81bd8:	46d4      	mov	ip, sl
   81bda:	dced      	bgt.n	81bb8 <_vfiprintf_r+0x898>
   81bdc:	4663      	mov	r3, ip
   81bde:	46a4      	mov	ip, r4
   81be0:	461c      	mov	r4, r3
   81be2:	443a      	add	r2, r7
   81be4:	f1be 0f07 	cmp.w	lr, #7
   81be8:	920f      	str	r2, [sp, #60]	; 0x3c
   81bea:	e884 00a0 	stmia.w	r4, {r5, r7}
   81bee:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   81bf2:	f300 80ee 	bgt.w	81dd2 <_vfiprintf_r+0xab2>
   81bf6:	3408      	adds	r4, #8
   81bf8:	f10e 0001 	add.w	r0, lr, #1
   81bfc:	4671      	mov	r1, lr
   81bfe:	e6f1      	b.n	819e4 <_vfiprintf_r+0x6c4>
   81c00:	9801      	ldr	r0, [sp, #4]
   81c02:	9900      	ldr	r1, [sp, #0]
   81c04:	aa0d      	add	r2, sp, #52	; 0x34
   81c06:	9305      	str	r3, [sp, #20]
   81c08:	f7ff fb4e 	bl	812a8 <__sprint_r.part.0>
   81c0c:	2800      	cmp	r0, #0
   81c0e:	f47f af4a 	bne.w	81aa6 <_vfiprintf_r+0x786>
   81c12:	990e      	ldr	r1, [sp, #56]	; 0x38
   81c14:	46d4      	mov	ip, sl
   81c16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81c18:	f101 0e01 	add.w	lr, r1, #1
   81c1c:	9b05      	ldr	r3, [sp, #20]
   81c1e:	e7c8      	b.n	81bb2 <_vfiprintf_r+0x892>
   81c20:	2a00      	cmp	r2, #0
   81c22:	f040 80c5 	bne.w	81db0 <_vfiprintf_r+0xa90>
   81c26:	9b05      	ldr	r3, [sp, #20]
   81c28:	2b00      	cmp	r3, #0
   81c2a:	f000 8085 	beq.w	81d38 <_vfiprintf_r+0xa18>
   81c2e:	aa0c      	add	r2, sp, #48	; 0x30
   81c30:	2302      	movs	r3, #2
   81c32:	921a      	str	r2, [sp, #104]	; 0x68
   81c34:	4608      	mov	r0, r1
   81c36:	931b      	str	r3, [sp, #108]	; 0x6c
   81c38:	461a      	mov	r2, r3
   81c3a:	4654      	mov	r4, sl
   81c3c:	e6cb      	b.n	819d6 <_vfiprintf_r+0x6b6>
   81c3e:	2a00      	cmp	r2, #0
   81c40:	f040 80a5 	bne.w	81d8e <_vfiprintf_r+0xa6e>
   81c44:	2001      	movs	r0, #1
   81c46:	4611      	mov	r1, r2
   81c48:	4654      	mov	r4, sl
   81c4a:	e6c7      	b.n	819dc <_vfiprintf_r+0x6bc>
   81c4c:	bb03      	cbnz	r3, 81c90 <_vfiprintf_r+0x970>
   81c4e:	f018 0f01 	tst.w	r8, #1
   81c52:	d01d      	beq.n	81c90 <_vfiprintf_r+0x970>
   81c54:	ab2a      	add	r3, sp, #168	; 0xa8
   81c56:	2230      	movs	r2, #48	; 0x30
   81c58:	f803 2d41 	strb.w	r2, [r3, #-65]!
   81c5c:	ebc3 090a 	rsb	r9, r3, sl
   81c60:	9307      	str	r3, [sp, #28]
   81c62:	e48f      	b.n	81584 <_vfiprintf_r+0x264>
   81c64:	46d1      	mov	r9, sl
   81c66:	9809      	ldr	r0, [sp, #36]	; 0x24
   81c68:	0933      	lsrs	r3, r6, #4
   81c6a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   81c6e:	0939      	lsrs	r1, r7, #4
   81c70:	f006 020f 	and.w	r2, r6, #15
   81c74:	460f      	mov	r7, r1
   81c76:	461e      	mov	r6, r3
   81c78:	5c83      	ldrb	r3, [r0, r2]
   81c7a:	f809 3d01 	strb.w	r3, [r9, #-1]!
   81c7e:	ea56 0307 	orrs.w	r3, r6, r7
   81c82:	d1f1      	bne.n	81c68 <_vfiprintf_r+0x948>
   81c84:	464b      	mov	r3, r9
   81c86:	f8cd 901c 	str.w	r9, [sp, #28]
   81c8a:	ebc3 090a 	rsb	r9, r3, sl
   81c8e:	e479      	b.n	81584 <_vfiprintf_r+0x264>
   81c90:	f8cd a01c 	str.w	sl, [sp, #28]
   81c94:	e476      	b.n	81584 <_vfiprintf_r+0x264>
   81c96:	2302      	movs	r3, #2
   81c98:	e445      	b.n	81526 <_vfiprintf_r+0x206>
   81c9a:	bf00      	nop
   81c9c:	00084020 	.word	0x00084020
   81ca0:	00084060 	.word	0x00084060
   81ca4:	2a00      	cmp	r2, #0
   81ca6:	f040 80d5 	bne.w	81e54 <_vfiprintf_r+0xb34>
   81caa:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   81cae:	2b00      	cmp	r3, #0
   81cb0:	f000 80ac 	beq.w	81e0c <_vfiprintf_r+0xaec>
   81cb4:	2301      	movs	r3, #1
   81cb6:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   81cba:	4618      	mov	r0, r3
   81cbc:	931b      	str	r3, [sp, #108]	; 0x6c
   81cbe:	461a      	mov	r2, r3
   81cc0:	911a      	str	r1, [sp, #104]	; 0x68
   81cc2:	4654      	mov	r4, sl
   81cc4:	e678      	b.n	819b8 <_vfiprintf_r+0x698>
   81cc6:	9a03      	ldr	r2, [sp, #12]
   81cc8:	1b95      	subs	r5, r2, r6
   81cca:	2d00      	cmp	r5, #0
   81ccc:	4652      	mov	r2, sl
   81cce:	f73f af09 	bgt.w	81ae4 <_vfiprintf_r+0x7c4>
   81cd2:	e6c8      	b.n	81a66 <_vfiprintf_r+0x746>
   81cd4:	465d      	mov	r5, fp
   81cd6:	f7ff bb7c 	b.w	813d2 <_vfiprintf_r+0xb2>
   81cda:	9801      	ldr	r0, [sp, #4]
   81cdc:	9900      	ldr	r1, [sp, #0]
   81cde:	aa0d      	add	r2, sp, #52	; 0x34
   81ce0:	f7ff fae2 	bl	812a8 <__sprint_r.part.0>
   81ce4:	2800      	cmp	r0, #0
   81ce6:	f47f aede 	bne.w	81aa6 <_vfiprintf_r+0x786>
   81cea:	4652      	mov	r2, sl
   81cec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   81cee:	e6f2      	b.n	81ad6 <_vfiprintf_r+0x7b6>
   81cf0:	9904      	ldr	r1, [sp, #16]
   81cf2:	2700      	movs	r7, #0
   81cf4:	460a      	mov	r2, r1
   81cf6:	3204      	adds	r2, #4
   81cf8:	680e      	ldr	r6, [r1, #0]
   81cfa:	9204      	str	r2, [sp, #16]
   81cfc:	e413      	b.n	81526 <_vfiprintf_r+0x206>
   81cfe:	3204      	adds	r2, #4
   81d00:	681e      	ldr	r6, [r3, #0]
   81d02:	2700      	movs	r7, #0
   81d04:	2301      	movs	r3, #1
   81d06:	9204      	str	r2, [sp, #16]
   81d08:	e40d      	b.n	81526 <_vfiprintf_r+0x206>
   81d0a:	6816      	ldr	r6, [r2, #0]
   81d0c:	3204      	adds	r2, #4
   81d0e:	9204      	str	r2, [sp, #16]
   81d10:	2700      	movs	r7, #0
   81d12:	e52d      	b.n	81770 <_vfiprintf_r+0x450>
   81d14:	681e      	ldr	r6, [r3, #0]
   81d16:	3304      	adds	r3, #4
   81d18:	17f7      	asrs	r7, r6, #31
   81d1a:	9304      	str	r3, [sp, #16]
   81d1c:	4632      	mov	r2, r6
   81d1e:	463b      	mov	r3, r7
   81d20:	e4c1      	b.n	816a6 <_vfiprintf_r+0x386>
   81d22:	9801      	ldr	r0, [sp, #4]
   81d24:	9900      	ldr	r1, [sp, #0]
   81d26:	aa0d      	add	r2, sp, #52	; 0x34
   81d28:	f7ff fabe 	bl	812a8 <__sprint_r.part.0>
   81d2c:	2800      	cmp	r0, #0
   81d2e:	f47f aeba 	bne.w	81aa6 <_vfiprintf_r+0x786>
   81d32:	4654      	mov	r4, sl
   81d34:	f7ff bbc0 	b.w	814b8 <_vfiprintf_r+0x198>
   81d38:	4608      	mov	r0, r1
   81d3a:	4654      	mov	r4, sl
   81d3c:	4611      	mov	r1, r2
   81d3e:	e64d      	b.n	819dc <_vfiprintf_r+0x6bc>
   81d40:	46d1      	mov	r9, sl
   81d42:	f8cd c014 	str.w	ip, [sp, #20]
   81d46:	4630      	mov	r0, r6
   81d48:	4639      	mov	r1, r7
   81d4a:	220a      	movs	r2, #10
   81d4c:	2300      	movs	r3, #0
   81d4e:	f001 fe75 	bl	83a3c <__aeabi_uldivmod>
   81d52:	3230      	adds	r2, #48	; 0x30
   81d54:	4630      	mov	r0, r6
   81d56:	4639      	mov	r1, r7
   81d58:	f809 2d01 	strb.w	r2, [r9, #-1]!
   81d5c:	2300      	movs	r3, #0
   81d5e:	220a      	movs	r2, #10
   81d60:	f001 fe6c 	bl	83a3c <__aeabi_uldivmod>
   81d64:	4606      	mov	r6, r0
   81d66:	460f      	mov	r7, r1
   81d68:	ea56 0307 	orrs.w	r3, r6, r7
   81d6c:	d1eb      	bne.n	81d46 <_vfiprintf_r+0xa26>
   81d6e:	f8dd c014 	ldr.w	ip, [sp, #20]
   81d72:	e787      	b.n	81c84 <_vfiprintf_r+0x964>
   81d74:	2b30      	cmp	r3, #48	; 0x30
   81d76:	9b07      	ldr	r3, [sp, #28]
   81d78:	d087      	beq.n	81c8a <_vfiprintf_r+0x96a>
   81d7a:	3b01      	subs	r3, #1
   81d7c:	461a      	mov	r2, r3
   81d7e:	9307      	str	r3, [sp, #28]
   81d80:	2330      	movs	r3, #48	; 0x30
   81d82:	ebc2 090a 	rsb	r9, r2, sl
   81d86:	f801 3c01 	strb.w	r3, [r1, #-1]
   81d8a:	f7ff bbfb 	b.w	81584 <_vfiprintf_r+0x264>
   81d8e:	9801      	ldr	r0, [sp, #4]
   81d90:	9900      	ldr	r1, [sp, #0]
   81d92:	aa0d      	add	r2, sp, #52	; 0x34
   81d94:	f8cd c014 	str.w	ip, [sp, #20]
   81d98:	f7ff fa86 	bl	812a8 <__sprint_r.part.0>
   81d9c:	2800      	cmp	r0, #0
   81d9e:	f47f ae82 	bne.w	81aa6 <_vfiprintf_r+0x786>
   81da2:	990e      	ldr	r1, [sp, #56]	; 0x38
   81da4:	4654      	mov	r4, sl
   81da6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81da8:	1c48      	adds	r0, r1, #1
   81daa:	f8dd c014 	ldr.w	ip, [sp, #20]
   81dae:	e615      	b.n	819dc <_vfiprintf_r+0x6bc>
   81db0:	9801      	ldr	r0, [sp, #4]
   81db2:	9900      	ldr	r1, [sp, #0]
   81db4:	aa0d      	add	r2, sp, #52	; 0x34
   81db6:	f8cd c020 	str.w	ip, [sp, #32]
   81dba:	f7ff fa75 	bl	812a8 <__sprint_r.part.0>
   81dbe:	2800      	cmp	r0, #0
   81dc0:	f47f ae71 	bne.w	81aa6 <_vfiprintf_r+0x786>
   81dc4:	990e      	ldr	r1, [sp, #56]	; 0x38
   81dc6:	4654      	mov	r4, sl
   81dc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81dca:	1c48      	adds	r0, r1, #1
   81dcc:	f8dd c020 	ldr.w	ip, [sp, #32]
   81dd0:	e5f5      	b.n	819be <_vfiprintf_r+0x69e>
   81dd2:	2a00      	cmp	r2, #0
   81dd4:	d167      	bne.n	81ea6 <_vfiprintf_r+0xb86>
   81dd6:	2001      	movs	r0, #1
   81dd8:	4611      	mov	r1, r2
   81dda:	4654      	mov	r4, sl
   81ddc:	e602      	b.n	819e4 <_vfiprintf_r+0x6c4>
   81dde:	9801      	ldr	r0, [sp, #4]
   81de0:	9900      	ldr	r1, [sp, #0]
   81de2:	aa0d      	add	r2, sp, #52	; 0x34
   81de4:	f7ff fa60 	bl	812a8 <__sprint_r.part.0>
   81de8:	2800      	cmp	r0, #0
   81dea:	f47f ae5c 	bne.w	81aa6 <_vfiprintf_r+0x786>
   81dee:	980e      	ldr	r0, [sp, #56]	; 0x38
   81df0:	4654      	mov	r4, sl
   81df2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81df4:	3001      	adds	r0, #1
   81df6:	e625      	b.n	81a44 <_vfiprintf_r+0x724>
   81df8:	252d      	movs	r5, #45	; 0x2d
   81dfa:	4276      	negs	r6, r6
   81dfc:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   81e00:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
   81e04:	46e1      	mov	r9, ip
   81e06:	2301      	movs	r3, #1
   81e08:	f7ff bb93 	b.w	81532 <_vfiprintf_r+0x212>
   81e0c:	9b05      	ldr	r3, [sp, #20]
   81e0e:	4611      	mov	r1, r2
   81e10:	2001      	movs	r0, #1
   81e12:	4654      	mov	r4, sl
   81e14:	2b00      	cmp	r3, #0
   81e16:	f43f ade5 	beq.w	819e4 <_vfiprintf_r+0x6c4>
   81e1a:	aa0c      	add	r2, sp, #48	; 0x30
   81e1c:	2302      	movs	r3, #2
   81e1e:	e88a 000c 	stmia.w	sl, {r2, r3}
   81e22:	461a      	mov	r2, r3
   81e24:	e5d7      	b.n	819d6 <_vfiprintf_r+0x6b6>
   81e26:	f018 0f10 	tst.w	r8, #16
   81e2a:	d10b      	bne.n	81e44 <_vfiprintf_r+0xb24>
   81e2c:	f018 0f40 	tst.w	r8, #64	; 0x40
   81e30:	d008      	beq.n	81e44 <_vfiprintf_r+0xb24>
   81e32:	9a04      	ldr	r2, [sp, #16]
   81e34:	6813      	ldr	r3, [r2, #0]
   81e36:	3204      	adds	r2, #4
   81e38:	9204      	str	r2, [sp, #16]
   81e3a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   81e3e:	801a      	strh	r2, [r3, #0]
   81e40:	f7ff baa0 	b.w	81384 <_vfiprintf_r+0x64>
   81e44:	9a04      	ldr	r2, [sp, #16]
   81e46:	6813      	ldr	r3, [r2, #0]
   81e48:	3204      	adds	r2, #4
   81e4a:	9204      	str	r2, [sp, #16]
   81e4c:	9a02      	ldr	r2, [sp, #8]
   81e4e:	601a      	str	r2, [r3, #0]
   81e50:	f7ff ba98 	b.w	81384 <_vfiprintf_r+0x64>
   81e54:	9801      	ldr	r0, [sp, #4]
   81e56:	9900      	ldr	r1, [sp, #0]
   81e58:	aa0d      	add	r2, sp, #52	; 0x34
   81e5a:	f8cd c020 	str.w	ip, [sp, #32]
   81e5e:	f7ff fa23 	bl	812a8 <__sprint_r.part.0>
   81e62:	2800      	cmp	r0, #0
   81e64:	f47f ae1f 	bne.w	81aa6 <_vfiprintf_r+0x786>
   81e68:	990e      	ldr	r1, [sp, #56]	; 0x38
   81e6a:	4654      	mov	r4, sl
   81e6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81e6e:	1c48      	adds	r0, r1, #1
   81e70:	f8dd c020 	ldr.w	ip, [sp, #32]
   81e74:	e592      	b.n	8199c <_vfiprintf_r+0x67c>
   81e76:	f048 0820 	orr.w	r8, r8, #32
   81e7a:	f10b 0001 	add.w	r0, fp, #1
   81e7e:	f89b 3001 	ldrb.w	r3, [fp, #1]
   81e82:	f7ff bab6 	b.w	813f2 <_vfiprintf_r+0xd2>
   81e86:	426d      	negs	r5, r5
   81e88:	9304      	str	r3, [sp, #16]
   81e8a:	4658      	mov	r0, fp
   81e8c:	f7ff bbc8 	b.w	81620 <_vfiprintf_r+0x300>
   81e90:	9807      	ldr	r0, [sp, #28]
   81e92:	9504      	str	r5, [sp, #16]
   81e94:	f001 fc10 	bl	836b8 <strlen>
   81e98:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   81e9c:	4681      	mov	r9, r0
   81e9e:	f04f 0c00 	mov.w	ip, #0
   81ea2:	f7ff bb6f 	b.w	81584 <_vfiprintf_r+0x264>
   81ea6:	9801      	ldr	r0, [sp, #4]
   81ea8:	9900      	ldr	r1, [sp, #0]
   81eaa:	aa0d      	add	r2, sp, #52	; 0x34
   81eac:	f8cd c014 	str.w	ip, [sp, #20]
   81eb0:	f7ff f9fa 	bl	812a8 <__sprint_r.part.0>
   81eb4:	2800      	cmp	r0, #0
   81eb6:	f47f adf6 	bne.w	81aa6 <_vfiprintf_r+0x786>
   81eba:	990e      	ldr	r1, [sp, #56]	; 0x38
   81ebc:	4654      	mov	r4, sl
   81ebe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81ec0:	1c48      	adds	r0, r1, #1
   81ec2:	f8dd c014 	ldr.w	ip, [sp, #20]
   81ec6:	e58d      	b.n	819e4 <_vfiprintf_r+0x6c4>
   81ec8:	990e      	ldr	r1, [sp, #56]	; 0x38
   81eca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   81ecc:	3101      	adds	r1, #1
   81ece:	4f15      	ldr	r7, [pc, #84]	; (81f24 <_vfiprintf_r+0xc04>)
   81ed0:	f7ff bb9a 	b.w	81608 <_vfiprintf_r+0x2e8>
   81ed4:	2e06      	cmp	r6, #6
   81ed6:	4b14      	ldr	r3, [pc, #80]	; (81f28 <_vfiprintf_r+0xc08>)
   81ed8:	bf28      	it	cs
   81eda:	f04f 0c06 	movcs.w	ip, #6
   81ede:	46e1      	mov	r9, ip
   81ee0:	9504      	str	r5, [sp, #16]
   81ee2:	ea2c 76ec 	bic.w	r6, ip, ip, asr #31
   81ee6:	9307      	str	r3, [sp, #28]
   81ee8:	e463      	b.n	817b2 <_vfiprintf_r+0x492>
   81eea:	990e      	ldr	r1, [sp, #56]	; 0x38
   81eec:	4f0d      	ldr	r7, [pc, #52]	; (81f24 <_vfiprintf_r+0xc04>)
   81eee:	f101 0e01 	add.w	lr, r1, #1
   81ef2:	e61a      	b.n	81b2a <_vfiprintf_r+0x80a>
   81ef4:	46e1      	mov	r9, ip
   81ef6:	9504      	str	r5, [sp, #16]
   81ef8:	4684      	mov	ip, r0
   81efa:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
   81efe:	f7ff bb41 	b.w	81584 <_vfiprintf_r+0x264>
   81f02:	4686      	mov	lr, r0
   81f04:	4d09      	ldr	r5, [pc, #36]	; (81f2c <_vfiprintf_r+0xc0c>)
   81f06:	e66c      	b.n	81be2 <_vfiprintf_r+0x8c2>
   81f08:	9a04      	ldr	r2, [sp, #16]
   81f0a:	f89b 3001 	ldrb.w	r3, [fp, #1]
   81f0e:	6816      	ldr	r6, [r2, #0]
   81f10:	3204      	adds	r2, #4
   81f12:	2e00      	cmp	r6, #0
   81f14:	9204      	str	r2, [sp, #16]
   81f16:	f6bf aa6c 	bge.w	813f2 <_vfiprintf_r+0xd2>
   81f1a:	f04f 36ff 	mov.w	r6, #4294967295
   81f1e:	f7ff ba68 	b.w	813f2 <_vfiprintf_r+0xd2>
   81f22:	bf00      	nop
   81f24:	00084060 	.word	0x00084060
   81f28:	00084058 	.word	0x00084058
   81f2c:	00084020 	.word	0x00084020

00081f30 <__sbprintf>:
   81f30:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
   81f34:	4688      	mov	r8, r1
   81f36:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   81f38:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   81f3c:	9719      	str	r7, [sp, #100]	; 0x64
   81f3e:	f8d8 701c 	ldr.w	r7, [r8, #28]
   81f42:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   81f46:	f8b1 a00e 	ldrh.w	sl, [r1, #14]
   81f4a:	9707      	str	r7, [sp, #28]
   81f4c:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   81f50:	ac1a      	add	r4, sp, #104	; 0x68
   81f52:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81f56:	f02e 0e02 	bic.w	lr, lr, #2
   81f5a:	2600      	movs	r6, #0
   81f5c:	4669      	mov	r1, sp
   81f5e:	9400      	str	r4, [sp, #0]
   81f60:	9404      	str	r4, [sp, #16]
   81f62:	9502      	str	r5, [sp, #8]
   81f64:	9505      	str	r5, [sp, #20]
   81f66:	f8ad e00c 	strh.w	lr, [sp, #12]
   81f6a:	f8ad a00e 	strh.w	sl, [sp, #14]
   81f6e:	9709      	str	r7, [sp, #36]	; 0x24
   81f70:	9606      	str	r6, [sp, #24]
   81f72:	4605      	mov	r5, r0
   81f74:	f7ff f9d4 	bl	81320 <_vfiprintf_r>
   81f78:	1e04      	subs	r4, r0, #0
   81f7a:	db07      	blt.n	81f8c <__sbprintf+0x5c>
   81f7c:	4628      	mov	r0, r5
   81f7e:	4669      	mov	r1, sp
   81f80:	f000 f92a 	bl	821d8 <_fflush_r>
   81f84:	42b0      	cmp	r0, r6
   81f86:	bf18      	it	ne
   81f88:	f04f 34ff 	movne.w	r4, #4294967295
   81f8c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81f90:	065b      	lsls	r3, r3, #25
   81f92:	d505      	bpl.n	81fa0 <__sbprintf+0x70>
   81f94:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   81f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81f9c:	f8a8 300c 	strh.w	r3, [r8, #12]
   81fa0:	4620      	mov	r0, r4
   81fa2:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   81fa6:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
   81faa:	bf00      	nop

00081fac <__swsetup_r>:
   81fac:	b538      	push	{r3, r4, r5, lr}
   81fae:	4b2f      	ldr	r3, [pc, #188]	; (8206c <__swsetup_r+0xc0>)
   81fb0:	4605      	mov	r5, r0
   81fb2:	6818      	ldr	r0, [r3, #0]
   81fb4:	460c      	mov	r4, r1
   81fb6:	b110      	cbz	r0, 81fbe <__swsetup_r+0x12>
   81fb8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81fba:	2b00      	cmp	r3, #0
   81fbc:	d036      	beq.n	8202c <__swsetup_r+0x80>
   81fbe:	89a2      	ldrh	r2, [r4, #12]
   81fc0:	b293      	uxth	r3, r2
   81fc2:	0718      	lsls	r0, r3, #28
   81fc4:	d50c      	bpl.n	81fe0 <__swsetup_r+0x34>
   81fc6:	6920      	ldr	r0, [r4, #16]
   81fc8:	b1a8      	cbz	r0, 81ff6 <__swsetup_r+0x4a>
   81fca:	f013 0201 	ands.w	r2, r3, #1
   81fce:	d01e      	beq.n	8200e <__swsetup_r+0x62>
   81fd0:	6963      	ldr	r3, [r4, #20]
   81fd2:	2200      	movs	r2, #0
   81fd4:	425b      	negs	r3, r3
   81fd6:	61a3      	str	r3, [r4, #24]
   81fd8:	60a2      	str	r2, [r4, #8]
   81fda:	b1f0      	cbz	r0, 8201a <__swsetup_r+0x6e>
   81fdc:	2000      	movs	r0, #0
   81fde:	bd38      	pop	{r3, r4, r5, pc}
   81fe0:	06d9      	lsls	r1, r3, #27
   81fe2:	d53a      	bpl.n	8205a <__swsetup_r+0xae>
   81fe4:	0758      	lsls	r0, r3, #29
   81fe6:	d424      	bmi.n	82032 <__swsetup_r+0x86>
   81fe8:	6920      	ldr	r0, [r4, #16]
   81fea:	f042 0308 	orr.w	r3, r2, #8
   81fee:	81a3      	strh	r3, [r4, #12]
   81ff0:	b29b      	uxth	r3, r3
   81ff2:	2800      	cmp	r0, #0
   81ff4:	d1e9      	bne.n	81fca <__swsetup_r+0x1e>
   81ff6:	f403 7220 	and.w	r2, r3, #640	; 0x280
   81ffa:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   81ffe:	d0e4      	beq.n	81fca <__swsetup_r+0x1e>
   82000:	4628      	mov	r0, r5
   82002:	4621      	mov	r1, r4
   82004:	f000 fcee 	bl	829e4 <__smakebuf_r>
   82008:	89a3      	ldrh	r3, [r4, #12]
   8200a:	6920      	ldr	r0, [r4, #16]
   8200c:	e7dd      	b.n	81fca <__swsetup_r+0x1e>
   8200e:	0799      	lsls	r1, r3, #30
   82010:	bf58      	it	pl
   82012:	6962      	ldrpl	r2, [r4, #20]
   82014:	60a2      	str	r2, [r4, #8]
   82016:	2800      	cmp	r0, #0
   82018:	d1e0      	bne.n	81fdc <__swsetup_r+0x30>
   8201a:	89a3      	ldrh	r3, [r4, #12]
   8201c:	061a      	lsls	r2, r3, #24
   8201e:	d5de      	bpl.n	81fde <__swsetup_r+0x32>
   82020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82024:	81a3      	strh	r3, [r4, #12]
   82026:	f04f 30ff 	mov.w	r0, #4294967295
   8202a:	bd38      	pop	{r3, r4, r5, pc}
   8202c:	f000 f968 	bl	82300 <__sinit>
   82030:	e7c5      	b.n	81fbe <__swsetup_r+0x12>
   82032:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82034:	b149      	cbz	r1, 8204a <__swsetup_r+0x9e>
   82036:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8203a:	4299      	cmp	r1, r3
   8203c:	d003      	beq.n	82046 <__swsetup_r+0x9a>
   8203e:	4628      	mov	r0, r5
   82040:	f000 fa36 	bl	824b0 <_free_r>
   82044:	89a2      	ldrh	r2, [r4, #12]
   82046:	2300      	movs	r3, #0
   82048:	6323      	str	r3, [r4, #48]	; 0x30
   8204a:	6920      	ldr	r0, [r4, #16]
   8204c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   82050:	2300      	movs	r3, #0
   82052:	b292      	uxth	r2, r2
   82054:	e884 0009 	stmia.w	r4, {r0, r3}
   82058:	e7c7      	b.n	81fea <__swsetup_r+0x3e>
   8205a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   8205e:	2309      	movs	r3, #9
   82060:	602b      	str	r3, [r5, #0]
   82062:	f04f 30ff 	mov.w	r0, #4294967295
   82066:	81a2      	strh	r2, [r4, #12]
   82068:	bd38      	pop	{r3, r4, r5, pc}
   8206a:	bf00      	nop
   8206c:	200705a0 	.word	0x200705a0

00082070 <register_fini>:
   82070:	4b02      	ldr	r3, [pc, #8]	; (8207c <register_fini+0xc>)
   82072:	b113      	cbz	r3, 8207a <register_fini+0xa>
   82074:	4802      	ldr	r0, [pc, #8]	; (82080 <register_fini+0x10>)
   82076:	f000 b805 	b.w	82084 <atexit>
   8207a:	4770      	bx	lr
   8207c:	00000000 	.word	0x00000000
   82080:	00082315 	.word	0x00082315

00082084 <atexit>:
   82084:	4601      	mov	r1, r0
   82086:	2000      	movs	r0, #0
   82088:	4602      	mov	r2, r0
   8208a:	4603      	mov	r3, r0
   8208c:	f001 bbe2 	b.w	83854 <__register_exitproc>

00082090 <__sflush_r>:
   82090:	898b      	ldrh	r3, [r1, #12]
   82092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82096:	b29a      	uxth	r2, r3
   82098:	460d      	mov	r5, r1
   8209a:	0711      	lsls	r1, r2, #28
   8209c:	4680      	mov	r8, r0
   8209e:	d43c      	bmi.n	8211a <__sflush_r+0x8a>
   820a0:	686a      	ldr	r2, [r5, #4]
   820a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   820a6:	2a00      	cmp	r2, #0
   820a8:	81ab      	strh	r3, [r5, #12]
   820aa:	dd65      	ble.n	82178 <__sflush_r+0xe8>
   820ac:	6aae      	ldr	r6, [r5, #40]	; 0x28
   820ae:	2e00      	cmp	r6, #0
   820b0:	d04b      	beq.n	8214a <__sflush_r+0xba>
   820b2:	b29b      	uxth	r3, r3
   820b4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   820b8:	2100      	movs	r1, #0
   820ba:	b292      	uxth	r2, r2
   820bc:	f8d8 4000 	ldr.w	r4, [r8]
   820c0:	f8c8 1000 	str.w	r1, [r8]
   820c4:	2a00      	cmp	r2, #0
   820c6:	d05b      	beq.n	82180 <__sflush_r+0xf0>
   820c8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   820ca:	075f      	lsls	r7, r3, #29
   820cc:	d505      	bpl.n	820da <__sflush_r+0x4a>
   820ce:	6869      	ldr	r1, [r5, #4]
   820d0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   820d2:	1a52      	subs	r2, r2, r1
   820d4:	b10b      	cbz	r3, 820da <__sflush_r+0x4a>
   820d6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   820d8:	1ad2      	subs	r2, r2, r3
   820da:	4640      	mov	r0, r8
   820dc:	69e9      	ldr	r1, [r5, #28]
   820de:	2300      	movs	r3, #0
   820e0:	47b0      	blx	r6
   820e2:	1c46      	adds	r6, r0, #1
   820e4:	d056      	beq.n	82194 <__sflush_r+0x104>
   820e6:	89ab      	ldrh	r3, [r5, #12]
   820e8:	692a      	ldr	r2, [r5, #16]
   820ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   820ee:	b29b      	uxth	r3, r3
   820f0:	2100      	movs	r1, #0
   820f2:	602a      	str	r2, [r5, #0]
   820f4:	04da      	lsls	r2, r3, #19
   820f6:	81ab      	strh	r3, [r5, #12]
   820f8:	6069      	str	r1, [r5, #4]
   820fa:	d43b      	bmi.n	82174 <__sflush_r+0xe4>
   820fc:	6b29      	ldr	r1, [r5, #48]	; 0x30
   820fe:	f8c8 4000 	str.w	r4, [r8]
   82102:	b311      	cbz	r1, 8214a <__sflush_r+0xba>
   82104:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82108:	4299      	cmp	r1, r3
   8210a:	d002      	beq.n	82112 <__sflush_r+0x82>
   8210c:	4640      	mov	r0, r8
   8210e:	f000 f9cf 	bl	824b0 <_free_r>
   82112:	2000      	movs	r0, #0
   82114:	6328      	str	r0, [r5, #48]	; 0x30
   82116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8211a:	692e      	ldr	r6, [r5, #16]
   8211c:	b1ae      	cbz	r6, 8214a <__sflush_r+0xba>
   8211e:	0791      	lsls	r1, r2, #30
   82120:	682c      	ldr	r4, [r5, #0]
   82122:	bf0c      	ite	eq
   82124:	696b      	ldreq	r3, [r5, #20]
   82126:	2300      	movne	r3, #0
   82128:	602e      	str	r6, [r5, #0]
   8212a:	1ba4      	subs	r4, r4, r6
   8212c:	60ab      	str	r3, [r5, #8]
   8212e:	e00a      	b.n	82146 <__sflush_r+0xb6>
   82130:	4632      	mov	r2, r6
   82132:	4623      	mov	r3, r4
   82134:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82136:	4640      	mov	r0, r8
   82138:	69e9      	ldr	r1, [r5, #28]
   8213a:	47b8      	blx	r7
   8213c:	2800      	cmp	r0, #0
   8213e:	eba4 0400 	sub.w	r4, r4, r0
   82142:	4406      	add	r6, r0
   82144:	dd04      	ble.n	82150 <__sflush_r+0xc0>
   82146:	2c00      	cmp	r4, #0
   82148:	dcf2      	bgt.n	82130 <__sflush_r+0xa0>
   8214a:	2000      	movs	r0, #0
   8214c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82150:	89ab      	ldrh	r3, [r5, #12]
   82152:	f04f 30ff 	mov.w	r0, #4294967295
   82156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8215a:	81ab      	strh	r3, [r5, #12]
   8215c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82160:	89ab      	ldrh	r3, [r5, #12]
   82162:	692a      	ldr	r2, [r5, #16]
   82164:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82168:	b29b      	uxth	r3, r3
   8216a:	81ab      	strh	r3, [r5, #12]
   8216c:	04db      	lsls	r3, r3, #19
   8216e:	6069      	str	r1, [r5, #4]
   82170:	602a      	str	r2, [r5, #0]
   82172:	d5c3      	bpl.n	820fc <__sflush_r+0x6c>
   82174:	6528      	str	r0, [r5, #80]	; 0x50
   82176:	e7c1      	b.n	820fc <__sflush_r+0x6c>
   82178:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8217a:	2a00      	cmp	r2, #0
   8217c:	dc96      	bgt.n	820ac <__sflush_r+0x1c>
   8217e:	e7e4      	b.n	8214a <__sflush_r+0xba>
   82180:	2301      	movs	r3, #1
   82182:	4640      	mov	r0, r8
   82184:	69e9      	ldr	r1, [r5, #28]
   82186:	47b0      	blx	r6
   82188:	1c43      	adds	r3, r0, #1
   8218a:	4602      	mov	r2, r0
   8218c:	d019      	beq.n	821c2 <__sflush_r+0x132>
   8218e:	89ab      	ldrh	r3, [r5, #12]
   82190:	6aae      	ldr	r6, [r5, #40]	; 0x28
   82192:	e79a      	b.n	820ca <__sflush_r+0x3a>
   82194:	f8d8 1000 	ldr.w	r1, [r8]
   82198:	2900      	cmp	r1, #0
   8219a:	d0e1      	beq.n	82160 <__sflush_r+0xd0>
   8219c:	291d      	cmp	r1, #29
   8219e:	d007      	beq.n	821b0 <__sflush_r+0x120>
   821a0:	2916      	cmp	r1, #22
   821a2:	d005      	beq.n	821b0 <__sflush_r+0x120>
   821a4:	89ab      	ldrh	r3, [r5, #12]
   821a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   821aa:	81ab      	strh	r3, [r5, #12]
   821ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   821b0:	89ab      	ldrh	r3, [r5, #12]
   821b2:	6929      	ldr	r1, [r5, #16]
   821b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   821b8:	2200      	movs	r2, #0
   821ba:	81ab      	strh	r3, [r5, #12]
   821bc:	e885 0006 	stmia.w	r5, {r1, r2}
   821c0:	e79c      	b.n	820fc <__sflush_r+0x6c>
   821c2:	f8d8 3000 	ldr.w	r3, [r8]
   821c6:	2b00      	cmp	r3, #0
   821c8:	d0e1      	beq.n	8218e <__sflush_r+0xfe>
   821ca:	2b1d      	cmp	r3, #29
   821cc:	d001      	beq.n	821d2 <__sflush_r+0x142>
   821ce:	2b16      	cmp	r3, #22
   821d0:	d1be      	bne.n	82150 <__sflush_r+0xc0>
   821d2:	f8c8 4000 	str.w	r4, [r8]
   821d6:	e7b8      	b.n	8214a <__sflush_r+0xba>

000821d8 <_fflush_r>:
   821d8:	b510      	push	{r4, lr}
   821da:	4604      	mov	r4, r0
   821dc:	b082      	sub	sp, #8
   821de:	b108      	cbz	r0, 821e4 <_fflush_r+0xc>
   821e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   821e2:	b153      	cbz	r3, 821fa <_fflush_r+0x22>
   821e4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   821e8:	b908      	cbnz	r0, 821ee <_fflush_r+0x16>
   821ea:	b002      	add	sp, #8
   821ec:	bd10      	pop	{r4, pc}
   821ee:	4620      	mov	r0, r4
   821f0:	b002      	add	sp, #8
   821f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   821f6:	f7ff bf4b 	b.w	82090 <__sflush_r>
   821fa:	9101      	str	r1, [sp, #4]
   821fc:	f000 f880 	bl	82300 <__sinit>
   82200:	9901      	ldr	r1, [sp, #4]
   82202:	e7ef      	b.n	821e4 <_fflush_r+0xc>

00082204 <_cleanup_r>:
   82204:	4901      	ldr	r1, [pc, #4]	; (8220c <_cleanup_r+0x8>)
   82206:	f000 bbbb 	b.w	82980 <_fwalk_reent>
   8220a:	bf00      	nop
   8220c:	0008391d 	.word	0x0008391d

00082210 <__sinit.part.1>:
   82210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82214:	4607      	mov	r7, r0
   82216:	4835      	ldr	r0, [pc, #212]	; (822ec <__sinit.part.1+0xdc>)
   82218:	687d      	ldr	r5, [r7, #4]
   8221a:	2400      	movs	r4, #0
   8221c:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   82220:	2304      	movs	r3, #4
   82222:	2103      	movs	r1, #3
   82224:	63f8      	str	r0, [r7, #60]	; 0x3c
   82226:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   8222a:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   8222e:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   82232:	b083      	sub	sp, #12
   82234:	602c      	str	r4, [r5, #0]
   82236:	606c      	str	r4, [r5, #4]
   82238:	60ac      	str	r4, [r5, #8]
   8223a:	666c      	str	r4, [r5, #100]	; 0x64
   8223c:	81ec      	strh	r4, [r5, #14]
   8223e:	612c      	str	r4, [r5, #16]
   82240:	616c      	str	r4, [r5, #20]
   82242:	61ac      	str	r4, [r5, #24]
   82244:	81ab      	strh	r3, [r5, #12]
   82246:	4621      	mov	r1, r4
   82248:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8224c:	2208      	movs	r2, #8
   8224e:	f7fe ff59 	bl	81104 <memset>
   82252:	f8df b09c 	ldr.w	fp, [pc, #156]	; 822f0 <__sinit.part.1+0xe0>
   82256:	68be      	ldr	r6, [r7, #8]
   82258:	f8df a098 	ldr.w	sl, [pc, #152]	; 822f4 <__sinit.part.1+0xe4>
   8225c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 822f8 <__sinit.part.1+0xe8>
   82260:	f8df 8098 	ldr.w	r8, [pc, #152]	; 822fc <__sinit.part.1+0xec>
   82264:	2301      	movs	r3, #1
   82266:	2209      	movs	r2, #9
   82268:	f8c5 b020 	str.w	fp, [r5, #32]
   8226c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82270:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   82274:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82278:	61ed      	str	r5, [r5, #28]
   8227a:	4621      	mov	r1, r4
   8227c:	81f3      	strh	r3, [r6, #14]
   8227e:	81b2      	strh	r2, [r6, #12]
   82280:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   82284:	6034      	str	r4, [r6, #0]
   82286:	6074      	str	r4, [r6, #4]
   82288:	60b4      	str	r4, [r6, #8]
   8228a:	6674      	str	r4, [r6, #100]	; 0x64
   8228c:	6134      	str	r4, [r6, #16]
   8228e:	6174      	str	r4, [r6, #20]
   82290:	61b4      	str	r4, [r6, #24]
   82292:	2208      	movs	r2, #8
   82294:	9301      	str	r3, [sp, #4]
   82296:	f7fe ff35 	bl	81104 <memset>
   8229a:	68fd      	ldr	r5, [r7, #12]
   8229c:	2012      	movs	r0, #18
   8229e:	2202      	movs	r2, #2
   822a0:	61f6      	str	r6, [r6, #28]
   822a2:	f8c6 b020 	str.w	fp, [r6, #32]
   822a6:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   822aa:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   822ae:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   822b2:	4621      	mov	r1, r4
   822b4:	81a8      	strh	r0, [r5, #12]
   822b6:	81ea      	strh	r2, [r5, #14]
   822b8:	602c      	str	r4, [r5, #0]
   822ba:	606c      	str	r4, [r5, #4]
   822bc:	60ac      	str	r4, [r5, #8]
   822be:	666c      	str	r4, [r5, #100]	; 0x64
   822c0:	612c      	str	r4, [r5, #16]
   822c2:	616c      	str	r4, [r5, #20]
   822c4:	61ac      	str	r4, [r5, #24]
   822c6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   822ca:	2208      	movs	r2, #8
   822cc:	f7fe ff1a 	bl	81104 <memset>
   822d0:	9b01      	ldr	r3, [sp, #4]
   822d2:	61ed      	str	r5, [r5, #28]
   822d4:	f8c5 b020 	str.w	fp, [r5, #32]
   822d8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   822dc:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   822e0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   822e4:	63bb      	str	r3, [r7, #56]	; 0x38
   822e6:	b003      	add	sp, #12
   822e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   822ec:	00082205 	.word	0x00082205
   822f0:	00083635 	.word	0x00083635
   822f4:	00083659 	.word	0x00083659
   822f8:	00083691 	.word	0x00083691
   822fc:	000836b1 	.word	0x000836b1

00082300 <__sinit>:
   82300:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82302:	b103      	cbz	r3, 82306 <__sinit+0x6>
   82304:	4770      	bx	lr
   82306:	f7ff bf83 	b.w	82210 <__sinit.part.1>
   8230a:	bf00      	nop

0008230c <__sfp_lock_acquire>:
   8230c:	4770      	bx	lr
   8230e:	bf00      	nop

00082310 <__sfp_lock_release>:
   82310:	4770      	bx	lr
   82312:	bf00      	nop

00082314 <__libc_fini_array>:
   82314:	b538      	push	{r3, r4, r5, lr}
   82316:	4b08      	ldr	r3, [pc, #32]	; (82338 <__libc_fini_array+0x24>)
   82318:	4d08      	ldr	r5, [pc, #32]	; (8233c <__libc_fini_array+0x28>)
   8231a:	1aed      	subs	r5, r5, r3
   8231c:	10ac      	asrs	r4, r5, #2
   8231e:	bf18      	it	ne
   82320:	18ed      	addne	r5, r5, r3
   82322:	d005      	beq.n	82330 <__libc_fini_array+0x1c>
   82324:	3c01      	subs	r4, #1
   82326:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   8232a:	4798      	blx	r3
   8232c:	2c00      	cmp	r4, #0
   8232e:	d1f9      	bne.n	82324 <__libc_fini_array+0x10>
   82330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82334:	f001 bea6 	b.w	84084 <_fini>
   82338:	00084090 	.word	0x00084090
   8233c:	00084094 	.word	0x00084094

00082340 <__fputwc>:
   82340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82344:	b082      	sub	sp, #8
   82346:	4607      	mov	r7, r0
   82348:	460e      	mov	r6, r1
   8234a:	4614      	mov	r4, r2
   8234c:	f000 fb44 	bl	829d8 <__locale_mb_cur_max>
   82350:	2801      	cmp	r0, #1
   82352:	d040      	beq.n	823d6 <__fputwc+0x96>
   82354:	4638      	mov	r0, r7
   82356:	a901      	add	r1, sp, #4
   82358:	4632      	mov	r2, r6
   8235a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8235e:	f001 fa2d 	bl	837bc <_wcrtomb_r>
   82362:	f1b0 3fff 	cmp.w	r0, #4294967295
   82366:	4680      	mov	r8, r0
   82368:	d02e      	beq.n	823c8 <__fputwc+0x88>
   8236a:	2800      	cmp	r0, #0
   8236c:	d03b      	beq.n	823e6 <__fputwc+0xa6>
   8236e:	f89d 1004 	ldrb.w	r1, [sp, #4]
   82372:	2500      	movs	r5, #0
   82374:	e009      	b.n	8238a <__fputwc+0x4a>
   82376:	6823      	ldr	r3, [r4, #0]
   82378:	7019      	strb	r1, [r3, #0]
   8237a:	6823      	ldr	r3, [r4, #0]
   8237c:	3301      	adds	r3, #1
   8237e:	6023      	str	r3, [r4, #0]
   82380:	3501      	adds	r5, #1
   82382:	45a8      	cmp	r8, r5
   82384:	d92f      	bls.n	823e6 <__fputwc+0xa6>
   82386:	ab01      	add	r3, sp, #4
   82388:	5d59      	ldrb	r1, [r3, r5]
   8238a:	68a3      	ldr	r3, [r4, #8]
   8238c:	3b01      	subs	r3, #1
   8238e:	2b00      	cmp	r3, #0
   82390:	60a3      	str	r3, [r4, #8]
   82392:	daf0      	bge.n	82376 <__fputwc+0x36>
   82394:	69a2      	ldr	r2, [r4, #24]
   82396:	4293      	cmp	r3, r2
   82398:	db06      	blt.n	823a8 <__fputwc+0x68>
   8239a:	6823      	ldr	r3, [r4, #0]
   8239c:	7019      	strb	r1, [r3, #0]
   8239e:	6823      	ldr	r3, [r4, #0]
   823a0:	7819      	ldrb	r1, [r3, #0]
   823a2:	3301      	adds	r3, #1
   823a4:	290a      	cmp	r1, #10
   823a6:	d1ea      	bne.n	8237e <__fputwc+0x3e>
   823a8:	4638      	mov	r0, r7
   823aa:	4622      	mov	r2, r4
   823ac:	f001 f9b2 	bl	83714 <__swbuf_r>
   823b0:	f1a0 30ff 	sub.w	r0, r0, #4294967295
   823b4:	fab0 f080 	clz	r0, r0
   823b8:	0940      	lsrs	r0, r0, #5
   823ba:	2800      	cmp	r0, #0
   823bc:	d0e0      	beq.n	82380 <__fputwc+0x40>
   823be:	f04f 30ff 	mov.w	r0, #4294967295
   823c2:	b002      	add	sp, #8
   823c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823c8:	89a3      	ldrh	r3, [r4, #12]
   823ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   823ce:	81a3      	strh	r3, [r4, #12]
   823d0:	b002      	add	sp, #8
   823d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823d6:	1e73      	subs	r3, r6, #1
   823d8:	2bfe      	cmp	r3, #254	; 0xfe
   823da:	d8bb      	bhi.n	82354 <__fputwc+0x14>
   823dc:	b2f1      	uxtb	r1, r6
   823de:	4680      	mov	r8, r0
   823e0:	f88d 1004 	strb.w	r1, [sp, #4]
   823e4:	e7c5      	b.n	82372 <__fputwc+0x32>
   823e6:	4630      	mov	r0, r6
   823e8:	b002      	add	sp, #8
   823ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823ee:	bf00      	nop

000823f0 <_fputwc_r>:
   823f0:	8993      	ldrh	r3, [r2, #12]
   823f2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   823f6:	d10b      	bne.n	82410 <_fputwc_r+0x20>
   823f8:	b410      	push	{r4}
   823fa:	6e54      	ldr	r4, [r2, #100]	; 0x64
   823fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82400:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   82404:	6654      	str	r4, [r2, #100]	; 0x64
   82406:	8193      	strh	r3, [r2, #12]
   82408:	f85d 4b04 	ldr.w	r4, [sp], #4
   8240c:	f7ff bf98 	b.w	82340 <__fputwc>
   82410:	f7ff bf96 	b.w	82340 <__fputwc>

00082414 <_malloc_trim_r>:
   82414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82416:	460c      	mov	r4, r1
   82418:	4f22      	ldr	r7, [pc, #136]	; (824a4 <_malloc_trim_r+0x90>)
   8241a:	4606      	mov	r6, r0
   8241c:	f000 ff04 	bl	83228 <__malloc_lock>
   82420:	68bb      	ldr	r3, [r7, #8]
   82422:	685d      	ldr	r5, [r3, #4]
   82424:	f025 0503 	bic.w	r5, r5, #3
   82428:	1b29      	subs	r1, r5, r4
   8242a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   8242e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82432:	f021 010f 	bic.w	r1, r1, #15
   82436:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   8243a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8243e:	db07      	blt.n	82450 <_malloc_trim_r+0x3c>
   82440:	4630      	mov	r0, r6
   82442:	2100      	movs	r1, #0
   82444:	f001 f8e4 	bl	83610 <_sbrk_r>
   82448:	68bb      	ldr	r3, [r7, #8]
   8244a:	442b      	add	r3, r5
   8244c:	4298      	cmp	r0, r3
   8244e:	d004      	beq.n	8245a <_malloc_trim_r+0x46>
   82450:	4630      	mov	r0, r6
   82452:	f000 feeb 	bl	8322c <__malloc_unlock>
   82456:	2000      	movs	r0, #0
   82458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8245a:	4630      	mov	r0, r6
   8245c:	4261      	negs	r1, r4
   8245e:	f001 f8d7 	bl	83610 <_sbrk_r>
   82462:	3001      	adds	r0, #1
   82464:	d00d      	beq.n	82482 <_malloc_trim_r+0x6e>
   82466:	4b10      	ldr	r3, [pc, #64]	; (824a8 <_malloc_trim_r+0x94>)
   82468:	68ba      	ldr	r2, [r7, #8]
   8246a:	6819      	ldr	r1, [r3, #0]
   8246c:	1b2d      	subs	r5, r5, r4
   8246e:	f045 0501 	orr.w	r5, r5, #1
   82472:	4630      	mov	r0, r6
   82474:	1b09      	subs	r1, r1, r4
   82476:	6055      	str	r5, [r2, #4]
   82478:	6019      	str	r1, [r3, #0]
   8247a:	f000 fed7 	bl	8322c <__malloc_unlock>
   8247e:	2001      	movs	r0, #1
   82480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82482:	4630      	mov	r0, r6
   82484:	2100      	movs	r1, #0
   82486:	f001 f8c3 	bl	83610 <_sbrk_r>
   8248a:	68ba      	ldr	r2, [r7, #8]
   8248c:	1a83      	subs	r3, r0, r2
   8248e:	2b0f      	cmp	r3, #15
   82490:	ddde      	ble.n	82450 <_malloc_trim_r+0x3c>
   82492:	4c06      	ldr	r4, [pc, #24]	; (824ac <_malloc_trim_r+0x98>)
   82494:	4904      	ldr	r1, [pc, #16]	; (824a8 <_malloc_trim_r+0x94>)
   82496:	6824      	ldr	r4, [r4, #0]
   82498:	f043 0301 	orr.w	r3, r3, #1
   8249c:	1b00      	subs	r0, r0, r4
   8249e:	6053      	str	r3, [r2, #4]
   824a0:	6008      	str	r0, [r1, #0]
   824a2:	e7d5      	b.n	82450 <_malloc_trim_r+0x3c>
   824a4:	200705c8 	.word	0x200705c8
   824a8:	20070b20 	.word	0x20070b20
   824ac:	200709d4 	.word	0x200709d4

000824b0 <_free_r>:
   824b0:	2900      	cmp	r1, #0
   824b2:	d04e      	beq.n	82552 <_free_r+0xa2>
   824b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   824b8:	460c      	mov	r4, r1
   824ba:	4680      	mov	r8, r0
   824bc:	f000 feb4 	bl	83228 <__malloc_lock>
   824c0:	f854 7c04 	ldr.w	r7, [r4, #-4]
   824c4:	4962      	ldr	r1, [pc, #392]	; (82650 <_free_r+0x1a0>)
   824c6:	f1a4 0508 	sub.w	r5, r4, #8
   824ca:	f027 0201 	bic.w	r2, r7, #1
   824ce:	18ab      	adds	r3, r5, r2
   824d0:	688e      	ldr	r6, [r1, #8]
   824d2:	6858      	ldr	r0, [r3, #4]
   824d4:	429e      	cmp	r6, r3
   824d6:	f020 0003 	bic.w	r0, r0, #3
   824da:	d05a      	beq.n	82592 <_free_r+0xe2>
   824dc:	07fe      	lsls	r6, r7, #31
   824de:	6058      	str	r0, [r3, #4]
   824e0:	d40b      	bmi.n	824fa <_free_r+0x4a>
   824e2:	f854 7c08 	ldr.w	r7, [r4, #-8]
   824e6:	f101 0e08 	add.w	lr, r1, #8
   824ea:	1bed      	subs	r5, r5, r7
   824ec:	68ac      	ldr	r4, [r5, #8]
   824ee:	443a      	add	r2, r7
   824f0:	4574      	cmp	r4, lr
   824f2:	d067      	beq.n	825c4 <_free_r+0x114>
   824f4:	68ef      	ldr	r7, [r5, #12]
   824f6:	60e7      	str	r7, [r4, #12]
   824f8:	60bc      	str	r4, [r7, #8]
   824fa:	181c      	adds	r4, r3, r0
   824fc:	6864      	ldr	r4, [r4, #4]
   824fe:	07e4      	lsls	r4, r4, #31
   82500:	d40c      	bmi.n	8251c <_free_r+0x6c>
   82502:	4f54      	ldr	r7, [pc, #336]	; (82654 <_free_r+0x1a4>)
   82504:	689c      	ldr	r4, [r3, #8]
   82506:	4402      	add	r2, r0
   82508:	42bc      	cmp	r4, r7
   8250a:	d07c      	beq.n	82606 <_free_r+0x156>
   8250c:	68d8      	ldr	r0, [r3, #12]
   8250e:	f042 0301 	orr.w	r3, r2, #1
   82512:	60e0      	str	r0, [r4, #12]
   82514:	6084      	str	r4, [r0, #8]
   82516:	606b      	str	r3, [r5, #4]
   82518:	50aa      	str	r2, [r5, r2]
   8251a:	e003      	b.n	82524 <_free_r+0x74>
   8251c:	f042 0301 	orr.w	r3, r2, #1
   82520:	606b      	str	r3, [r5, #4]
   82522:	50aa      	str	r2, [r5, r2]
   82524:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   82528:	d214      	bcs.n	82554 <_free_r+0xa4>
   8252a:	08d2      	lsrs	r2, r2, #3
   8252c:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   82530:	2401      	movs	r4, #1
   82532:	6848      	ldr	r0, [r1, #4]
   82534:	1092      	asrs	r2, r2, #2
   82536:	fa04 f202 	lsl.w	r2, r4, r2
   8253a:	689c      	ldr	r4, [r3, #8]
   8253c:	4310      	orrs	r0, r2
   8253e:	60ac      	str	r4, [r5, #8]
   82540:	60eb      	str	r3, [r5, #12]
   82542:	6048      	str	r0, [r1, #4]
   82544:	609d      	str	r5, [r3, #8]
   82546:	60e5      	str	r5, [r4, #12]
   82548:	4640      	mov	r0, r8
   8254a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8254e:	f000 be6d 	b.w	8322c <__malloc_unlock>
   82552:	4770      	bx	lr
   82554:	0a53      	lsrs	r3, r2, #9
   82556:	2b04      	cmp	r3, #4
   82558:	d847      	bhi.n	825ea <_free_r+0x13a>
   8255a:	0993      	lsrs	r3, r2, #6
   8255c:	f103 0438 	add.w	r4, r3, #56	; 0x38
   82560:	0060      	lsls	r0, r4, #1
   82562:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   82566:	6883      	ldr	r3, [r0, #8]
   82568:	4939      	ldr	r1, [pc, #228]	; (82650 <_free_r+0x1a0>)
   8256a:	4283      	cmp	r3, r0
   8256c:	d043      	beq.n	825f6 <_free_r+0x146>
   8256e:	6859      	ldr	r1, [r3, #4]
   82570:	f021 0103 	bic.w	r1, r1, #3
   82574:	4291      	cmp	r1, r2
   82576:	d902      	bls.n	8257e <_free_r+0xce>
   82578:	689b      	ldr	r3, [r3, #8]
   8257a:	4298      	cmp	r0, r3
   8257c:	d1f7      	bne.n	8256e <_free_r+0xbe>
   8257e:	68da      	ldr	r2, [r3, #12]
   82580:	60ea      	str	r2, [r5, #12]
   82582:	60ab      	str	r3, [r5, #8]
   82584:	4640      	mov	r0, r8
   82586:	6095      	str	r5, [r2, #8]
   82588:	60dd      	str	r5, [r3, #12]
   8258a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8258e:	f000 be4d 	b.w	8322c <__malloc_unlock>
   82592:	07ff      	lsls	r7, r7, #31
   82594:	4402      	add	r2, r0
   82596:	d407      	bmi.n	825a8 <_free_r+0xf8>
   82598:	f854 4c08 	ldr.w	r4, [r4, #-8]
   8259c:	1b2d      	subs	r5, r5, r4
   8259e:	68eb      	ldr	r3, [r5, #12]
   825a0:	68a8      	ldr	r0, [r5, #8]
   825a2:	4422      	add	r2, r4
   825a4:	60c3      	str	r3, [r0, #12]
   825a6:	6098      	str	r0, [r3, #8]
   825a8:	4b2b      	ldr	r3, [pc, #172]	; (82658 <_free_r+0x1a8>)
   825aa:	f042 0001 	orr.w	r0, r2, #1
   825ae:	681b      	ldr	r3, [r3, #0]
   825b0:	6068      	str	r0, [r5, #4]
   825b2:	429a      	cmp	r2, r3
   825b4:	608d      	str	r5, [r1, #8]
   825b6:	d3c7      	bcc.n	82548 <_free_r+0x98>
   825b8:	4b28      	ldr	r3, [pc, #160]	; (8265c <_free_r+0x1ac>)
   825ba:	4640      	mov	r0, r8
   825bc:	6819      	ldr	r1, [r3, #0]
   825be:	f7ff ff29 	bl	82414 <_malloc_trim_r>
   825c2:	e7c1      	b.n	82548 <_free_r+0x98>
   825c4:	1819      	adds	r1, r3, r0
   825c6:	6849      	ldr	r1, [r1, #4]
   825c8:	07c9      	lsls	r1, r1, #31
   825ca:	d409      	bmi.n	825e0 <_free_r+0x130>
   825cc:	68d9      	ldr	r1, [r3, #12]
   825ce:	4402      	add	r2, r0
   825d0:	689b      	ldr	r3, [r3, #8]
   825d2:	f042 0001 	orr.w	r0, r2, #1
   825d6:	60d9      	str	r1, [r3, #12]
   825d8:	608b      	str	r3, [r1, #8]
   825da:	6068      	str	r0, [r5, #4]
   825dc:	50aa      	str	r2, [r5, r2]
   825de:	e7b3      	b.n	82548 <_free_r+0x98>
   825e0:	f042 0301 	orr.w	r3, r2, #1
   825e4:	606b      	str	r3, [r5, #4]
   825e6:	50aa      	str	r2, [r5, r2]
   825e8:	e7ae      	b.n	82548 <_free_r+0x98>
   825ea:	2b14      	cmp	r3, #20
   825ec:	d814      	bhi.n	82618 <_free_r+0x168>
   825ee:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   825f2:	0060      	lsls	r0, r4, #1
   825f4:	e7b5      	b.n	82562 <_free_r+0xb2>
   825f6:	684a      	ldr	r2, [r1, #4]
   825f8:	10a4      	asrs	r4, r4, #2
   825fa:	2001      	movs	r0, #1
   825fc:	40a0      	lsls	r0, r4
   825fe:	4302      	orrs	r2, r0
   82600:	604a      	str	r2, [r1, #4]
   82602:	461a      	mov	r2, r3
   82604:	e7bc      	b.n	82580 <_free_r+0xd0>
   82606:	f042 0301 	orr.w	r3, r2, #1
   8260a:	614d      	str	r5, [r1, #20]
   8260c:	610d      	str	r5, [r1, #16]
   8260e:	60ec      	str	r4, [r5, #12]
   82610:	60ac      	str	r4, [r5, #8]
   82612:	606b      	str	r3, [r5, #4]
   82614:	50aa      	str	r2, [r5, r2]
   82616:	e797      	b.n	82548 <_free_r+0x98>
   82618:	2b54      	cmp	r3, #84	; 0x54
   8261a:	d804      	bhi.n	82626 <_free_r+0x176>
   8261c:	0b13      	lsrs	r3, r2, #12
   8261e:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   82622:	0060      	lsls	r0, r4, #1
   82624:	e79d      	b.n	82562 <_free_r+0xb2>
   82626:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8262a:	d804      	bhi.n	82636 <_free_r+0x186>
   8262c:	0bd3      	lsrs	r3, r2, #15
   8262e:	f103 0477 	add.w	r4, r3, #119	; 0x77
   82632:	0060      	lsls	r0, r4, #1
   82634:	e795      	b.n	82562 <_free_r+0xb2>
   82636:	f240 5054 	movw	r0, #1364	; 0x554
   8263a:	4283      	cmp	r3, r0
   8263c:	d804      	bhi.n	82648 <_free_r+0x198>
   8263e:	0c93      	lsrs	r3, r2, #18
   82640:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   82644:	0060      	lsls	r0, r4, #1
   82646:	e78c      	b.n	82562 <_free_r+0xb2>
   82648:	20fc      	movs	r0, #252	; 0xfc
   8264a:	247e      	movs	r4, #126	; 0x7e
   8264c:	e789      	b.n	82562 <_free_r+0xb2>
   8264e:	bf00      	nop
   82650:	200705c8 	.word	0x200705c8
   82654:	200705d0 	.word	0x200705d0
   82658:	200709d0 	.word	0x200709d0
   8265c:	20070b1c 	.word	0x20070b1c

00082660 <__sfvwrite_r>:
   82660:	6893      	ldr	r3, [r2, #8]
   82662:	2b00      	cmp	r3, #0
   82664:	f000 80b1 	beq.w	827ca <__sfvwrite_r+0x16a>
   82668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8266c:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   82670:	b083      	sub	sp, #12
   82672:	f01e 0f08 	tst.w	lr, #8
   82676:	460c      	mov	r4, r1
   82678:	4681      	mov	r9, r0
   8267a:	4616      	mov	r6, r2
   8267c:	d028      	beq.n	826d0 <__sfvwrite_r+0x70>
   8267e:	690b      	ldr	r3, [r1, #16]
   82680:	b333      	cbz	r3, 826d0 <__sfvwrite_r+0x70>
   82682:	f00e 0802 	and.w	r8, lr, #2
   82686:	fa1f f088 	uxth.w	r0, r8
   8268a:	6835      	ldr	r5, [r6, #0]
   8268c:	b380      	cbz	r0, 826f0 <__sfvwrite_r+0x90>
   8268e:	f04f 0b00 	mov.w	fp, #0
   82692:	46d8      	mov	r8, fp
   82694:	f8df a2e4 	ldr.w	sl, [pc, #740]	; 8297c <__sfvwrite_r+0x31c>
   82698:	f1b8 0f00 	cmp.w	r8, #0
   8269c:	f000 808f 	beq.w	827be <__sfvwrite_r+0x15e>
   826a0:	45d0      	cmp	r8, sl
   826a2:	4643      	mov	r3, r8
   826a4:	4648      	mov	r0, r9
   826a6:	bf28      	it	cs
   826a8:	4653      	movcs	r3, sl
   826aa:	69e1      	ldr	r1, [r4, #28]
   826ac:	465a      	mov	r2, fp
   826ae:	6a67      	ldr	r7, [r4, #36]	; 0x24
   826b0:	47b8      	blx	r7
   826b2:	2800      	cmp	r0, #0
   826b4:	f340 80a8 	ble.w	82808 <__sfvwrite_r+0x1a8>
   826b8:	68b3      	ldr	r3, [r6, #8]
   826ba:	4483      	add	fp, r0
   826bc:	1a1b      	subs	r3, r3, r0
   826be:	ebc0 0808 	rsb	r8, r0, r8
   826c2:	60b3      	str	r3, [r6, #8]
   826c4:	2b00      	cmp	r3, #0
   826c6:	d1e7      	bne.n	82698 <__sfvwrite_r+0x38>
   826c8:	2000      	movs	r0, #0
   826ca:	b003      	add	sp, #12
   826cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   826d0:	4648      	mov	r0, r9
   826d2:	4621      	mov	r1, r4
   826d4:	f7ff fc6a 	bl	81fac <__swsetup_r>
   826d8:	2800      	cmp	r0, #0
   826da:	f040 8146 	bne.w	8296a <__sfvwrite_r+0x30a>
   826de:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   826e2:	6835      	ldr	r5, [r6, #0]
   826e4:	f00e 0802 	and.w	r8, lr, #2
   826e8:	fa1f f088 	uxth.w	r0, r8
   826ec:	2800      	cmp	r0, #0
   826ee:	d1ce      	bne.n	8268e <__sfvwrite_r+0x2e>
   826f0:	f01e 0b01 	ands.w	fp, lr, #1
   826f4:	f040 8091 	bne.w	8281a <__sfvwrite_r+0x1ba>
   826f8:	46d8      	mov	r8, fp
   826fa:	f1b8 0f00 	cmp.w	r8, #0
   826fe:	d058      	beq.n	827b2 <__sfvwrite_r+0x152>
   82700:	f41e 7f00 	tst.w	lr, #512	; 0x200
   82704:	68a7      	ldr	r7, [r4, #8]
   82706:	d062      	beq.n	827ce <__sfvwrite_r+0x16e>
   82708:	45b8      	cmp	r8, r7
   8270a:	46ba      	mov	sl, r7
   8270c:	f0c0 80c2 	bcc.w	82894 <__sfvwrite_r+0x234>
   82710:	f41e 6f90 	tst.w	lr, #1152	; 0x480
   82714:	f000 80c0 	beq.w	82898 <__sfvwrite_r+0x238>
   82718:	6967      	ldr	r7, [r4, #20]
   8271a:	6921      	ldr	r1, [r4, #16]
   8271c:	6823      	ldr	r3, [r4, #0]
   8271e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   82722:	1a5b      	subs	r3, r3, r1
   82724:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   82728:	1c58      	adds	r0, r3, #1
   8272a:	107f      	asrs	r7, r7, #1
   8272c:	4440      	add	r0, r8
   8272e:	4287      	cmp	r7, r0
   82730:	463a      	mov	r2, r7
   82732:	bf3c      	itt	cc
   82734:	4607      	movcc	r7, r0
   82736:	463a      	movcc	r2, r7
   82738:	f41e 6f80 	tst.w	lr, #1024	; 0x400
   8273c:	9300      	str	r3, [sp, #0]
   8273e:	f000 80fb 	beq.w	82938 <__sfvwrite_r+0x2d8>
   82742:	4611      	mov	r1, r2
   82744:	4648      	mov	r0, r9
   82746:	f000 f9c5 	bl	82ad4 <_malloc_r>
   8274a:	9b00      	ldr	r3, [sp, #0]
   8274c:	4682      	mov	sl, r0
   8274e:	2800      	cmp	r0, #0
   82750:	f000 810e 	beq.w	82970 <__sfvwrite_r+0x310>
   82754:	461a      	mov	r2, r3
   82756:	6921      	ldr	r1, [r4, #16]
   82758:	9300      	str	r3, [sp, #0]
   8275a:	f000 fc8b 	bl	83074 <memcpy>
   8275e:	89a2      	ldrh	r2, [r4, #12]
   82760:	9b00      	ldr	r3, [sp, #0]
   82762:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   82766:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8276a:	81a2      	strh	r2, [r4, #12]
   8276c:	eb0a 0003 	add.w	r0, sl, r3
   82770:	f8c4 a010 	str.w	sl, [r4, #16]
   82774:	1afb      	subs	r3, r7, r3
   82776:	6167      	str	r7, [r4, #20]
   82778:	46c2      	mov	sl, r8
   8277a:	4647      	mov	r7, r8
   8277c:	6020      	str	r0, [r4, #0]
   8277e:	60a3      	str	r3, [r4, #8]
   82780:	4652      	mov	r2, sl
   82782:	4659      	mov	r1, fp
   82784:	f000 fcec 	bl	83160 <memmove>
   82788:	68a0      	ldr	r0, [r4, #8]
   8278a:	6822      	ldr	r2, [r4, #0]
   8278c:	1bc0      	subs	r0, r0, r7
   8278e:	60a0      	str	r0, [r4, #8]
   82790:	4640      	mov	r0, r8
   82792:	eb02 030a 	add.w	r3, r2, sl
   82796:	6023      	str	r3, [r4, #0]
   82798:	68b3      	ldr	r3, [r6, #8]
   8279a:	4483      	add	fp, r0
   8279c:	1a1b      	subs	r3, r3, r0
   8279e:	ebc0 0808 	rsb	r8, r0, r8
   827a2:	60b3      	str	r3, [r6, #8]
   827a4:	2b00      	cmp	r3, #0
   827a6:	d08f      	beq.n	826c8 <__sfvwrite_r+0x68>
   827a8:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   827ac:	f1b8 0f00 	cmp.w	r8, #0
   827b0:	d1a6      	bne.n	82700 <__sfvwrite_r+0xa0>
   827b2:	f8d5 b000 	ldr.w	fp, [r5]
   827b6:	f8d5 8004 	ldr.w	r8, [r5, #4]
   827ba:	3508      	adds	r5, #8
   827bc:	e79d      	b.n	826fa <__sfvwrite_r+0x9a>
   827be:	f8d5 b000 	ldr.w	fp, [r5]
   827c2:	f8d5 8004 	ldr.w	r8, [r5, #4]
   827c6:	3508      	adds	r5, #8
   827c8:	e766      	b.n	82698 <__sfvwrite_r+0x38>
   827ca:	2000      	movs	r0, #0
   827cc:	4770      	bx	lr
   827ce:	6820      	ldr	r0, [r4, #0]
   827d0:	6923      	ldr	r3, [r4, #16]
   827d2:	4298      	cmp	r0, r3
   827d4:	d803      	bhi.n	827de <__sfvwrite_r+0x17e>
   827d6:	6962      	ldr	r2, [r4, #20]
   827d8:	4590      	cmp	r8, r2
   827da:	f080 8085 	bcs.w	828e8 <__sfvwrite_r+0x288>
   827de:	4547      	cmp	r7, r8
   827e0:	bf28      	it	cs
   827e2:	4647      	movcs	r7, r8
   827e4:	4659      	mov	r1, fp
   827e6:	463a      	mov	r2, r7
   827e8:	f000 fcba 	bl	83160 <memmove>
   827ec:	68a3      	ldr	r3, [r4, #8]
   827ee:	6822      	ldr	r2, [r4, #0]
   827f0:	1bdb      	subs	r3, r3, r7
   827f2:	443a      	add	r2, r7
   827f4:	60a3      	str	r3, [r4, #8]
   827f6:	6022      	str	r2, [r4, #0]
   827f8:	2b00      	cmp	r3, #0
   827fa:	d149      	bne.n	82890 <__sfvwrite_r+0x230>
   827fc:	4648      	mov	r0, r9
   827fe:	4621      	mov	r1, r4
   82800:	f7ff fcea 	bl	821d8 <_fflush_r>
   82804:	2800      	cmp	r0, #0
   82806:	d043      	beq.n	82890 <__sfvwrite_r+0x230>
   82808:	89a3      	ldrh	r3, [r4, #12]
   8280a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8280e:	f04f 30ff 	mov.w	r0, #4294967295
   82812:	81a3      	strh	r3, [r4, #12]
   82814:	b003      	add	sp, #12
   82816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8281a:	4680      	mov	r8, r0
   8281c:	4683      	mov	fp, r0
   8281e:	4682      	mov	sl, r0
   82820:	9000      	str	r0, [sp, #0]
   82822:	f1ba 0f00 	cmp.w	sl, #0
   82826:	d02b      	beq.n	82880 <__sfvwrite_r+0x220>
   82828:	9b00      	ldr	r3, [sp, #0]
   8282a:	2b00      	cmp	r3, #0
   8282c:	d04f      	beq.n	828ce <__sfvwrite_r+0x26e>
   8282e:	45d0      	cmp	r8, sl
   82830:	4643      	mov	r3, r8
   82832:	bf28      	it	cs
   82834:	4653      	movcs	r3, sl
   82836:	6820      	ldr	r0, [r4, #0]
   82838:	6921      	ldr	r1, [r4, #16]
   8283a:	461f      	mov	r7, r3
   8283c:	4288      	cmp	r0, r1
   8283e:	f8d4 e008 	ldr.w	lr, [r4, #8]
   82842:	6962      	ldr	r2, [r4, #20]
   82844:	d903      	bls.n	8284e <__sfvwrite_r+0x1ee>
   82846:	eb0e 0c02 	add.w	ip, lr, r2
   8284a:	4563      	cmp	r3, ip
   8284c:	dc5e      	bgt.n	8290c <__sfvwrite_r+0x2ac>
   8284e:	4293      	cmp	r3, r2
   82850:	db24      	blt.n	8289c <__sfvwrite_r+0x23c>
   82852:	4613      	mov	r3, r2
   82854:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82856:	4648      	mov	r0, r9
   82858:	69e1      	ldr	r1, [r4, #28]
   8285a:	465a      	mov	r2, fp
   8285c:	47b8      	blx	r7
   8285e:	1e07      	subs	r7, r0, #0
   82860:	ddd2      	ble.n	82808 <__sfvwrite_r+0x1a8>
   82862:	ebb8 0807 	subs.w	r8, r8, r7
   82866:	d029      	beq.n	828bc <__sfvwrite_r+0x25c>
   82868:	68b3      	ldr	r3, [r6, #8]
   8286a:	44bb      	add	fp, r7
   8286c:	1bdb      	subs	r3, r3, r7
   8286e:	ebc7 0a0a 	rsb	sl, r7, sl
   82872:	60b3      	str	r3, [r6, #8]
   82874:	2b00      	cmp	r3, #0
   82876:	f43f af27 	beq.w	826c8 <__sfvwrite_r+0x68>
   8287a:	f1ba 0f00 	cmp.w	sl, #0
   8287e:	d1d3      	bne.n	82828 <__sfvwrite_r+0x1c8>
   82880:	2300      	movs	r3, #0
   82882:	f8d5 b000 	ldr.w	fp, [r5]
   82886:	f8d5 a004 	ldr.w	sl, [r5, #4]
   8288a:	9300      	str	r3, [sp, #0]
   8288c:	3508      	adds	r5, #8
   8288e:	e7c8      	b.n	82822 <__sfvwrite_r+0x1c2>
   82890:	4638      	mov	r0, r7
   82892:	e781      	b.n	82798 <__sfvwrite_r+0x138>
   82894:	4647      	mov	r7, r8
   82896:	46c2      	mov	sl, r8
   82898:	6820      	ldr	r0, [r4, #0]
   8289a:	e771      	b.n	82780 <__sfvwrite_r+0x120>
   8289c:	461a      	mov	r2, r3
   8289e:	4659      	mov	r1, fp
   828a0:	9301      	str	r3, [sp, #4]
   828a2:	f000 fc5d 	bl	83160 <memmove>
   828a6:	68a2      	ldr	r2, [r4, #8]
   828a8:	6821      	ldr	r1, [r4, #0]
   828aa:	9b01      	ldr	r3, [sp, #4]
   828ac:	ebb8 0807 	subs.w	r8, r8, r7
   828b0:	eba2 0203 	sub.w	r2, r2, r3
   828b4:	440b      	add	r3, r1
   828b6:	60a2      	str	r2, [r4, #8]
   828b8:	6023      	str	r3, [r4, #0]
   828ba:	d1d5      	bne.n	82868 <__sfvwrite_r+0x208>
   828bc:	4648      	mov	r0, r9
   828be:	4621      	mov	r1, r4
   828c0:	f7ff fc8a 	bl	821d8 <_fflush_r>
   828c4:	2800      	cmp	r0, #0
   828c6:	d19f      	bne.n	82808 <__sfvwrite_r+0x1a8>
   828c8:	f8cd 8000 	str.w	r8, [sp]
   828cc:	e7cc      	b.n	82868 <__sfvwrite_r+0x208>
   828ce:	4658      	mov	r0, fp
   828d0:	210a      	movs	r1, #10
   828d2:	4652      	mov	r2, sl
   828d4:	f000 fb84 	bl	82fe0 <memchr>
   828d8:	2800      	cmp	r0, #0
   828da:	d041      	beq.n	82960 <__sfvwrite_r+0x300>
   828dc:	3001      	adds	r0, #1
   828de:	2301      	movs	r3, #1
   828e0:	ebcb 0800 	rsb	r8, fp, r0
   828e4:	9300      	str	r3, [sp, #0]
   828e6:	e7a2      	b.n	8282e <__sfvwrite_r+0x1ce>
   828e8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   828ec:	4543      	cmp	r3, r8
   828ee:	bf28      	it	cs
   828f0:	4643      	movcs	r3, r8
   828f2:	fb93 f3f2 	sdiv	r3, r3, r2
   828f6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   828f8:	fb03 f302 	mul.w	r3, r3, r2
   828fc:	4648      	mov	r0, r9
   828fe:	69e1      	ldr	r1, [r4, #28]
   82900:	465a      	mov	r2, fp
   82902:	47b8      	blx	r7
   82904:	2800      	cmp	r0, #0
   82906:	f73f af47 	bgt.w	82798 <__sfvwrite_r+0x138>
   8290a:	e77d      	b.n	82808 <__sfvwrite_r+0x1a8>
   8290c:	4662      	mov	r2, ip
   8290e:	4659      	mov	r1, fp
   82910:	f8cd c004 	str.w	ip, [sp, #4]
   82914:	f000 fc24 	bl	83160 <memmove>
   82918:	6823      	ldr	r3, [r4, #0]
   8291a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8291e:	4648      	mov	r0, r9
   82920:	4463      	add	r3, ip
   82922:	6023      	str	r3, [r4, #0]
   82924:	4621      	mov	r1, r4
   82926:	f7ff fc57 	bl	821d8 <_fflush_r>
   8292a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8292e:	2800      	cmp	r0, #0
   82930:	f47f af6a 	bne.w	82808 <__sfvwrite_r+0x1a8>
   82934:	4667      	mov	r7, ip
   82936:	e794      	b.n	82862 <__sfvwrite_r+0x202>
   82938:	4648      	mov	r0, r9
   8293a:	f000 fc79 	bl	83230 <_realloc_r>
   8293e:	9b00      	ldr	r3, [sp, #0]
   82940:	4682      	mov	sl, r0
   82942:	2800      	cmp	r0, #0
   82944:	f47f af12 	bne.w	8276c <__sfvwrite_r+0x10c>
   82948:	4648      	mov	r0, r9
   8294a:	6921      	ldr	r1, [r4, #16]
   8294c:	f7ff fdb0 	bl	824b0 <_free_r>
   82950:	89a3      	ldrh	r3, [r4, #12]
   82952:	220c      	movs	r2, #12
   82954:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82958:	b29b      	uxth	r3, r3
   8295a:	f8c9 2000 	str.w	r2, [r9]
   8295e:	e754      	b.n	8280a <__sfvwrite_r+0x1aa>
   82960:	2301      	movs	r3, #1
   82962:	f10a 0801 	add.w	r8, sl, #1
   82966:	9300      	str	r3, [sp, #0]
   82968:	e761      	b.n	8282e <__sfvwrite_r+0x1ce>
   8296a:	f04f 30ff 	mov.w	r0, #4294967295
   8296e:	e6ac      	b.n	826ca <__sfvwrite_r+0x6a>
   82970:	230c      	movs	r3, #12
   82972:	f8c9 3000 	str.w	r3, [r9]
   82976:	89a3      	ldrh	r3, [r4, #12]
   82978:	e747      	b.n	8280a <__sfvwrite_r+0x1aa>
   8297a:	bf00      	nop
   8297c:	7ffffc00 	.word	0x7ffffc00

00082980 <_fwalk_reent>:
   82980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82984:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   82988:	d01e      	beq.n	829c8 <_fwalk_reent+0x48>
   8298a:	4688      	mov	r8, r1
   8298c:	4607      	mov	r7, r0
   8298e:	f04f 0900 	mov.w	r9, #0
   82992:	6875      	ldr	r5, [r6, #4]
   82994:	68b4      	ldr	r4, [r6, #8]
   82996:	3d01      	subs	r5, #1
   82998:	d410      	bmi.n	829bc <_fwalk_reent+0x3c>
   8299a:	89a3      	ldrh	r3, [r4, #12]
   8299c:	3d01      	subs	r5, #1
   8299e:	2b01      	cmp	r3, #1
   829a0:	d908      	bls.n	829b4 <_fwalk_reent+0x34>
   829a2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   829a6:	3301      	adds	r3, #1
   829a8:	d004      	beq.n	829b4 <_fwalk_reent+0x34>
   829aa:	4638      	mov	r0, r7
   829ac:	4621      	mov	r1, r4
   829ae:	47c0      	blx	r8
   829b0:	ea49 0900 	orr.w	r9, r9, r0
   829b4:	1c6b      	adds	r3, r5, #1
   829b6:	f104 0468 	add.w	r4, r4, #104	; 0x68
   829ba:	d1ee      	bne.n	8299a <_fwalk_reent+0x1a>
   829bc:	6836      	ldr	r6, [r6, #0]
   829be:	2e00      	cmp	r6, #0
   829c0:	d1e7      	bne.n	82992 <_fwalk_reent+0x12>
   829c2:	4648      	mov	r0, r9
   829c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   829c8:	46b1      	mov	r9, r6
   829ca:	4648      	mov	r0, r9
   829cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000829d0 <__locale_charset>:
   829d0:	4800      	ldr	r0, [pc, #0]	; (829d4 <__locale_charset+0x4>)
   829d2:	4770      	bx	lr
   829d4:	200705a4 	.word	0x200705a4

000829d8 <__locale_mb_cur_max>:
   829d8:	4b01      	ldr	r3, [pc, #4]	; (829e0 <__locale_mb_cur_max+0x8>)
   829da:	6818      	ldr	r0, [r3, #0]
   829dc:	4770      	bx	lr
   829de:	bf00      	nop
   829e0:	200705c4 	.word	0x200705c4

000829e4 <__smakebuf_r>:
   829e4:	898b      	ldrh	r3, [r1, #12]
   829e6:	b29a      	uxth	r2, r3
   829e8:	f012 0f02 	tst.w	r2, #2
   829ec:	d13c      	bne.n	82a68 <__smakebuf_r+0x84>
   829ee:	b5f0      	push	{r4, r5, r6, r7, lr}
   829f0:	460c      	mov	r4, r1
   829f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   829f6:	b091      	sub	sp, #68	; 0x44
   829f8:	2900      	cmp	r1, #0
   829fa:	4605      	mov	r5, r0
   829fc:	db19      	blt.n	82a32 <__smakebuf_r+0x4e>
   829fe:	aa01      	add	r2, sp, #4
   82a00:	f000 ffce 	bl	839a0 <_fstat_r>
   82a04:	2800      	cmp	r0, #0
   82a06:	db12      	blt.n	82a2e <__smakebuf_r+0x4a>
   82a08:	9b02      	ldr	r3, [sp, #8]
   82a0a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   82a0e:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
   82a12:	fab7 f787 	clz	r7, r7
   82a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   82a1a:	ea4f 1757 	mov.w	r7, r7, lsr #5
   82a1e:	d02a      	beq.n	82a76 <__smakebuf_r+0x92>
   82a20:	89a3      	ldrh	r3, [r4, #12]
   82a22:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82a26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82a2a:	81a3      	strh	r3, [r4, #12]
   82a2c:	e00b      	b.n	82a46 <__smakebuf_r+0x62>
   82a2e:	89a3      	ldrh	r3, [r4, #12]
   82a30:	b29a      	uxth	r2, r3
   82a32:	f012 0f80 	tst.w	r2, #128	; 0x80
   82a36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82a3a:	81a3      	strh	r3, [r4, #12]
   82a3c:	bf0c      	ite	eq
   82a3e:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   82a42:	2640      	movne	r6, #64	; 0x40
   82a44:	2700      	movs	r7, #0
   82a46:	4628      	mov	r0, r5
   82a48:	4631      	mov	r1, r6
   82a4a:	f000 f843 	bl	82ad4 <_malloc_r>
   82a4e:	89a3      	ldrh	r3, [r4, #12]
   82a50:	b340      	cbz	r0, 82aa4 <__smakebuf_r+0xc0>
   82a52:	4a1a      	ldr	r2, [pc, #104]	; (82abc <__smakebuf_r+0xd8>)
   82a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82a58:	63ea      	str	r2, [r5, #60]	; 0x3c
   82a5a:	81a3      	strh	r3, [r4, #12]
   82a5c:	6020      	str	r0, [r4, #0]
   82a5e:	6120      	str	r0, [r4, #16]
   82a60:	6166      	str	r6, [r4, #20]
   82a62:	b99f      	cbnz	r7, 82a8c <__smakebuf_r+0xa8>
   82a64:	b011      	add	sp, #68	; 0x44
   82a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82a68:	f101 0343 	add.w	r3, r1, #67	; 0x43
   82a6c:	2201      	movs	r2, #1
   82a6e:	600b      	str	r3, [r1, #0]
   82a70:	610b      	str	r3, [r1, #16]
   82a72:	614a      	str	r2, [r1, #20]
   82a74:	4770      	bx	lr
   82a76:	4b12      	ldr	r3, [pc, #72]	; (82ac0 <__smakebuf_r+0xdc>)
   82a78:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   82a7a:	429a      	cmp	r2, r3
   82a7c:	d1d0      	bne.n	82a20 <__smakebuf_r+0x3c>
   82a7e:	89a3      	ldrh	r3, [r4, #12]
   82a80:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82a84:	4333      	orrs	r3, r6
   82a86:	81a3      	strh	r3, [r4, #12]
   82a88:	64e6      	str	r6, [r4, #76]	; 0x4c
   82a8a:	e7dc      	b.n	82a46 <__smakebuf_r+0x62>
   82a8c:	4628      	mov	r0, r5
   82a8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82a92:	f000 ff99 	bl	839c8 <_isatty_r>
   82a96:	2800      	cmp	r0, #0
   82a98:	d0e4      	beq.n	82a64 <__smakebuf_r+0x80>
   82a9a:	89a3      	ldrh	r3, [r4, #12]
   82a9c:	f043 0301 	orr.w	r3, r3, #1
   82aa0:	81a3      	strh	r3, [r4, #12]
   82aa2:	e7df      	b.n	82a64 <__smakebuf_r+0x80>
   82aa4:	059a      	lsls	r2, r3, #22
   82aa6:	d4dd      	bmi.n	82a64 <__smakebuf_r+0x80>
   82aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82aac:	f043 0302 	orr.w	r3, r3, #2
   82ab0:	2101      	movs	r1, #1
   82ab2:	81a3      	strh	r3, [r4, #12]
   82ab4:	6022      	str	r2, [r4, #0]
   82ab6:	6122      	str	r2, [r4, #16]
   82ab8:	6161      	str	r1, [r4, #20]
   82aba:	e7d3      	b.n	82a64 <__smakebuf_r+0x80>
   82abc:	00082205 	.word	0x00082205
   82ac0:	00083691 	.word	0x00083691

00082ac4 <malloc>:
   82ac4:	4b02      	ldr	r3, [pc, #8]	; (82ad0 <malloc+0xc>)
   82ac6:	4601      	mov	r1, r0
   82ac8:	6818      	ldr	r0, [r3, #0]
   82aca:	f000 b803 	b.w	82ad4 <_malloc_r>
   82ace:	bf00      	nop
   82ad0:	200705a0 	.word	0x200705a0

00082ad4 <_malloc_r>:
   82ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82ad8:	f101 050b 	add.w	r5, r1, #11
   82adc:	2d16      	cmp	r5, #22
   82ade:	b083      	sub	sp, #12
   82ae0:	4606      	mov	r6, r0
   82ae2:	d927      	bls.n	82b34 <_malloc_r+0x60>
   82ae4:	f035 0507 	bics.w	r5, r5, #7
   82ae8:	f100 80b6 	bmi.w	82c58 <_malloc_r+0x184>
   82aec:	42a9      	cmp	r1, r5
   82aee:	f200 80b3 	bhi.w	82c58 <_malloc_r+0x184>
   82af2:	f000 fb99 	bl	83228 <__malloc_lock>
   82af6:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   82afa:	d222      	bcs.n	82b42 <_malloc_r+0x6e>
   82afc:	4fbc      	ldr	r7, [pc, #752]	; (82df0 <_malloc_r+0x31c>)
   82afe:	08e8      	lsrs	r0, r5, #3
   82b00:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   82b04:	68dc      	ldr	r4, [r3, #12]
   82b06:	429c      	cmp	r4, r3
   82b08:	f000 81bc 	beq.w	82e84 <_malloc_r+0x3b0>
   82b0c:	6863      	ldr	r3, [r4, #4]
   82b0e:	68e1      	ldr	r1, [r4, #12]
   82b10:	f023 0303 	bic.w	r3, r3, #3
   82b14:	4423      	add	r3, r4
   82b16:	685a      	ldr	r2, [r3, #4]
   82b18:	68a5      	ldr	r5, [r4, #8]
   82b1a:	f042 0201 	orr.w	r2, r2, #1
   82b1e:	60e9      	str	r1, [r5, #12]
   82b20:	4630      	mov	r0, r6
   82b22:	608d      	str	r5, [r1, #8]
   82b24:	605a      	str	r2, [r3, #4]
   82b26:	f000 fb81 	bl	8322c <__malloc_unlock>
   82b2a:	3408      	adds	r4, #8
   82b2c:	4620      	mov	r0, r4
   82b2e:	b003      	add	sp, #12
   82b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82b34:	2910      	cmp	r1, #16
   82b36:	f200 808f 	bhi.w	82c58 <_malloc_r+0x184>
   82b3a:	f000 fb75 	bl	83228 <__malloc_lock>
   82b3e:	2510      	movs	r5, #16
   82b40:	e7dc      	b.n	82afc <_malloc_r+0x28>
   82b42:	0a68      	lsrs	r0, r5, #9
   82b44:	f000 808f 	beq.w	82c66 <_malloc_r+0x192>
   82b48:	2804      	cmp	r0, #4
   82b4a:	f200 8147 	bhi.w	82ddc <_malloc_r+0x308>
   82b4e:	09a8      	lsrs	r0, r5, #6
   82b50:	3038      	adds	r0, #56	; 0x38
   82b52:	0041      	lsls	r1, r0, #1
   82b54:	4fa6      	ldr	r7, [pc, #664]	; (82df0 <_malloc_r+0x31c>)
   82b56:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   82b5a:	68cc      	ldr	r4, [r1, #12]
   82b5c:	42a1      	cmp	r1, r4
   82b5e:	d106      	bne.n	82b6e <_malloc_r+0x9a>
   82b60:	e00c      	b.n	82b7c <_malloc_r+0xa8>
   82b62:	2a00      	cmp	r2, #0
   82b64:	f280 8082 	bge.w	82c6c <_malloc_r+0x198>
   82b68:	68e4      	ldr	r4, [r4, #12]
   82b6a:	42a1      	cmp	r1, r4
   82b6c:	d006      	beq.n	82b7c <_malloc_r+0xa8>
   82b6e:	6863      	ldr	r3, [r4, #4]
   82b70:	f023 0303 	bic.w	r3, r3, #3
   82b74:	1b5a      	subs	r2, r3, r5
   82b76:	2a0f      	cmp	r2, #15
   82b78:	ddf3      	ble.n	82b62 <_malloc_r+0x8e>
   82b7a:	3801      	subs	r0, #1
   82b7c:	3001      	adds	r0, #1
   82b7e:	499c      	ldr	r1, [pc, #624]	; (82df0 <_malloc_r+0x31c>)
   82b80:	693c      	ldr	r4, [r7, #16]
   82b82:	f101 0e08 	add.w	lr, r1, #8
   82b86:	4574      	cmp	r4, lr
   82b88:	f000 8171 	beq.w	82e6e <_malloc_r+0x39a>
   82b8c:	6863      	ldr	r3, [r4, #4]
   82b8e:	f023 0303 	bic.w	r3, r3, #3
   82b92:	1b5a      	subs	r2, r3, r5
   82b94:	2a0f      	cmp	r2, #15
   82b96:	f300 8157 	bgt.w	82e48 <_malloc_r+0x374>
   82b9a:	2a00      	cmp	r2, #0
   82b9c:	f8c1 e014 	str.w	lr, [r1, #20]
   82ba0:	f8c1 e010 	str.w	lr, [r1, #16]
   82ba4:	da66      	bge.n	82c74 <_malloc_r+0x1a0>
   82ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82baa:	f080 812d 	bcs.w	82e08 <_malloc_r+0x334>
   82bae:	08db      	lsrs	r3, r3, #3
   82bb0:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   82bb4:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   82bb8:	684a      	ldr	r2, [r1, #4]
   82bba:	2301      	movs	r3, #1
   82bbc:	fa03 f30c 	lsl.w	r3, r3, ip
   82bc0:	f8d8 c008 	ldr.w	ip, [r8, #8]
   82bc4:	4313      	orrs	r3, r2
   82bc6:	f8c4 c008 	str.w	ip, [r4, #8]
   82bca:	f8c4 800c 	str.w	r8, [r4, #12]
   82bce:	604b      	str	r3, [r1, #4]
   82bd0:	f8c8 4008 	str.w	r4, [r8, #8]
   82bd4:	f8cc 400c 	str.w	r4, [ip, #12]
   82bd8:	1082      	asrs	r2, r0, #2
   82bda:	2401      	movs	r4, #1
   82bdc:	4094      	lsls	r4, r2
   82bde:	429c      	cmp	r4, r3
   82be0:	d855      	bhi.n	82c8e <_malloc_r+0x1ba>
   82be2:	4223      	tst	r3, r4
   82be4:	d106      	bne.n	82bf4 <_malloc_r+0x120>
   82be6:	f020 0003 	bic.w	r0, r0, #3
   82bea:	0064      	lsls	r4, r4, #1
   82bec:	4223      	tst	r3, r4
   82bee:	f100 0004 	add.w	r0, r0, #4
   82bf2:	d0fa      	beq.n	82bea <_malloc_r+0x116>
   82bf4:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   82bf8:	46c4      	mov	ip, r8
   82bfa:	4681      	mov	r9, r0
   82bfc:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82c00:	459c      	cmp	ip, r3
   82c02:	d107      	bne.n	82c14 <_malloc_r+0x140>
   82c04:	e135      	b.n	82e72 <_malloc_r+0x39e>
   82c06:	2900      	cmp	r1, #0
   82c08:	f280 8145 	bge.w	82e96 <_malloc_r+0x3c2>
   82c0c:	68db      	ldr	r3, [r3, #12]
   82c0e:	459c      	cmp	ip, r3
   82c10:	f000 812f 	beq.w	82e72 <_malloc_r+0x39e>
   82c14:	685a      	ldr	r2, [r3, #4]
   82c16:	f022 0203 	bic.w	r2, r2, #3
   82c1a:	1b51      	subs	r1, r2, r5
   82c1c:	290f      	cmp	r1, #15
   82c1e:	ddf2      	ble.n	82c06 <_malloc_r+0x132>
   82c20:	461c      	mov	r4, r3
   82c22:	68da      	ldr	r2, [r3, #12]
   82c24:	f854 cf08 	ldr.w	ip, [r4, #8]!
   82c28:	f045 0901 	orr.w	r9, r5, #1
   82c2c:	f041 0801 	orr.w	r8, r1, #1
   82c30:	441d      	add	r5, r3
   82c32:	f8c3 9004 	str.w	r9, [r3, #4]
   82c36:	4630      	mov	r0, r6
   82c38:	f8cc 200c 	str.w	r2, [ip, #12]
   82c3c:	f8c2 c008 	str.w	ip, [r2, #8]
   82c40:	617d      	str	r5, [r7, #20]
   82c42:	613d      	str	r5, [r7, #16]
   82c44:	f8c5 e00c 	str.w	lr, [r5, #12]
   82c48:	f8c5 e008 	str.w	lr, [r5, #8]
   82c4c:	f8c5 8004 	str.w	r8, [r5, #4]
   82c50:	5069      	str	r1, [r5, r1]
   82c52:	f000 faeb 	bl	8322c <__malloc_unlock>
   82c56:	e769      	b.n	82b2c <_malloc_r+0x58>
   82c58:	2400      	movs	r4, #0
   82c5a:	4620      	mov	r0, r4
   82c5c:	230c      	movs	r3, #12
   82c5e:	6033      	str	r3, [r6, #0]
   82c60:	b003      	add	sp, #12
   82c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c66:	217e      	movs	r1, #126	; 0x7e
   82c68:	203f      	movs	r0, #63	; 0x3f
   82c6a:	e773      	b.n	82b54 <_malloc_r+0x80>
   82c6c:	4423      	add	r3, r4
   82c6e:	685a      	ldr	r2, [r3, #4]
   82c70:	68e1      	ldr	r1, [r4, #12]
   82c72:	e751      	b.n	82b18 <_malloc_r+0x44>
   82c74:	4423      	add	r3, r4
   82c76:	685a      	ldr	r2, [r3, #4]
   82c78:	4630      	mov	r0, r6
   82c7a:	f042 0201 	orr.w	r2, r2, #1
   82c7e:	605a      	str	r2, [r3, #4]
   82c80:	3408      	adds	r4, #8
   82c82:	f000 fad3 	bl	8322c <__malloc_unlock>
   82c86:	4620      	mov	r0, r4
   82c88:	b003      	add	sp, #12
   82c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c8e:	68bc      	ldr	r4, [r7, #8]
   82c90:	6863      	ldr	r3, [r4, #4]
   82c92:	f023 0803 	bic.w	r8, r3, #3
   82c96:	4545      	cmp	r5, r8
   82c98:	d804      	bhi.n	82ca4 <_malloc_r+0x1d0>
   82c9a:	ebc5 0308 	rsb	r3, r5, r8
   82c9e:	2b0f      	cmp	r3, #15
   82ca0:	f300 808c 	bgt.w	82dbc <_malloc_r+0x2e8>
   82ca4:	4b53      	ldr	r3, [pc, #332]	; (82df4 <_malloc_r+0x320>)
   82ca6:	f8df a15c 	ldr.w	sl, [pc, #348]	; 82e04 <_malloc_r+0x330>
   82caa:	681a      	ldr	r2, [r3, #0]
   82cac:	f8da 3000 	ldr.w	r3, [sl]
   82cb0:	442a      	add	r2, r5
   82cb2:	3301      	adds	r3, #1
   82cb4:	eb04 0b08 	add.w	fp, r4, r8
   82cb8:	f000 8151 	beq.w	82f5e <_malloc_r+0x48a>
   82cbc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   82cc0:	320f      	adds	r2, #15
   82cc2:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   82cc6:	f022 020f 	bic.w	r2, r2, #15
   82cca:	4611      	mov	r1, r2
   82ccc:	4630      	mov	r0, r6
   82cce:	9201      	str	r2, [sp, #4]
   82cd0:	f000 fc9e 	bl	83610 <_sbrk_r>
   82cd4:	f1b0 3fff 	cmp.w	r0, #4294967295
   82cd8:	4681      	mov	r9, r0
   82cda:	9a01      	ldr	r2, [sp, #4]
   82cdc:	f000 8148 	beq.w	82f70 <_malloc_r+0x49c>
   82ce0:	4583      	cmp	fp, r0
   82ce2:	f200 80ef 	bhi.w	82ec4 <_malloc_r+0x3f0>
   82ce6:	4b44      	ldr	r3, [pc, #272]	; (82df8 <_malloc_r+0x324>)
   82ce8:	45cb      	cmp	fp, r9
   82cea:	6819      	ldr	r1, [r3, #0]
   82cec:	4411      	add	r1, r2
   82cee:	6019      	str	r1, [r3, #0]
   82cf0:	f000 8143 	beq.w	82f7a <_malloc_r+0x4a6>
   82cf4:	f8da 0000 	ldr.w	r0, [sl]
   82cf8:	f8df e108 	ldr.w	lr, [pc, #264]	; 82e04 <_malloc_r+0x330>
   82cfc:	3001      	adds	r0, #1
   82cfe:	bf1b      	ittet	ne
   82d00:	ebcb 0b09 	rsbne	fp, fp, r9
   82d04:	4459      	addne	r1, fp
   82d06:	f8ce 9000 	streq.w	r9, [lr]
   82d0a:	6019      	strne	r1, [r3, #0]
   82d0c:	f019 0107 	ands.w	r1, r9, #7
   82d10:	f000 8108 	beq.w	82f24 <_malloc_r+0x450>
   82d14:	f1c1 0008 	rsb	r0, r1, #8
   82d18:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   82d1c:	4481      	add	r9, r0
   82d1e:	3108      	adds	r1, #8
   82d20:	444a      	add	r2, r9
   82d22:	f3c2 020b 	ubfx	r2, r2, #0, #12
   82d26:	ebc2 0a01 	rsb	sl, r2, r1
   82d2a:	4651      	mov	r1, sl
   82d2c:	4630      	mov	r0, r6
   82d2e:	9301      	str	r3, [sp, #4]
   82d30:	f000 fc6e 	bl	83610 <_sbrk_r>
   82d34:	1c43      	adds	r3, r0, #1
   82d36:	9b01      	ldr	r3, [sp, #4]
   82d38:	f000 812d 	beq.w	82f96 <_malloc_r+0x4c2>
   82d3c:	ebc9 0200 	rsb	r2, r9, r0
   82d40:	4452      	add	r2, sl
   82d42:	f042 0201 	orr.w	r2, r2, #1
   82d46:	6819      	ldr	r1, [r3, #0]
   82d48:	42bc      	cmp	r4, r7
   82d4a:	4451      	add	r1, sl
   82d4c:	f8c7 9008 	str.w	r9, [r7, #8]
   82d50:	6019      	str	r1, [r3, #0]
   82d52:	f8c9 2004 	str.w	r2, [r9, #4]
   82d56:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 82df8 <_malloc_r+0x324>
   82d5a:	d016      	beq.n	82d8a <_malloc_r+0x2b6>
   82d5c:	f1b8 0f0f 	cmp.w	r8, #15
   82d60:	f240 80ef 	bls.w	82f42 <_malloc_r+0x46e>
   82d64:	6862      	ldr	r2, [r4, #4]
   82d66:	f1a8 030c 	sub.w	r3, r8, #12
   82d6a:	f023 0307 	bic.w	r3, r3, #7
   82d6e:	f002 0201 	and.w	r2, r2, #1
   82d72:	18e0      	adds	r0, r4, r3
   82d74:	f04f 0e05 	mov.w	lr, #5
   82d78:	431a      	orrs	r2, r3
   82d7a:	2b0f      	cmp	r3, #15
   82d7c:	6062      	str	r2, [r4, #4]
   82d7e:	f8c0 e004 	str.w	lr, [r0, #4]
   82d82:	f8c0 e008 	str.w	lr, [r0, #8]
   82d86:	f200 810a 	bhi.w	82f9e <_malloc_r+0x4ca>
   82d8a:	4b1c      	ldr	r3, [pc, #112]	; (82dfc <_malloc_r+0x328>)
   82d8c:	68bc      	ldr	r4, [r7, #8]
   82d8e:	681a      	ldr	r2, [r3, #0]
   82d90:	4291      	cmp	r1, r2
   82d92:	bf88      	it	hi
   82d94:	6019      	strhi	r1, [r3, #0]
   82d96:	4b1a      	ldr	r3, [pc, #104]	; (82e00 <_malloc_r+0x32c>)
   82d98:	681a      	ldr	r2, [r3, #0]
   82d9a:	4291      	cmp	r1, r2
   82d9c:	6862      	ldr	r2, [r4, #4]
   82d9e:	bf88      	it	hi
   82da0:	6019      	strhi	r1, [r3, #0]
   82da2:	f022 0203 	bic.w	r2, r2, #3
   82da6:	4295      	cmp	r5, r2
   82da8:	eba2 0305 	sub.w	r3, r2, r5
   82dac:	d801      	bhi.n	82db2 <_malloc_r+0x2de>
   82dae:	2b0f      	cmp	r3, #15
   82db0:	dc04      	bgt.n	82dbc <_malloc_r+0x2e8>
   82db2:	4630      	mov	r0, r6
   82db4:	f000 fa3a 	bl	8322c <__malloc_unlock>
   82db8:	2400      	movs	r4, #0
   82dba:	e6b7      	b.n	82b2c <_malloc_r+0x58>
   82dbc:	f045 0201 	orr.w	r2, r5, #1
   82dc0:	f043 0301 	orr.w	r3, r3, #1
   82dc4:	4425      	add	r5, r4
   82dc6:	6062      	str	r2, [r4, #4]
   82dc8:	4630      	mov	r0, r6
   82dca:	60bd      	str	r5, [r7, #8]
   82dcc:	3408      	adds	r4, #8
   82dce:	606b      	str	r3, [r5, #4]
   82dd0:	f000 fa2c 	bl	8322c <__malloc_unlock>
   82dd4:	4620      	mov	r0, r4
   82dd6:	b003      	add	sp, #12
   82dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ddc:	2814      	cmp	r0, #20
   82dde:	d969      	bls.n	82eb4 <_malloc_r+0x3e0>
   82de0:	2854      	cmp	r0, #84	; 0x54
   82de2:	f200 8098 	bhi.w	82f16 <_malloc_r+0x442>
   82de6:	0b28      	lsrs	r0, r5, #12
   82de8:	306e      	adds	r0, #110	; 0x6e
   82dea:	0041      	lsls	r1, r0, #1
   82dec:	e6b2      	b.n	82b54 <_malloc_r+0x80>
   82dee:	bf00      	nop
   82df0:	200705c8 	.word	0x200705c8
   82df4:	20070b1c 	.word	0x20070b1c
   82df8:	20070b20 	.word	0x20070b20
   82dfc:	20070b18 	.word	0x20070b18
   82e00:	20070b14 	.word	0x20070b14
   82e04:	200709d4 	.word	0x200709d4
   82e08:	0a5a      	lsrs	r2, r3, #9
   82e0a:	2a04      	cmp	r2, #4
   82e0c:	d955      	bls.n	82eba <_malloc_r+0x3e6>
   82e0e:	2a14      	cmp	r2, #20
   82e10:	f200 80a7 	bhi.w	82f62 <_malloc_r+0x48e>
   82e14:	325b      	adds	r2, #91	; 0x5b
   82e16:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   82e1a:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   82e1e:	f8dc 1008 	ldr.w	r1, [ip, #8]
   82e22:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 82fdc <_malloc_r+0x508>
   82e26:	4561      	cmp	r1, ip
   82e28:	d07f      	beq.n	82f2a <_malloc_r+0x456>
   82e2a:	684a      	ldr	r2, [r1, #4]
   82e2c:	f022 0203 	bic.w	r2, r2, #3
   82e30:	4293      	cmp	r3, r2
   82e32:	d202      	bcs.n	82e3a <_malloc_r+0x366>
   82e34:	6889      	ldr	r1, [r1, #8]
   82e36:	458c      	cmp	ip, r1
   82e38:	d1f7      	bne.n	82e2a <_malloc_r+0x356>
   82e3a:	68ca      	ldr	r2, [r1, #12]
   82e3c:	687b      	ldr	r3, [r7, #4]
   82e3e:	60e2      	str	r2, [r4, #12]
   82e40:	60a1      	str	r1, [r4, #8]
   82e42:	6094      	str	r4, [r2, #8]
   82e44:	60cc      	str	r4, [r1, #12]
   82e46:	e6c7      	b.n	82bd8 <_malloc_r+0x104>
   82e48:	f045 0701 	orr.w	r7, r5, #1
   82e4c:	f042 0301 	orr.w	r3, r2, #1
   82e50:	4425      	add	r5, r4
   82e52:	6067      	str	r7, [r4, #4]
   82e54:	4630      	mov	r0, r6
   82e56:	614d      	str	r5, [r1, #20]
   82e58:	610d      	str	r5, [r1, #16]
   82e5a:	f8c5 e00c 	str.w	lr, [r5, #12]
   82e5e:	f8c5 e008 	str.w	lr, [r5, #8]
   82e62:	606b      	str	r3, [r5, #4]
   82e64:	50aa      	str	r2, [r5, r2]
   82e66:	3408      	adds	r4, #8
   82e68:	f000 f9e0 	bl	8322c <__malloc_unlock>
   82e6c:	e65e      	b.n	82b2c <_malloc_r+0x58>
   82e6e:	684b      	ldr	r3, [r1, #4]
   82e70:	e6b2      	b.n	82bd8 <_malloc_r+0x104>
   82e72:	f109 0901 	add.w	r9, r9, #1
   82e76:	f019 0f03 	tst.w	r9, #3
   82e7a:	f10c 0c08 	add.w	ip, ip, #8
   82e7e:	f47f aebd 	bne.w	82bfc <_malloc_r+0x128>
   82e82:	e02c      	b.n	82ede <_malloc_r+0x40a>
   82e84:	f104 0308 	add.w	r3, r4, #8
   82e88:	6964      	ldr	r4, [r4, #20]
   82e8a:	42a3      	cmp	r3, r4
   82e8c:	bf08      	it	eq
   82e8e:	3002      	addeq	r0, #2
   82e90:	f43f ae75 	beq.w	82b7e <_malloc_r+0xaa>
   82e94:	e63a      	b.n	82b0c <_malloc_r+0x38>
   82e96:	461c      	mov	r4, r3
   82e98:	441a      	add	r2, r3
   82e9a:	6851      	ldr	r1, [r2, #4]
   82e9c:	68db      	ldr	r3, [r3, #12]
   82e9e:	f854 5f08 	ldr.w	r5, [r4, #8]!
   82ea2:	f041 0101 	orr.w	r1, r1, #1
   82ea6:	6051      	str	r1, [r2, #4]
   82ea8:	4630      	mov	r0, r6
   82eaa:	60eb      	str	r3, [r5, #12]
   82eac:	609d      	str	r5, [r3, #8]
   82eae:	f000 f9bd 	bl	8322c <__malloc_unlock>
   82eb2:	e63b      	b.n	82b2c <_malloc_r+0x58>
   82eb4:	305b      	adds	r0, #91	; 0x5b
   82eb6:	0041      	lsls	r1, r0, #1
   82eb8:	e64c      	b.n	82b54 <_malloc_r+0x80>
   82eba:	099a      	lsrs	r2, r3, #6
   82ebc:	3238      	adds	r2, #56	; 0x38
   82ebe:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   82ec2:	e7aa      	b.n	82e1a <_malloc_r+0x346>
   82ec4:	42bc      	cmp	r4, r7
   82ec6:	4b45      	ldr	r3, [pc, #276]	; (82fdc <_malloc_r+0x508>)
   82ec8:	f43f af0d 	beq.w	82ce6 <_malloc_r+0x212>
   82ecc:	689c      	ldr	r4, [r3, #8]
   82ece:	6862      	ldr	r2, [r4, #4]
   82ed0:	f022 0203 	bic.w	r2, r2, #3
   82ed4:	e767      	b.n	82da6 <_malloc_r+0x2d2>
   82ed6:	f8d8 8000 	ldr.w	r8, [r8]
   82eda:	4598      	cmp	r8, r3
   82edc:	d17c      	bne.n	82fd8 <_malloc_r+0x504>
   82ede:	f010 0f03 	tst.w	r0, #3
   82ee2:	f1a8 0308 	sub.w	r3, r8, #8
   82ee6:	f100 30ff 	add.w	r0, r0, #4294967295
   82eea:	d1f4      	bne.n	82ed6 <_malloc_r+0x402>
   82eec:	687b      	ldr	r3, [r7, #4]
   82eee:	ea23 0304 	bic.w	r3, r3, r4
   82ef2:	607b      	str	r3, [r7, #4]
   82ef4:	0064      	lsls	r4, r4, #1
   82ef6:	429c      	cmp	r4, r3
   82ef8:	f63f aec9 	bhi.w	82c8e <_malloc_r+0x1ba>
   82efc:	2c00      	cmp	r4, #0
   82efe:	f43f aec6 	beq.w	82c8e <_malloc_r+0x1ba>
   82f02:	4223      	tst	r3, r4
   82f04:	4648      	mov	r0, r9
   82f06:	f47f ae75 	bne.w	82bf4 <_malloc_r+0x120>
   82f0a:	0064      	lsls	r4, r4, #1
   82f0c:	4223      	tst	r3, r4
   82f0e:	f100 0004 	add.w	r0, r0, #4
   82f12:	d0fa      	beq.n	82f0a <_malloc_r+0x436>
   82f14:	e66e      	b.n	82bf4 <_malloc_r+0x120>
   82f16:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   82f1a:	d818      	bhi.n	82f4e <_malloc_r+0x47a>
   82f1c:	0be8      	lsrs	r0, r5, #15
   82f1e:	3077      	adds	r0, #119	; 0x77
   82f20:	0041      	lsls	r1, r0, #1
   82f22:	e617      	b.n	82b54 <_malloc_r+0x80>
   82f24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82f28:	e6fa      	b.n	82d20 <_malloc_r+0x24c>
   82f2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   82f2e:	1092      	asrs	r2, r2, #2
   82f30:	f04f 0c01 	mov.w	ip, #1
   82f34:	fa0c f202 	lsl.w	r2, ip, r2
   82f38:	4313      	orrs	r3, r2
   82f3a:	f8c8 3004 	str.w	r3, [r8, #4]
   82f3e:	460a      	mov	r2, r1
   82f40:	e77d      	b.n	82e3e <_malloc_r+0x36a>
   82f42:	2301      	movs	r3, #1
   82f44:	f8c9 3004 	str.w	r3, [r9, #4]
   82f48:	464c      	mov	r4, r9
   82f4a:	2200      	movs	r2, #0
   82f4c:	e72b      	b.n	82da6 <_malloc_r+0x2d2>
   82f4e:	f240 5354 	movw	r3, #1364	; 0x554
   82f52:	4298      	cmp	r0, r3
   82f54:	d81c      	bhi.n	82f90 <_malloc_r+0x4bc>
   82f56:	0ca8      	lsrs	r0, r5, #18
   82f58:	307c      	adds	r0, #124	; 0x7c
   82f5a:	0041      	lsls	r1, r0, #1
   82f5c:	e5fa      	b.n	82b54 <_malloc_r+0x80>
   82f5e:	3210      	adds	r2, #16
   82f60:	e6b3      	b.n	82cca <_malloc_r+0x1f6>
   82f62:	2a54      	cmp	r2, #84	; 0x54
   82f64:	d823      	bhi.n	82fae <_malloc_r+0x4da>
   82f66:	0b1a      	lsrs	r2, r3, #12
   82f68:	326e      	adds	r2, #110	; 0x6e
   82f6a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   82f6e:	e754      	b.n	82e1a <_malloc_r+0x346>
   82f70:	68bc      	ldr	r4, [r7, #8]
   82f72:	6862      	ldr	r2, [r4, #4]
   82f74:	f022 0203 	bic.w	r2, r2, #3
   82f78:	e715      	b.n	82da6 <_malloc_r+0x2d2>
   82f7a:	f3cb 000b 	ubfx	r0, fp, #0, #12
   82f7e:	2800      	cmp	r0, #0
   82f80:	f47f aeb8 	bne.w	82cf4 <_malloc_r+0x220>
   82f84:	4442      	add	r2, r8
   82f86:	68bb      	ldr	r3, [r7, #8]
   82f88:	f042 0201 	orr.w	r2, r2, #1
   82f8c:	605a      	str	r2, [r3, #4]
   82f8e:	e6fc      	b.n	82d8a <_malloc_r+0x2b6>
   82f90:	21fc      	movs	r1, #252	; 0xfc
   82f92:	207e      	movs	r0, #126	; 0x7e
   82f94:	e5de      	b.n	82b54 <_malloc_r+0x80>
   82f96:	2201      	movs	r2, #1
   82f98:	f04f 0a00 	mov.w	sl, #0
   82f9c:	e6d3      	b.n	82d46 <_malloc_r+0x272>
   82f9e:	f104 0108 	add.w	r1, r4, #8
   82fa2:	4630      	mov	r0, r6
   82fa4:	f7ff fa84 	bl	824b0 <_free_r>
   82fa8:	f8da 1000 	ldr.w	r1, [sl]
   82fac:	e6ed      	b.n	82d8a <_malloc_r+0x2b6>
   82fae:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82fb2:	d804      	bhi.n	82fbe <_malloc_r+0x4ea>
   82fb4:	0bda      	lsrs	r2, r3, #15
   82fb6:	3277      	adds	r2, #119	; 0x77
   82fb8:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   82fbc:	e72d      	b.n	82e1a <_malloc_r+0x346>
   82fbe:	f240 5154 	movw	r1, #1364	; 0x554
   82fc2:	428a      	cmp	r2, r1
   82fc4:	d804      	bhi.n	82fd0 <_malloc_r+0x4fc>
   82fc6:	0c9a      	lsrs	r2, r3, #18
   82fc8:	327c      	adds	r2, #124	; 0x7c
   82fca:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   82fce:	e724      	b.n	82e1a <_malloc_r+0x346>
   82fd0:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   82fd4:	227e      	movs	r2, #126	; 0x7e
   82fd6:	e720      	b.n	82e1a <_malloc_r+0x346>
   82fd8:	687b      	ldr	r3, [r7, #4]
   82fda:	e78b      	b.n	82ef4 <_malloc_r+0x420>
   82fdc:	200705c8 	.word	0x200705c8

00082fe0 <memchr>:
   82fe0:	0783      	lsls	r3, r0, #30
   82fe2:	b470      	push	{r4, r5, r6}
   82fe4:	b2c9      	uxtb	r1, r1
   82fe6:	d040      	beq.n	8306a <memchr+0x8a>
   82fe8:	1e54      	subs	r4, r2, #1
   82fea:	2a00      	cmp	r2, #0
   82fec:	d03f      	beq.n	8306e <memchr+0x8e>
   82fee:	7803      	ldrb	r3, [r0, #0]
   82ff0:	428b      	cmp	r3, r1
   82ff2:	bf18      	it	ne
   82ff4:	1c43      	addne	r3, r0, #1
   82ff6:	d105      	bne.n	83004 <memchr+0x24>
   82ff8:	e01c      	b.n	83034 <memchr+0x54>
   82ffa:	b1ec      	cbz	r4, 83038 <memchr+0x58>
   82ffc:	7802      	ldrb	r2, [r0, #0]
   82ffe:	3c01      	subs	r4, #1
   83000:	428a      	cmp	r2, r1
   83002:	d017      	beq.n	83034 <memchr+0x54>
   83004:	f013 0f03 	tst.w	r3, #3
   83008:	4618      	mov	r0, r3
   8300a:	f103 0301 	add.w	r3, r3, #1
   8300e:	d1f4      	bne.n	82ffa <memchr+0x1a>
   83010:	2c03      	cmp	r4, #3
   83012:	d814      	bhi.n	8303e <memchr+0x5e>
   83014:	b184      	cbz	r4, 83038 <memchr+0x58>
   83016:	7803      	ldrb	r3, [r0, #0]
   83018:	428b      	cmp	r3, r1
   8301a:	d00b      	beq.n	83034 <memchr+0x54>
   8301c:	1905      	adds	r5, r0, r4
   8301e:	1c43      	adds	r3, r0, #1
   83020:	e002      	b.n	83028 <memchr+0x48>
   83022:	7802      	ldrb	r2, [r0, #0]
   83024:	428a      	cmp	r2, r1
   83026:	d005      	beq.n	83034 <memchr+0x54>
   83028:	42ab      	cmp	r3, r5
   8302a:	4618      	mov	r0, r3
   8302c:	f103 0301 	add.w	r3, r3, #1
   83030:	d1f7      	bne.n	83022 <memchr+0x42>
   83032:	2000      	movs	r0, #0
   83034:	bc70      	pop	{r4, r5, r6}
   83036:	4770      	bx	lr
   83038:	4620      	mov	r0, r4
   8303a:	bc70      	pop	{r4, r5, r6}
   8303c:	4770      	bx	lr
   8303e:	4602      	mov	r2, r0
   83040:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   83044:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   83048:	6813      	ldr	r3, [r2, #0]
   8304a:	4610      	mov	r0, r2
   8304c:	4073      	eors	r3, r6
   8304e:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   83052:	ea25 0303 	bic.w	r3, r5, r3
   83056:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8305a:	f102 0204 	add.w	r2, r2, #4
   8305e:	d1d9      	bne.n	83014 <memchr+0x34>
   83060:	3c04      	subs	r4, #4
   83062:	2c03      	cmp	r4, #3
   83064:	4610      	mov	r0, r2
   83066:	d8ef      	bhi.n	83048 <memchr+0x68>
   83068:	e7d4      	b.n	83014 <memchr+0x34>
   8306a:	4614      	mov	r4, r2
   8306c:	e7d0      	b.n	83010 <memchr+0x30>
   8306e:	4610      	mov	r0, r2
   83070:	e7e0      	b.n	83034 <memchr+0x54>
   83072:	bf00      	nop

00083074 <memcpy>:
   83074:	4684      	mov	ip, r0
   83076:	ea41 0300 	orr.w	r3, r1, r0
   8307a:	f013 0303 	ands.w	r3, r3, #3
   8307e:	d149      	bne.n	83114 <memcpy+0xa0>
   83080:	3a40      	subs	r2, #64	; 0x40
   83082:	d323      	bcc.n	830cc <memcpy+0x58>
   83084:	680b      	ldr	r3, [r1, #0]
   83086:	6003      	str	r3, [r0, #0]
   83088:	684b      	ldr	r3, [r1, #4]
   8308a:	6043      	str	r3, [r0, #4]
   8308c:	688b      	ldr	r3, [r1, #8]
   8308e:	6083      	str	r3, [r0, #8]
   83090:	68cb      	ldr	r3, [r1, #12]
   83092:	60c3      	str	r3, [r0, #12]
   83094:	690b      	ldr	r3, [r1, #16]
   83096:	6103      	str	r3, [r0, #16]
   83098:	694b      	ldr	r3, [r1, #20]
   8309a:	6143      	str	r3, [r0, #20]
   8309c:	698b      	ldr	r3, [r1, #24]
   8309e:	6183      	str	r3, [r0, #24]
   830a0:	69cb      	ldr	r3, [r1, #28]
   830a2:	61c3      	str	r3, [r0, #28]
   830a4:	6a0b      	ldr	r3, [r1, #32]
   830a6:	6203      	str	r3, [r0, #32]
   830a8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   830aa:	6243      	str	r3, [r0, #36]	; 0x24
   830ac:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   830ae:	6283      	str	r3, [r0, #40]	; 0x28
   830b0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   830b2:	62c3      	str	r3, [r0, #44]	; 0x2c
   830b4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   830b6:	6303      	str	r3, [r0, #48]	; 0x30
   830b8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   830ba:	6343      	str	r3, [r0, #52]	; 0x34
   830bc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   830be:	6383      	str	r3, [r0, #56]	; 0x38
   830c0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   830c2:	63c3      	str	r3, [r0, #60]	; 0x3c
   830c4:	3040      	adds	r0, #64	; 0x40
   830c6:	3140      	adds	r1, #64	; 0x40
   830c8:	3a40      	subs	r2, #64	; 0x40
   830ca:	d2db      	bcs.n	83084 <memcpy+0x10>
   830cc:	3230      	adds	r2, #48	; 0x30
   830ce:	d30b      	bcc.n	830e8 <memcpy+0x74>
   830d0:	680b      	ldr	r3, [r1, #0]
   830d2:	6003      	str	r3, [r0, #0]
   830d4:	684b      	ldr	r3, [r1, #4]
   830d6:	6043      	str	r3, [r0, #4]
   830d8:	688b      	ldr	r3, [r1, #8]
   830da:	6083      	str	r3, [r0, #8]
   830dc:	68cb      	ldr	r3, [r1, #12]
   830de:	60c3      	str	r3, [r0, #12]
   830e0:	3010      	adds	r0, #16
   830e2:	3110      	adds	r1, #16
   830e4:	3a10      	subs	r2, #16
   830e6:	d2f3      	bcs.n	830d0 <memcpy+0x5c>
   830e8:	320c      	adds	r2, #12
   830ea:	d305      	bcc.n	830f8 <memcpy+0x84>
   830ec:	f851 3b04 	ldr.w	r3, [r1], #4
   830f0:	f840 3b04 	str.w	r3, [r0], #4
   830f4:	3a04      	subs	r2, #4
   830f6:	d2f9      	bcs.n	830ec <memcpy+0x78>
   830f8:	3204      	adds	r2, #4
   830fa:	d008      	beq.n	8310e <memcpy+0x9a>
   830fc:	07d2      	lsls	r2, r2, #31
   830fe:	bf1c      	itt	ne
   83100:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83104:	f800 3b01 	strbne.w	r3, [r0], #1
   83108:	d301      	bcc.n	8310e <memcpy+0x9a>
   8310a:	880b      	ldrh	r3, [r1, #0]
   8310c:	8003      	strh	r3, [r0, #0]
   8310e:	4660      	mov	r0, ip
   83110:	4770      	bx	lr
   83112:	bf00      	nop
   83114:	2a08      	cmp	r2, #8
   83116:	d313      	bcc.n	83140 <memcpy+0xcc>
   83118:	078b      	lsls	r3, r1, #30
   8311a:	d0b1      	beq.n	83080 <memcpy+0xc>
   8311c:	f010 0303 	ands.w	r3, r0, #3
   83120:	d0ae      	beq.n	83080 <memcpy+0xc>
   83122:	f1c3 0304 	rsb	r3, r3, #4
   83126:	1ad2      	subs	r2, r2, r3
   83128:	07db      	lsls	r3, r3, #31
   8312a:	bf1c      	itt	ne
   8312c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83130:	f800 3b01 	strbne.w	r3, [r0], #1
   83134:	d3a4      	bcc.n	83080 <memcpy+0xc>
   83136:	f831 3b02 	ldrh.w	r3, [r1], #2
   8313a:	f820 3b02 	strh.w	r3, [r0], #2
   8313e:	e79f      	b.n	83080 <memcpy+0xc>
   83140:	3a04      	subs	r2, #4
   83142:	d3d9      	bcc.n	830f8 <memcpy+0x84>
   83144:	3a01      	subs	r2, #1
   83146:	f811 3b01 	ldrb.w	r3, [r1], #1
   8314a:	f800 3b01 	strb.w	r3, [r0], #1
   8314e:	d2f9      	bcs.n	83144 <memcpy+0xd0>
   83150:	780b      	ldrb	r3, [r1, #0]
   83152:	7003      	strb	r3, [r0, #0]
   83154:	784b      	ldrb	r3, [r1, #1]
   83156:	7043      	strb	r3, [r0, #1]
   83158:	788b      	ldrb	r3, [r1, #2]
   8315a:	7083      	strb	r3, [r0, #2]
   8315c:	4660      	mov	r0, ip
   8315e:	4770      	bx	lr

00083160 <memmove>:
   83160:	4288      	cmp	r0, r1
   83162:	b5f0      	push	{r4, r5, r6, r7, lr}
   83164:	d90d      	bls.n	83182 <memmove+0x22>
   83166:	188b      	adds	r3, r1, r2
   83168:	4298      	cmp	r0, r3
   8316a:	d20a      	bcs.n	83182 <memmove+0x22>
   8316c:	1881      	adds	r1, r0, r2
   8316e:	2a00      	cmp	r2, #0
   83170:	d054      	beq.n	8321c <memmove+0xbc>
   83172:	1a9a      	subs	r2, r3, r2
   83174:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   83178:	4293      	cmp	r3, r2
   8317a:	f801 4d01 	strb.w	r4, [r1, #-1]!
   8317e:	d1f9      	bne.n	83174 <memmove+0x14>
   83180:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83182:	2a0f      	cmp	r2, #15
   83184:	d948      	bls.n	83218 <memmove+0xb8>
   83186:	ea40 0301 	orr.w	r3, r0, r1
   8318a:	079b      	lsls	r3, r3, #30
   8318c:	d147      	bne.n	8321e <memmove+0xbe>
   8318e:	4615      	mov	r5, r2
   83190:	f100 0410 	add.w	r4, r0, #16
   83194:	f101 0310 	add.w	r3, r1, #16
   83198:	f853 6c10 	ldr.w	r6, [r3, #-16]
   8319c:	3d10      	subs	r5, #16
   8319e:	f844 6c10 	str.w	r6, [r4, #-16]
   831a2:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   831a6:	2d0f      	cmp	r5, #15
   831a8:	f844 6c0c 	str.w	r6, [r4, #-12]
   831ac:	f853 6c08 	ldr.w	r6, [r3, #-8]
   831b0:	f104 0410 	add.w	r4, r4, #16
   831b4:	f844 6c18 	str.w	r6, [r4, #-24]
   831b8:	f853 6c04 	ldr.w	r6, [r3, #-4]
   831bc:	f103 0310 	add.w	r3, r3, #16
   831c0:	f844 6c14 	str.w	r6, [r4, #-20]
   831c4:	d8e8      	bhi.n	83198 <memmove+0x38>
   831c6:	f1a2 0310 	sub.w	r3, r2, #16
   831ca:	f023 030f 	bic.w	r3, r3, #15
   831ce:	f002 0e0f 	and.w	lr, r2, #15
   831d2:	3310      	adds	r3, #16
   831d4:	f1be 0f03 	cmp.w	lr, #3
   831d8:	4419      	add	r1, r3
   831da:	4403      	add	r3, r0
   831dc:	d921      	bls.n	83222 <memmove+0xc2>
   831de:	460e      	mov	r6, r1
   831e0:	4674      	mov	r4, lr
   831e2:	1f1d      	subs	r5, r3, #4
   831e4:	f856 7b04 	ldr.w	r7, [r6], #4
   831e8:	3c04      	subs	r4, #4
   831ea:	2c03      	cmp	r4, #3
   831ec:	f845 7f04 	str.w	r7, [r5, #4]!
   831f0:	d8f8      	bhi.n	831e4 <memmove+0x84>
   831f2:	f1ae 0404 	sub.w	r4, lr, #4
   831f6:	f024 0403 	bic.w	r4, r4, #3
   831fa:	3404      	adds	r4, #4
   831fc:	4423      	add	r3, r4
   831fe:	4421      	add	r1, r4
   83200:	f002 0203 	and.w	r2, r2, #3
   83204:	b152      	cbz	r2, 8321c <memmove+0xbc>
   83206:	3b01      	subs	r3, #1
   83208:	440a      	add	r2, r1
   8320a:	f811 4b01 	ldrb.w	r4, [r1], #1
   8320e:	4291      	cmp	r1, r2
   83210:	f803 4f01 	strb.w	r4, [r3, #1]!
   83214:	d1f9      	bne.n	8320a <memmove+0xaa>
   83216:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83218:	4603      	mov	r3, r0
   8321a:	e7f3      	b.n	83204 <memmove+0xa4>
   8321c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8321e:	4603      	mov	r3, r0
   83220:	e7f1      	b.n	83206 <memmove+0xa6>
   83222:	4672      	mov	r2, lr
   83224:	e7ee      	b.n	83204 <memmove+0xa4>
   83226:	bf00      	nop

00083228 <__malloc_lock>:
   83228:	4770      	bx	lr
   8322a:	bf00      	nop

0008322c <__malloc_unlock>:
   8322c:	4770      	bx	lr
   8322e:	bf00      	nop

00083230 <_realloc_r>:
   83230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83234:	4617      	mov	r7, r2
   83236:	b083      	sub	sp, #12
   83238:	460d      	mov	r5, r1
   8323a:	2900      	cmp	r1, #0
   8323c:	f000 80e2 	beq.w	83404 <_realloc_r+0x1d4>
   83240:	4681      	mov	r9, r0
   83242:	f107 040b 	add.w	r4, r7, #11
   83246:	f7ff ffef 	bl	83228 <__malloc_lock>
   8324a:	f855 3c04 	ldr.w	r3, [r5, #-4]
   8324e:	2c16      	cmp	r4, #22
   83250:	f023 0603 	bic.w	r6, r3, #3
   83254:	f1a5 0808 	sub.w	r8, r5, #8
   83258:	d84b      	bhi.n	832f2 <_realloc_r+0xc2>
   8325a:	2210      	movs	r2, #16
   8325c:	4614      	mov	r4, r2
   8325e:	42a7      	cmp	r7, r4
   83260:	d84c      	bhi.n	832fc <_realloc_r+0xcc>
   83262:	4296      	cmp	r6, r2
   83264:	da51      	bge.n	8330a <_realloc_r+0xda>
   83266:	f8df b3a4 	ldr.w	fp, [pc, #932]	; 8360c <_realloc_r+0x3dc>
   8326a:	eb08 0106 	add.w	r1, r8, r6
   8326e:	f8db 0008 	ldr.w	r0, [fp, #8]
   83272:	4288      	cmp	r0, r1
   83274:	f000 80d3 	beq.w	8341e <_realloc_r+0x1ee>
   83278:	6848      	ldr	r0, [r1, #4]
   8327a:	f020 0e01 	bic.w	lr, r0, #1
   8327e:	448e      	add	lr, r1
   83280:	f8de e004 	ldr.w	lr, [lr, #4]
   83284:	f01e 0f01 	tst.w	lr, #1
   83288:	d154      	bne.n	83334 <_realloc_r+0x104>
   8328a:	f020 0003 	bic.w	r0, r0, #3
   8328e:	4430      	add	r0, r6
   83290:	4290      	cmp	r0, r2
   83292:	f280 80bd 	bge.w	83410 <_realloc_r+0x1e0>
   83296:	07db      	lsls	r3, r3, #31
   83298:	f100 8090 	bmi.w	833bc <_realloc_r+0x18c>
   8329c:	f855 3c08 	ldr.w	r3, [r5, #-8]
   832a0:	ebc3 0a08 	rsb	sl, r3, r8
   832a4:	f8da 3004 	ldr.w	r3, [sl, #4]
   832a8:	f023 0303 	bic.w	r3, r3, #3
   832ac:	eb00 0e03 	add.w	lr, r0, r3
   832b0:	4596      	cmp	lr, r2
   832b2:	db49      	blt.n	83348 <_realloc_r+0x118>
   832b4:	4657      	mov	r7, sl
   832b6:	68cb      	ldr	r3, [r1, #12]
   832b8:	6889      	ldr	r1, [r1, #8]
   832ba:	1f32      	subs	r2, r6, #4
   832bc:	60cb      	str	r3, [r1, #12]
   832be:	6099      	str	r1, [r3, #8]
   832c0:	f857 1f08 	ldr.w	r1, [r7, #8]!
   832c4:	f8da 300c 	ldr.w	r3, [sl, #12]
   832c8:	2a24      	cmp	r2, #36	; 0x24
   832ca:	60cb      	str	r3, [r1, #12]
   832cc:	6099      	str	r1, [r3, #8]
   832ce:	f200 8133 	bhi.w	83538 <_realloc_r+0x308>
   832d2:	2a13      	cmp	r2, #19
   832d4:	f240 80fa 	bls.w	834cc <_realloc_r+0x29c>
   832d8:	682b      	ldr	r3, [r5, #0]
   832da:	2a1b      	cmp	r2, #27
   832dc:	f8ca 3008 	str.w	r3, [sl, #8]
   832e0:	686b      	ldr	r3, [r5, #4]
   832e2:	f8ca 300c 	str.w	r3, [sl, #12]
   832e6:	f200 813b 	bhi.w	83560 <_realloc_r+0x330>
   832ea:	3508      	adds	r5, #8
   832ec:	f10a 0310 	add.w	r3, sl, #16
   832f0:	e0ed      	b.n	834ce <_realloc_r+0x29e>
   832f2:	f024 0407 	bic.w	r4, r4, #7
   832f6:	2c00      	cmp	r4, #0
   832f8:	4622      	mov	r2, r4
   832fa:	dab0      	bge.n	8325e <_realloc_r+0x2e>
   832fc:	230c      	movs	r3, #12
   832fe:	2000      	movs	r0, #0
   83300:	f8c9 3000 	str.w	r3, [r9]
   83304:	b003      	add	sp, #12
   83306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8330a:	462f      	mov	r7, r5
   8330c:	1b32      	subs	r2, r6, r4
   8330e:	2a0f      	cmp	r2, #15
   83310:	f003 0301 	and.w	r3, r3, #1
   83314:	d840      	bhi.n	83398 <_realloc_r+0x168>
   83316:	4333      	orrs	r3, r6
   83318:	f8c8 3004 	str.w	r3, [r8, #4]
   8331c:	4446      	add	r6, r8
   8331e:	6873      	ldr	r3, [r6, #4]
   83320:	f043 0301 	orr.w	r3, r3, #1
   83324:	6073      	str	r3, [r6, #4]
   83326:	4648      	mov	r0, r9
   83328:	f7ff ff80 	bl	8322c <__malloc_unlock>
   8332c:	4638      	mov	r0, r7
   8332e:	b003      	add	sp, #12
   83330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83334:	07d9      	lsls	r1, r3, #31
   83336:	d441      	bmi.n	833bc <_realloc_r+0x18c>
   83338:	f855 3c08 	ldr.w	r3, [r5, #-8]
   8333c:	ebc3 0a08 	rsb	sl, r3, r8
   83340:	f8da 3004 	ldr.w	r3, [sl, #4]
   83344:	f023 0303 	bic.w	r3, r3, #3
   83348:	4433      	add	r3, r6
   8334a:	4293      	cmp	r3, r2
   8334c:	db36      	blt.n	833bc <_realloc_r+0x18c>
   8334e:	4657      	mov	r7, sl
   83350:	f8da 100c 	ldr.w	r1, [sl, #12]
   83354:	f857 0f08 	ldr.w	r0, [r7, #8]!
   83358:	1f32      	subs	r2, r6, #4
   8335a:	2a24      	cmp	r2, #36	; 0x24
   8335c:	60c1      	str	r1, [r0, #12]
   8335e:	6088      	str	r0, [r1, #8]
   83360:	f200 80f5 	bhi.w	8354e <_realloc_r+0x31e>
   83364:	2a13      	cmp	r2, #19
   83366:	f240 80f0 	bls.w	8354a <_realloc_r+0x31a>
   8336a:	6829      	ldr	r1, [r5, #0]
   8336c:	2a1b      	cmp	r2, #27
   8336e:	f8ca 1008 	str.w	r1, [sl, #8]
   83372:	6869      	ldr	r1, [r5, #4]
   83374:	f8ca 100c 	str.w	r1, [sl, #12]
   83378:	f200 8107 	bhi.w	8358a <_realloc_r+0x35a>
   8337c:	3508      	adds	r5, #8
   8337e:	f10a 0210 	add.w	r2, sl, #16
   83382:	6829      	ldr	r1, [r5, #0]
   83384:	461e      	mov	r6, r3
   83386:	6011      	str	r1, [r2, #0]
   83388:	6869      	ldr	r1, [r5, #4]
   8338a:	46d0      	mov	r8, sl
   8338c:	6051      	str	r1, [r2, #4]
   8338e:	68ab      	ldr	r3, [r5, #8]
   83390:	6093      	str	r3, [r2, #8]
   83392:	f8da 3004 	ldr.w	r3, [sl, #4]
   83396:	e7b9      	b.n	8330c <_realloc_r+0xdc>
   83398:	eb08 0104 	add.w	r1, r8, r4
   8339c:	4323      	orrs	r3, r4
   8339e:	f042 0001 	orr.w	r0, r2, #1
   833a2:	f8c8 3004 	str.w	r3, [r8, #4]
   833a6:	440a      	add	r2, r1
   833a8:	6048      	str	r0, [r1, #4]
   833aa:	6853      	ldr	r3, [r2, #4]
   833ac:	3108      	adds	r1, #8
   833ae:	f043 0301 	orr.w	r3, r3, #1
   833b2:	6053      	str	r3, [r2, #4]
   833b4:	4648      	mov	r0, r9
   833b6:	f7ff f87b 	bl	824b0 <_free_r>
   833ba:	e7b4      	b.n	83326 <_realloc_r+0xf6>
   833bc:	4639      	mov	r1, r7
   833be:	4648      	mov	r0, r9
   833c0:	f7ff fb88 	bl	82ad4 <_malloc_r>
   833c4:	4607      	mov	r7, r0
   833c6:	2800      	cmp	r0, #0
   833c8:	d0ad      	beq.n	83326 <_realloc_r+0xf6>
   833ca:	f855 3c04 	ldr.w	r3, [r5, #-4]
   833ce:	f1a0 0108 	sub.w	r1, r0, #8
   833d2:	f023 0201 	bic.w	r2, r3, #1
   833d6:	4442      	add	r2, r8
   833d8:	4291      	cmp	r1, r2
   833da:	f000 80a6 	beq.w	8352a <_realloc_r+0x2fa>
   833de:	1f32      	subs	r2, r6, #4
   833e0:	2a24      	cmp	r2, #36	; 0x24
   833e2:	f200 8093 	bhi.w	8350c <_realloc_r+0x2dc>
   833e6:	2a13      	cmp	r2, #19
   833e8:	d865      	bhi.n	834b6 <_realloc_r+0x286>
   833ea:	4603      	mov	r3, r0
   833ec:	462a      	mov	r2, r5
   833ee:	6811      	ldr	r1, [r2, #0]
   833f0:	6019      	str	r1, [r3, #0]
   833f2:	6851      	ldr	r1, [r2, #4]
   833f4:	6059      	str	r1, [r3, #4]
   833f6:	6892      	ldr	r2, [r2, #8]
   833f8:	609a      	str	r2, [r3, #8]
   833fa:	4629      	mov	r1, r5
   833fc:	4648      	mov	r0, r9
   833fe:	f7ff f857 	bl	824b0 <_free_r>
   83402:	e790      	b.n	83326 <_realloc_r+0xf6>
   83404:	4611      	mov	r1, r2
   83406:	b003      	add	sp, #12
   83408:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8340c:	f7ff bb62 	b.w	82ad4 <_malloc_r>
   83410:	68ca      	ldr	r2, [r1, #12]
   83412:	6889      	ldr	r1, [r1, #8]
   83414:	462f      	mov	r7, r5
   83416:	60ca      	str	r2, [r1, #12]
   83418:	4606      	mov	r6, r0
   8341a:	6091      	str	r1, [r2, #8]
   8341c:	e776      	b.n	8330c <_realloc_r+0xdc>
   8341e:	6841      	ldr	r1, [r0, #4]
   83420:	f104 0010 	add.w	r0, r4, #16
   83424:	f021 0103 	bic.w	r1, r1, #3
   83428:	4431      	add	r1, r6
   8342a:	4281      	cmp	r1, r0
   8342c:	da5a      	bge.n	834e4 <_realloc_r+0x2b4>
   8342e:	07db      	lsls	r3, r3, #31
   83430:	d4c4      	bmi.n	833bc <_realloc_r+0x18c>
   83432:	f855 3c08 	ldr.w	r3, [r5, #-8]
   83436:	ebc3 0a08 	rsb	sl, r3, r8
   8343a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8343e:	f023 0303 	bic.w	r3, r3, #3
   83442:	eb01 0c03 	add.w	ip, r1, r3
   83446:	4560      	cmp	r0, ip
   83448:	f73f af7e 	bgt.w	83348 <_realloc_r+0x118>
   8344c:	4657      	mov	r7, sl
   8344e:	f8da 300c 	ldr.w	r3, [sl, #12]
   83452:	f857 1f08 	ldr.w	r1, [r7, #8]!
   83456:	1f32      	subs	r2, r6, #4
   83458:	2a24      	cmp	r2, #36	; 0x24
   8345a:	60cb      	str	r3, [r1, #12]
   8345c:	6099      	str	r1, [r3, #8]
   8345e:	f200 80b6 	bhi.w	835ce <_realloc_r+0x39e>
   83462:	2a13      	cmp	r2, #19
   83464:	f240 80a7 	bls.w	835b6 <_realloc_r+0x386>
   83468:	682b      	ldr	r3, [r5, #0]
   8346a:	2a1b      	cmp	r2, #27
   8346c:	f8ca 3008 	str.w	r3, [sl, #8]
   83470:	686b      	ldr	r3, [r5, #4]
   83472:	f8ca 300c 	str.w	r3, [sl, #12]
   83476:	f200 80b3 	bhi.w	835e0 <_realloc_r+0x3b0>
   8347a:	3508      	adds	r5, #8
   8347c:	f10a 0310 	add.w	r3, sl, #16
   83480:	682a      	ldr	r2, [r5, #0]
   83482:	601a      	str	r2, [r3, #0]
   83484:	686a      	ldr	r2, [r5, #4]
   83486:	605a      	str	r2, [r3, #4]
   83488:	68aa      	ldr	r2, [r5, #8]
   8348a:	609a      	str	r2, [r3, #8]
   8348c:	ebc4 030c 	rsb	r3, r4, ip
   83490:	eb0a 0204 	add.w	r2, sl, r4
   83494:	f043 0301 	orr.w	r3, r3, #1
   83498:	f8cb 2008 	str.w	r2, [fp, #8]
   8349c:	6053      	str	r3, [r2, #4]
   8349e:	f8da 3004 	ldr.w	r3, [sl, #4]
   834a2:	4648      	mov	r0, r9
   834a4:	f003 0301 	and.w	r3, r3, #1
   834a8:	431c      	orrs	r4, r3
   834aa:	f8ca 4004 	str.w	r4, [sl, #4]
   834ae:	f7ff febd 	bl	8322c <__malloc_unlock>
   834b2:	4638      	mov	r0, r7
   834b4:	e73b      	b.n	8332e <_realloc_r+0xfe>
   834b6:	682b      	ldr	r3, [r5, #0]
   834b8:	2a1b      	cmp	r2, #27
   834ba:	6003      	str	r3, [r0, #0]
   834bc:	686b      	ldr	r3, [r5, #4]
   834be:	6043      	str	r3, [r0, #4]
   834c0:	d828      	bhi.n	83514 <_realloc_r+0x2e4>
   834c2:	f100 0308 	add.w	r3, r0, #8
   834c6:	f105 0208 	add.w	r2, r5, #8
   834ca:	e790      	b.n	833ee <_realloc_r+0x1be>
   834cc:	463b      	mov	r3, r7
   834ce:	682a      	ldr	r2, [r5, #0]
   834d0:	4676      	mov	r6, lr
   834d2:	601a      	str	r2, [r3, #0]
   834d4:	686a      	ldr	r2, [r5, #4]
   834d6:	46d0      	mov	r8, sl
   834d8:	605a      	str	r2, [r3, #4]
   834da:	68aa      	ldr	r2, [r5, #8]
   834dc:	609a      	str	r2, [r3, #8]
   834de:	f8da 3004 	ldr.w	r3, [sl, #4]
   834e2:	e713      	b.n	8330c <_realloc_r+0xdc>
   834e4:	1b0b      	subs	r3, r1, r4
   834e6:	eb08 0204 	add.w	r2, r8, r4
   834ea:	f043 0301 	orr.w	r3, r3, #1
   834ee:	f8cb 2008 	str.w	r2, [fp, #8]
   834f2:	6053      	str	r3, [r2, #4]
   834f4:	f855 3c04 	ldr.w	r3, [r5, #-4]
   834f8:	4648      	mov	r0, r9
   834fa:	f003 0301 	and.w	r3, r3, #1
   834fe:	431c      	orrs	r4, r3
   83500:	f845 4c04 	str.w	r4, [r5, #-4]
   83504:	f7ff fe92 	bl	8322c <__malloc_unlock>
   83508:	4628      	mov	r0, r5
   8350a:	e710      	b.n	8332e <_realloc_r+0xfe>
   8350c:	4629      	mov	r1, r5
   8350e:	f7ff fe27 	bl	83160 <memmove>
   83512:	e772      	b.n	833fa <_realloc_r+0x1ca>
   83514:	68ab      	ldr	r3, [r5, #8]
   83516:	2a24      	cmp	r2, #36	; 0x24
   83518:	6083      	str	r3, [r0, #8]
   8351a:	68eb      	ldr	r3, [r5, #12]
   8351c:	60c3      	str	r3, [r0, #12]
   8351e:	d02b      	beq.n	83578 <_realloc_r+0x348>
   83520:	f100 0310 	add.w	r3, r0, #16
   83524:	f105 0210 	add.w	r2, r5, #16
   83528:	e761      	b.n	833ee <_realloc_r+0x1be>
   8352a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8352e:	462f      	mov	r7, r5
   83530:	f022 0203 	bic.w	r2, r2, #3
   83534:	4416      	add	r6, r2
   83536:	e6e9      	b.n	8330c <_realloc_r+0xdc>
   83538:	4629      	mov	r1, r5
   8353a:	4638      	mov	r0, r7
   8353c:	4676      	mov	r6, lr
   8353e:	46d0      	mov	r8, sl
   83540:	f7ff fe0e 	bl	83160 <memmove>
   83544:	f8da 3004 	ldr.w	r3, [sl, #4]
   83548:	e6e0      	b.n	8330c <_realloc_r+0xdc>
   8354a:	463a      	mov	r2, r7
   8354c:	e719      	b.n	83382 <_realloc_r+0x152>
   8354e:	4629      	mov	r1, r5
   83550:	4638      	mov	r0, r7
   83552:	461e      	mov	r6, r3
   83554:	46d0      	mov	r8, sl
   83556:	f7ff fe03 	bl	83160 <memmove>
   8355a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8355e:	e6d5      	b.n	8330c <_realloc_r+0xdc>
   83560:	68ab      	ldr	r3, [r5, #8]
   83562:	2a24      	cmp	r2, #36	; 0x24
   83564:	f8ca 3010 	str.w	r3, [sl, #16]
   83568:	68eb      	ldr	r3, [r5, #12]
   8356a:	f8ca 3014 	str.w	r3, [sl, #20]
   8356e:	d018      	beq.n	835a2 <_realloc_r+0x372>
   83570:	3510      	adds	r5, #16
   83572:	f10a 0318 	add.w	r3, sl, #24
   83576:	e7aa      	b.n	834ce <_realloc_r+0x29e>
   83578:	692a      	ldr	r2, [r5, #16]
   8357a:	f100 0318 	add.w	r3, r0, #24
   8357e:	6102      	str	r2, [r0, #16]
   83580:	6969      	ldr	r1, [r5, #20]
   83582:	f105 0218 	add.w	r2, r5, #24
   83586:	6141      	str	r1, [r0, #20]
   83588:	e731      	b.n	833ee <_realloc_r+0x1be>
   8358a:	68a9      	ldr	r1, [r5, #8]
   8358c:	2a24      	cmp	r2, #36	; 0x24
   8358e:	f8ca 1010 	str.w	r1, [sl, #16]
   83592:	68e9      	ldr	r1, [r5, #12]
   83594:	f8ca 1014 	str.w	r1, [sl, #20]
   83598:	d00f      	beq.n	835ba <_realloc_r+0x38a>
   8359a:	3510      	adds	r5, #16
   8359c:	f10a 0218 	add.w	r2, sl, #24
   835a0:	e6ef      	b.n	83382 <_realloc_r+0x152>
   835a2:	692a      	ldr	r2, [r5, #16]
   835a4:	f10a 0320 	add.w	r3, sl, #32
   835a8:	f8ca 2018 	str.w	r2, [sl, #24]
   835ac:	696a      	ldr	r2, [r5, #20]
   835ae:	3518      	adds	r5, #24
   835b0:	f8ca 201c 	str.w	r2, [sl, #28]
   835b4:	e78b      	b.n	834ce <_realloc_r+0x29e>
   835b6:	463b      	mov	r3, r7
   835b8:	e762      	b.n	83480 <_realloc_r+0x250>
   835ba:	6929      	ldr	r1, [r5, #16]
   835bc:	f10a 0220 	add.w	r2, sl, #32
   835c0:	f8ca 1018 	str.w	r1, [sl, #24]
   835c4:	6969      	ldr	r1, [r5, #20]
   835c6:	3518      	adds	r5, #24
   835c8:	f8ca 101c 	str.w	r1, [sl, #28]
   835cc:	e6d9      	b.n	83382 <_realloc_r+0x152>
   835ce:	4629      	mov	r1, r5
   835d0:	4638      	mov	r0, r7
   835d2:	f8cd c004 	str.w	ip, [sp, #4]
   835d6:	f7ff fdc3 	bl	83160 <memmove>
   835da:	f8dd c004 	ldr.w	ip, [sp, #4]
   835de:	e755      	b.n	8348c <_realloc_r+0x25c>
   835e0:	68ab      	ldr	r3, [r5, #8]
   835e2:	2a24      	cmp	r2, #36	; 0x24
   835e4:	f8ca 3010 	str.w	r3, [sl, #16]
   835e8:	68eb      	ldr	r3, [r5, #12]
   835ea:	f8ca 3014 	str.w	r3, [sl, #20]
   835ee:	d003      	beq.n	835f8 <_realloc_r+0x3c8>
   835f0:	3510      	adds	r5, #16
   835f2:	f10a 0318 	add.w	r3, sl, #24
   835f6:	e743      	b.n	83480 <_realloc_r+0x250>
   835f8:	692a      	ldr	r2, [r5, #16]
   835fa:	f10a 0320 	add.w	r3, sl, #32
   835fe:	f8ca 2018 	str.w	r2, [sl, #24]
   83602:	696a      	ldr	r2, [r5, #20]
   83604:	3518      	adds	r5, #24
   83606:	f8ca 201c 	str.w	r2, [sl, #28]
   8360a:	e739      	b.n	83480 <_realloc_r+0x250>
   8360c:	200705c8 	.word	0x200705c8

00083610 <_sbrk_r>:
   83610:	b538      	push	{r3, r4, r5, lr}
   83612:	4c07      	ldr	r4, [pc, #28]	; (83630 <_sbrk_r+0x20>)
   83614:	2300      	movs	r3, #0
   83616:	4605      	mov	r5, r0
   83618:	4608      	mov	r0, r1
   8361a:	6023      	str	r3, [r4, #0]
   8361c:	f7fd fcc0 	bl	80fa0 <_sbrk>
   83620:	1c43      	adds	r3, r0, #1
   83622:	d000      	beq.n	83626 <_sbrk_r+0x16>
   83624:	bd38      	pop	{r3, r4, r5, pc}
   83626:	6823      	ldr	r3, [r4, #0]
   83628:	2b00      	cmp	r3, #0
   8362a:	d0fb      	beq.n	83624 <_sbrk_r+0x14>
   8362c:	602b      	str	r3, [r5, #0]
   8362e:	bd38      	pop	{r3, r4, r5, pc}
   83630:	20070b54 	.word	0x20070b54

00083634 <__sread>:
   83634:	b510      	push	{r4, lr}
   83636:	460c      	mov	r4, r1
   83638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8363c:	f000 f9ea 	bl	83a14 <_read_r>
   83640:	2800      	cmp	r0, #0
   83642:	db03      	blt.n	8364c <__sread+0x18>
   83644:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83646:	4403      	add	r3, r0
   83648:	6523      	str	r3, [r4, #80]	; 0x50
   8364a:	bd10      	pop	{r4, pc}
   8364c:	89a3      	ldrh	r3, [r4, #12]
   8364e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83652:	81a3      	strh	r3, [r4, #12]
   83654:	bd10      	pop	{r4, pc}
   83656:	bf00      	nop

00083658 <__swrite>:
   83658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8365c:	460c      	mov	r4, r1
   8365e:	8989      	ldrh	r1, [r1, #12]
   83660:	461d      	mov	r5, r3
   83662:	05cb      	lsls	r3, r1, #23
   83664:	4616      	mov	r6, r2
   83666:	4607      	mov	r7, r0
   83668:	d506      	bpl.n	83678 <__swrite+0x20>
   8366a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8366e:	2200      	movs	r2, #0
   83670:	2302      	movs	r3, #2
   83672:	f000 f9bb 	bl	839ec <_lseek_r>
   83676:	89a1      	ldrh	r1, [r4, #12]
   83678:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8367c:	81a1      	strh	r1, [r4, #12]
   8367e:	4638      	mov	r0, r7
   83680:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83684:	4632      	mov	r2, r6
   83686:	462b      	mov	r3, r5
   83688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8368c:	f000 b8ce 	b.w	8382c <_write_r>

00083690 <__sseek>:
   83690:	b510      	push	{r4, lr}
   83692:	460c      	mov	r4, r1
   83694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83698:	f000 f9a8 	bl	839ec <_lseek_r>
   8369c:	89a3      	ldrh	r3, [r4, #12]
   8369e:	1c42      	adds	r2, r0, #1
   836a0:	bf0e      	itee	eq
   836a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   836a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   836aa:	6520      	strne	r0, [r4, #80]	; 0x50
   836ac:	81a3      	strh	r3, [r4, #12]
   836ae:	bd10      	pop	{r4, pc}

000836b0 <__sclose>:
   836b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   836b4:	f000 b920 	b.w	838f8 <_close_r>

000836b8 <strlen>:
   836b8:	f020 0103 	bic.w	r1, r0, #3
   836bc:	f010 0003 	ands.w	r0, r0, #3
   836c0:	f1c0 0000 	rsb	r0, r0, #0
   836c4:	f851 3b04 	ldr.w	r3, [r1], #4
   836c8:	f100 0c04 	add.w	ip, r0, #4
   836cc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   836d0:	f06f 0200 	mvn.w	r2, #0
   836d4:	bf1c      	itt	ne
   836d6:	fa22 f20c 	lsrne.w	r2, r2, ip
   836da:	4313      	orrne	r3, r2
   836dc:	f04f 0c01 	mov.w	ip, #1
   836e0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   836e4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   836e8:	eba3 020c 	sub.w	r2, r3, ip
   836ec:	ea22 0203 	bic.w	r2, r2, r3
   836f0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   836f4:	bf04      	itt	eq
   836f6:	f851 3b04 	ldreq.w	r3, [r1], #4
   836fa:	3004      	addeq	r0, #4
   836fc:	d0f4      	beq.n	836e8 <strlen+0x30>
   836fe:	f1c2 0100 	rsb	r1, r2, #0
   83702:	ea02 0201 	and.w	r2, r2, r1
   83706:	fab2 f282 	clz	r2, r2
   8370a:	f1c2 021f 	rsb	r2, r2, #31
   8370e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   83712:	4770      	bx	lr

00083714 <__swbuf_r>:
   83714:	b570      	push	{r4, r5, r6, lr}
   83716:	460d      	mov	r5, r1
   83718:	4614      	mov	r4, r2
   8371a:	4606      	mov	r6, r0
   8371c:	b110      	cbz	r0, 83724 <__swbuf_r+0x10>
   8371e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83720:	2b00      	cmp	r3, #0
   83722:	d048      	beq.n	837b6 <__swbuf_r+0xa2>
   83724:	89a2      	ldrh	r2, [r4, #12]
   83726:	69a3      	ldr	r3, [r4, #24]
   83728:	b291      	uxth	r1, r2
   8372a:	0708      	lsls	r0, r1, #28
   8372c:	60a3      	str	r3, [r4, #8]
   8372e:	d538      	bpl.n	837a2 <__swbuf_r+0x8e>
   83730:	6923      	ldr	r3, [r4, #16]
   83732:	2b00      	cmp	r3, #0
   83734:	d035      	beq.n	837a2 <__swbuf_r+0x8e>
   83736:	0489      	lsls	r1, r1, #18
   83738:	b2ed      	uxtb	r5, r5
   8373a:	d515      	bpl.n	83768 <__swbuf_r+0x54>
   8373c:	6822      	ldr	r2, [r4, #0]
   8373e:	6961      	ldr	r1, [r4, #20]
   83740:	1ad3      	subs	r3, r2, r3
   83742:	428b      	cmp	r3, r1
   83744:	da1c      	bge.n	83780 <__swbuf_r+0x6c>
   83746:	3301      	adds	r3, #1
   83748:	68a1      	ldr	r1, [r4, #8]
   8374a:	1c50      	adds	r0, r2, #1
   8374c:	3901      	subs	r1, #1
   8374e:	60a1      	str	r1, [r4, #8]
   83750:	6020      	str	r0, [r4, #0]
   83752:	7015      	strb	r5, [r2, #0]
   83754:	6962      	ldr	r2, [r4, #20]
   83756:	429a      	cmp	r2, r3
   83758:	d01a      	beq.n	83790 <__swbuf_r+0x7c>
   8375a:	89a3      	ldrh	r3, [r4, #12]
   8375c:	07db      	lsls	r3, r3, #31
   8375e:	d501      	bpl.n	83764 <__swbuf_r+0x50>
   83760:	2d0a      	cmp	r5, #10
   83762:	d015      	beq.n	83790 <__swbuf_r+0x7c>
   83764:	4628      	mov	r0, r5
   83766:	bd70      	pop	{r4, r5, r6, pc}
   83768:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8376a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8376e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   83772:	81a2      	strh	r2, [r4, #12]
   83774:	6822      	ldr	r2, [r4, #0]
   83776:	6661      	str	r1, [r4, #100]	; 0x64
   83778:	6961      	ldr	r1, [r4, #20]
   8377a:	1ad3      	subs	r3, r2, r3
   8377c:	428b      	cmp	r3, r1
   8377e:	dbe2      	blt.n	83746 <__swbuf_r+0x32>
   83780:	4630      	mov	r0, r6
   83782:	4621      	mov	r1, r4
   83784:	f7fe fd28 	bl	821d8 <_fflush_r>
   83788:	b940      	cbnz	r0, 8379c <__swbuf_r+0x88>
   8378a:	6822      	ldr	r2, [r4, #0]
   8378c:	2301      	movs	r3, #1
   8378e:	e7db      	b.n	83748 <__swbuf_r+0x34>
   83790:	4630      	mov	r0, r6
   83792:	4621      	mov	r1, r4
   83794:	f7fe fd20 	bl	821d8 <_fflush_r>
   83798:	2800      	cmp	r0, #0
   8379a:	d0e3      	beq.n	83764 <__swbuf_r+0x50>
   8379c:	f04f 30ff 	mov.w	r0, #4294967295
   837a0:	bd70      	pop	{r4, r5, r6, pc}
   837a2:	4630      	mov	r0, r6
   837a4:	4621      	mov	r1, r4
   837a6:	f7fe fc01 	bl	81fac <__swsetup_r>
   837aa:	2800      	cmp	r0, #0
   837ac:	d1f6      	bne.n	8379c <__swbuf_r+0x88>
   837ae:	89a2      	ldrh	r2, [r4, #12]
   837b0:	6923      	ldr	r3, [r4, #16]
   837b2:	b291      	uxth	r1, r2
   837b4:	e7bf      	b.n	83736 <__swbuf_r+0x22>
   837b6:	f7fe fda3 	bl	82300 <__sinit>
   837ba:	e7b3      	b.n	83724 <__swbuf_r+0x10>

000837bc <_wcrtomb_r>:
   837bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   837c0:	4605      	mov	r5, r0
   837c2:	b086      	sub	sp, #24
   837c4:	461e      	mov	r6, r3
   837c6:	460c      	mov	r4, r1
   837c8:	b1a1      	cbz	r1, 837f4 <_wcrtomb_r+0x38>
   837ca:	4b10      	ldr	r3, [pc, #64]	; (8380c <_wcrtomb_r+0x50>)
   837cc:	4617      	mov	r7, r2
   837ce:	f8d3 8000 	ldr.w	r8, [r3]
   837d2:	f7ff f8fd 	bl	829d0 <__locale_charset>
   837d6:	9600      	str	r6, [sp, #0]
   837d8:	4603      	mov	r3, r0
   837da:	4621      	mov	r1, r4
   837dc:	463a      	mov	r2, r7
   837de:	4628      	mov	r0, r5
   837e0:	47c0      	blx	r8
   837e2:	1c43      	adds	r3, r0, #1
   837e4:	d103      	bne.n	837ee <_wcrtomb_r+0x32>
   837e6:	2200      	movs	r2, #0
   837e8:	238a      	movs	r3, #138	; 0x8a
   837ea:	6032      	str	r2, [r6, #0]
   837ec:	602b      	str	r3, [r5, #0]
   837ee:	b006      	add	sp, #24
   837f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   837f4:	4b05      	ldr	r3, [pc, #20]	; (8380c <_wcrtomb_r+0x50>)
   837f6:	681f      	ldr	r7, [r3, #0]
   837f8:	f7ff f8ea 	bl	829d0 <__locale_charset>
   837fc:	9600      	str	r6, [sp, #0]
   837fe:	4603      	mov	r3, r0
   83800:	4622      	mov	r2, r4
   83802:	4628      	mov	r0, r5
   83804:	a903      	add	r1, sp, #12
   83806:	47b8      	blx	r7
   83808:	e7eb      	b.n	837e2 <_wcrtomb_r+0x26>
   8380a:	bf00      	nop
   8380c:	200709d8 	.word	0x200709d8

00083810 <__ascii_wctomb>:
   83810:	b121      	cbz	r1, 8381c <__ascii_wctomb+0xc>
   83812:	2aff      	cmp	r2, #255	; 0xff
   83814:	d804      	bhi.n	83820 <__ascii_wctomb+0x10>
   83816:	700a      	strb	r2, [r1, #0]
   83818:	2001      	movs	r0, #1
   8381a:	4770      	bx	lr
   8381c:	4608      	mov	r0, r1
   8381e:	4770      	bx	lr
   83820:	238a      	movs	r3, #138	; 0x8a
   83822:	6003      	str	r3, [r0, #0]
   83824:	f04f 30ff 	mov.w	r0, #4294967295
   83828:	4770      	bx	lr
   8382a:	bf00      	nop

0008382c <_write_r>:
   8382c:	b570      	push	{r4, r5, r6, lr}
   8382e:	4c08      	ldr	r4, [pc, #32]	; (83850 <_write_r+0x24>)
   83830:	4606      	mov	r6, r0
   83832:	2500      	movs	r5, #0
   83834:	4608      	mov	r0, r1
   83836:	4611      	mov	r1, r2
   83838:	461a      	mov	r2, r3
   8383a:	6025      	str	r5, [r4, #0]
   8383c:	f7fc ff1c 	bl	80678 <_write>
   83840:	1c43      	adds	r3, r0, #1
   83842:	d000      	beq.n	83846 <_write_r+0x1a>
   83844:	bd70      	pop	{r4, r5, r6, pc}
   83846:	6823      	ldr	r3, [r4, #0]
   83848:	2b00      	cmp	r3, #0
   8384a:	d0fb      	beq.n	83844 <_write_r+0x18>
   8384c:	6033      	str	r3, [r6, #0]
   8384e:	bd70      	pop	{r4, r5, r6, pc}
   83850:	20070b54 	.word	0x20070b54

00083854 <__register_exitproc>:
   83854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83858:	4c25      	ldr	r4, [pc, #148]	; (838f0 <__register_exitproc+0x9c>)
   8385a:	4606      	mov	r6, r0
   8385c:	6825      	ldr	r5, [r4, #0]
   8385e:	4688      	mov	r8, r1
   83860:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   83864:	4692      	mov	sl, r2
   83866:	4699      	mov	r9, r3
   83868:	b3c4      	cbz	r4, 838dc <__register_exitproc+0x88>
   8386a:	6860      	ldr	r0, [r4, #4]
   8386c:	281f      	cmp	r0, #31
   8386e:	dc17      	bgt.n	838a0 <__register_exitproc+0x4c>
   83870:	1c41      	adds	r1, r0, #1
   83872:	b176      	cbz	r6, 83892 <__register_exitproc+0x3e>
   83874:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   83878:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   8387c:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   83880:	2201      	movs	r2, #1
   83882:	4082      	lsls	r2, r0
   83884:	4315      	orrs	r5, r2
   83886:	2e02      	cmp	r6, #2
   83888:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   8388c:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   83890:	d01e      	beq.n	838d0 <__register_exitproc+0x7c>
   83892:	1c83      	adds	r3, r0, #2
   83894:	6061      	str	r1, [r4, #4]
   83896:	2000      	movs	r0, #0
   83898:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   8389c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   838a0:	4b14      	ldr	r3, [pc, #80]	; (838f4 <__register_exitproc+0xa0>)
   838a2:	b303      	cbz	r3, 838e6 <__register_exitproc+0x92>
   838a4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   838a8:	f7ff f90c 	bl	82ac4 <malloc>
   838ac:	4604      	mov	r4, r0
   838ae:	b1d0      	cbz	r0, 838e6 <__register_exitproc+0x92>
   838b0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   838b4:	2700      	movs	r7, #0
   838b6:	e884 0088 	stmia.w	r4, {r3, r7}
   838ba:	4638      	mov	r0, r7
   838bc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   838c0:	2101      	movs	r1, #1
   838c2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   838c6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   838ca:	2e00      	cmp	r6, #0
   838cc:	d0e1      	beq.n	83892 <__register_exitproc+0x3e>
   838ce:	e7d1      	b.n	83874 <__register_exitproc+0x20>
   838d0:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   838d4:	431a      	orrs	r2, r3
   838d6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   838da:	e7da      	b.n	83892 <__register_exitproc+0x3e>
   838dc:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   838e0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   838e4:	e7c1      	b.n	8386a <__register_exitproc+0x16>
   838e6:	f04f 30ff 	mov.w	r0, #4294967295
   838ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   838ee:	bf00      	nop
   838f0:	0008401c 	.word	0x0008401c
   838f4:	00082ac5 	.word	0x00082ac5

000838f8 <_close_r>:
   838f8:	b538      	push	{r3, r4, r5, lr}
   838fa:	4c07      	ldr	r4, [pc, #28]	; (83918 <_close_r+0x20>)
   838fc:	2300      	movs	r3, #0
   838fe:	4605      	mov	r5, r0
   83900:	4608      	mov	r0, r1
   83902:	6023      	str	r3, [r4, #0]
   83904:	f7fd fb66 	bl	80fd4 <_close>
   83908:	1c43      	adds	r3, r0, #1
   8390a:	d000      	beq.n	8390e <_close_r+0x16>
   8390c:	bd38      	pop	{r3, r4, r5, pc}
   8390e:	6823      	ldr	r3, [r4, #0]
   83910:	2b00      	cmp	r3, #0
   83912:	d0fb      	beq.n	8390c <_close_r+0x14>
   83914:	602b      	str	r3, [r5, #0]
   83916:	bd38      	pop	{r3, r4, r5, pc}
   83918:	20070b54 	.word	0x20070b54

0008391c <_fclose_r>:
   8391c:	2900      	cmp	r1, #0
   8391e:	d03d      	beq.n	8399c <_fclose_r+0x80>
   83920:	b570      	push	{r4, r5, r6, lr}
   83922:	4605      	mov	r5, r0
   83924:	460c      	mov	r4, r1
   83926:	b108      	cbz	r0, 8392c <_fclose_r+0x10>
   83928:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8392a:	b37b      	cbz	r3, 8398c <_fclose_r+0x70>
   8392c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83930:	b90b      	cbnz	r3, 83936 <_fclose_r+0x1a>
   83932:	2000      	movs	r0, #0
   83934:	bd70      	pop	{r4, r5, r6, pc}
   83936:	4628      	mov	r0, r5
   83938:	4621      	mov	r1, r4
   8393a:	f7fe fba9 	bl	82090 <__sflush_r>
   8393e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83940:	4606      	mov	r6, r0
   83942:	b133      	cbz	r3, 83952 <_fclose_r+0x36>
   83944:	4628      	mov	r0, r5
   83946:	69e1      	ldr	r1, [r4, #28]
   83948:	4798      	blx	r3
   8394a:	2800      	cmp	r0, #0
   8394c:	bfb8      	it	lt
   8394e:	f04f 36ff 	movlt.w	r6, #4294967295
   83952:	89a3      	ldrh	r3, [r4, #12]
   83954:	061b      	lsls	r3, r3, #24
   83956:	d41c      	bmi.n	83992 <_fclose_r+0x76>
   83958:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8395a:	b141      	cbz	r1, 8396e <_fclose_r+0x52>
   8395c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83960:	4299      	cmp	r1, r3
   83962:	d002      	beq.n	8396a <_fclose_r+0x4e>
   83964:	4628      	mov	r0, r5
   83966:	f7fe fda3 	bl	824b0 <_free_r>
   8396a:	2300      	movs	r3, #0
   8396c:	6323      	str	r3, [r4, #48]	; 0x30
   8396e:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83970:	b121      	cbz	r1, 8397c <_fclose_r+0x60>
   83972:	4628      	mov	r0, r5
   83974:	f7fe fd9c 	bl	824b0 <_free_r>
   83978:	2300      	movs	r3, #0
   8397a:	6463      	str	r3, [r4, #68]	; 0x44
   8397c:	f7fe fcc6 	bl	8230c <__sfp_lock_acquire>
   83980:	2300      	movs	r3, #0
   83982:	81a3      	strh	r3, [r4, #12]
   83984:	f7fe fcc4 	bl	82310 <__sfp_lock_release>
   83988:	4630      	mov	r0, r6
   8398a:	bd70      	pop	{r4, r5, r6, pc}
   8398c:	f7fe fcb8 	bl	82300 <__sinit>
   83990:	e7cc      	b.n	8392c <_fclose_r+0x10>
   83992:	4628      	mov	r0, r5
   83994:	6921      	ldr	r1, [r4, #16]
   83996:	f7fe fd8b 	bl	824b0 <_free_r>
   8399a:	e7dd      	b.n	83958 <_fclose_r+0x3c>
   8399c:	2000      	movs	r0, #0
   8399e:	4770      	bx	lr

000839a0 <_fstat_r>:
   839a0:	b538      	push	{r3, r4, r5, lr}
   839a2:	4c08      	ldr	r4, [pc, #32]	; (839c4 <_fstat_r+0x24>)
   839a4:	2300      	movs	r3, #0
   839a6:	4605      	mov	r5, r0
   839a8:	4608      	mov	r0, r1
   839aa:	4611      	mov	r1, r2
   839ac:	6023      	str	r3, [r4, #0]
   839ae:	f7fd fb15 	bl	80fdc <_fstat>
   839b2:	1c43      	adds	r3, r0, #1
   839b4:	d000      	beq.n	839b8 <_fstat_r+0x18>
   839b6:	bd38      	pop	{r3, r4, r5, pc}
   839b8:	6823      	ldr	r3, [r4, #0]
   839ba:	2b00      	cmp	r3, #0
   839bc:	d0fb      	beq.n	839b6 <_fstat_r+0x16>
   839be:	602b      	str	r3, [r5, #0]
   839c0:	bd38      	pop	{r3, r4, r5, pc}
   839c2:	bf00      	nop
   839c4:	20070b54 	.word	0x20070b54

000839c8 <_isatty_r>:
   839c8:	b538      	push	{r3, r4, r5, lr}
   839ca:	4c07      	ldr	r4, [pc, #28]	; (839e8 <_isatty_r+0x20>)
   839cc:	2300      	movs	r3, #0
   839ce:	4605      	mov	r5, r0
   839d0:	4608      	mov	r0, r1
   839d2:	6023      	str	r3, [r4, #0]
   839d4:	f7fd fb08 	bl	80fe8 <_isatty>
   839d8:	1c43      	adds	r3, r0, #1
   839da:	d000      	beq.n	839de <_isatty_r+0x16>
   839dc:	bd38      	pop	{r3, r4, r5, pc}
   839de:	6823      	ldr	r3, [r4, #0]
   839e0:	2b00      	cmp	r3, #0
   839e2:	d0fb      	beq.n	839dc <_isatty_r+0x14>
   839e4:	602b      	str	r3, [r5, #0]
   839e6:	bd38      	pop	{r3, r4, r5, pc}
   839e8:	20070b54 	.word	0x20070b54

000839ec <_lseek_r>:
   839ec:	b570      	push	{r4, r5, r6, lr}
   839ee:	4c08      	ldr	r4, [pc, #32]	; (83a10 <_lseek_r+0x24>)
   839f0:	4606      	mov	r6, r0
   839f2:	2500      	movs	r5, #0
   839f4:	4608      	mov	r0, r1
   839f6:	4611      	mov	r1, r2
   839f8:	461a      	mov	r2, r3
   839fa:	6025      	str	r5, [r4, #0]
   839fc:	f7fd faf6 	bl	80fec <_lseek>
   83a00:	1c43      	adds	r3, r0, #1
   83a02:	d000      	beq.n	83a06 <_lseek_r+0x1a>
   83a04:	bd70      	pop	{r4, r5, r6, pc}
   83a06:	6823      	ldr	r3, [r4, #0]
   83a08:	2b00      	cmp	r3, #0
   83a0a:	d0fb      	beq.n	83a04 <_lseek_r+0x18>
   83a0c:	6033      	str	r3, [r6, #0]
   83a0e:	bd70      	pop	{r4, r5, r6, pc}
   83a10:	20070b54 	.word	0x20070b54

00083a14 <_read_r>:
   83a14:	b570      	push	{r4, r5, r6, lr}
   83a16:	4c08      	ldr	r4, [pc, #32]	; (83a38 <_read_r+0x24>)
   83a18:	4606      	mov	r6, r0
   83a1a:	2500      	movs	r5, #0
   83a1c:	4608      	mov	r0, r1
   83a1e:	4611      	mov	r1, r2
   83a20:	461a      	mov	r2, r3
   83a22:	6025      	str	r5, [r4, #0]
   83a24:	f7fc fb94 	bl	80150 <_read>
   83a28:	1c43      	adds	r3, r0, #1
   83a2a:	d000      	beq.n	83a2e <_read_r+0x1a>
   83a2c:	bd70      	pop	{r4, r5, r6, pc}
   83a2e:	6823      	ldr	r3, [r4, #0]
   83a30:	2b00      	cmp	r3, #0
   83a32:	d0fb      	beq.n	83a2c <_read_r+0x18>
   83a34:	6033      	str	r3, [r6, #0]
   83a36:	bd70      	pop	{r4, r5, r6, pc}
   83a38:	20070b54 	.word	0x20070b54

00083a3c <__aeabi_uldivmod>:
   83a3c:	b953      	cbnz	r3, 83a54 <__aeabi_uldivmod+0x18>
   83a3e:	b94a      	cbnz	r2, 83a54 <__aeabi_uldivmod+0x18>
   83a40:	2900      	cmp	r1, #0
   83a42:	bf08      	it	eq
   83a44:	2800      	cmpeq	r0, #0
   83a46:	bf1c      	itt	ne
   83a48:	f04f 31ff 	movne.w	r1, #4294967295
   83a4c:	f04f 30ff 	movne.w	r0, #4294967295
   83a50:	f000 b83c 	b.w	83acc <__aeabi_idiv0>
   83a54:	b082      	sub	sp, #8
   83a56:	46ec      	mov	ip, sp
   83a58:	e92d 5000 	stmdb	sp!, {ip, lr}
   83a5c:	f000 f81e 	bl	83a9c <__gnu_uldivmod_helper>
   83a60:	f8dd e004 	ldr.w	lr, [sp, #4]
   83a64:	b002      	add	sp, #8
   83a66:	bc0c      	pop	{r2, r3}
   83a68:	4770      	bx	lr
   83a6a:	bf00      	nop

00083a6c <__gnu_ldivmod_helper>:
   83a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83a70:	9c06      	ldr	r4, [sp, #24]
   83a72:	4690      	mov	r8, r2
   83a74:	4606      	mov	r6, r0
   83a76:	460f      	mov	r7, r1
   83a78:	461d      	mov	r5, r3
   83a7a:	f000 f829 	bl	83ad0 <__divdi3>
   83a7e:	fb08 fc01 	mul.w	ip, r8, r1
   83a82:	fba8 2300 	umull	r2, r3, r8, r0
   83a86:	fb00 c505 	mla	r5, r0, r5, ip
   83a8a:	1ab2      	subs	r2, r6, r2
   83a8c:	442b      	add	r3, r5
   83a8e:	eb67 0303 	sbc.w	r3, r7, r3
   83a92:	4686      	mov	lr, r0
   83a94:	e9c4 2300 	strd	r2, r3, [r4]
   83a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083a9c <__gnu_uldivmod_helper>:
   83a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83aa0:	9e08      	ldr	r6, [sp, #32]
   83aa2:	4617      	mov	r7, r2
   83aa4:	4680      	mov	r8, r0
   83aa6:	4689      	mov	r9, r1
   83aa8:	461d      	mov	r5, r3
   83aaa:	f000 f967 	bl	83d7c <__udivdi3>
   83aae:	fb00 f305 	mul.w	r3, r0, r5
   83ab2:	fba0 4507 	umull	r4, r5, r0, r7
   83ab6:	fb07 3701 	mla	r7, r7, r1, r3
   83aba:	ebb8 0404 	subs.w	r4, r8, r4
   83abe:	443d      	add	r5, r7
   83ac0:	eb69 0505 	sbc.w	r5, r9, r5
   83ac4:	e9c6 4500 	strd	r4, r5, [r6]
   83ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00083acc <__aeabi_idiv0>:
   83acc:	4770      	bx	lr
   83ace:	bf00      	nop

00083ad0 <__divdi3>:
   83ad0:	2900      	cmp	r1, #0
   83ad2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83ad6:	f2c0 80a8 	blt.w	83c2a <__divdi3+0x15a>
   83ada:	2600      	movs	r6, #0
   83adc:	2b00      	cmp	r3, #0
   83ade:	f2c0 809e 	blt.w	83c1e <__divdi3+0x14e>
   83ae2:	4681      	mov	r9, r0
   83ae4:	468e      	mov	lr, r1
   83ae6:	4690      	mov	r8, r2
   83ae8:	469c      	mov	ip, r3
   83aea:	4617      	mov	r7, r2
   83aec:	4604      	mov	r4, r0
   83aee:	460d      	mov	r5, r1
   83af0:	2b00      	cmp	r3, #0
   83af2:	d13d      	bne.n	83b70 <__divdi3+0xa0>
   83af4:	428a      	cmp	r2, r1
   83af6:	d959      	bls.n	83bac <__divdi3+0xdc>
   83af8:	fab2 f382 	clz	r3, r2
   83afc:	b13b      	cbz	r3, 83b0e <__divdi3+0x3e>
   83afe:	f1c3 0220 	rsb	r2, r3, #32
   83b02:	409d      	lsls	r5, r3
   83b04:	fa20 f202 	lsr.w	r2, r0, r2
   83b08:	409f      	lsls	r7, r3
   83b0a:	4315      	orrs	r5, r2
   83b0c:	409c      	lsls	r4, r3
   83b0e:	0c39      	lsrs	r1, r7, #16
   83b10:	fbb5 f0f1 	udiv	r0, r5, r1
   83b14:	fa1f fe87 	uxth.w	lr, r7
   83b18:	fb01 5510 	mls	r5, r1, r0, r5
   83b1c:	fb0e f300 	mul.w	r3, lr, r0
   83b20:	0c22      	lsrs	r2, r4, #16
   83b22:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
   83b26:	42ab      	cmp	r3, r5
   83b28:	d909      	bls.n	83b3e <__divdi3+0x6e>
   83b2a:	19ed      	adds	r5, r5, r7
   83b2c:	f100 32ff 	add.w	r2, r0, #4294967295
   83b30:	f080 810b 	bcs.w	83d4a <__divdi3+0x27a>
   83b34:	42ab      	cmp	r3, r5
   83b36:	f240 8108 	bls.w	83d4a <__divdi3+0x27a>
   83b3a:	3802      	subs	r0, #2
   83b3c:	443d      	add	r5, r7
   83b3e:	1aed      	subs	r5, r5, r3
   83b40:	fbb5 f3f1 	udiv	r3, r5, r1
   83b44:	fb01 5513 	mls	r5, r1, r3, r5
   83b48:	fb0e fe03 	mul.w	lr, lr, r3
   83b4c:	b2a4      	uxth	r4, r4
   83b4e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   83b52:	45ae      	cmp	lr, r5
   83b54:	d908      	bls.n	83b68 <__divdi3+0x98>
   83b56:	19ed      	adds	r5, r5, r7
   83b58:	f103 32ff 	add.w	r2, r3, #4294967295
   83b5c:	f080 80f7 	bcs.w	83d4e <__divdi3+0x27e>
   83b60:	45ae      	cmp	lr, r5
   83b62:	f240 80f4 	bls.w	83d4e <__divdi3+0x27e>
   83b66:	3b02      	subs	r3, #2
   83b68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   83b6c:	2200      	movs	r2, #0
   83b6e:	e003      	b.n	83b78 <__divdi3+0xa8>
   83b70:	428b      	cmp	r3, r1
   83b72:	d90f      	bls.n	83b94 <__divdi3+0xc4>
   83b74:	2200      	movs	r2, #0
   83b76:	4613      	mov	r3, r2
   83b78:	1c34      	adds	r4, r6, #0
   83b7a:	bf18      	it	ne
   83b7c:	2401      	movne	r4, #1
   83b7e:	4260      	negs	r0, r4
   83b80:	f04f 0500 	mov.w	r5, #0
   83b84:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
   83b88:	4058      	eors	r0, r3
   83b8a:	4051      	eors	r1, r2
   83b8c:	1900      	adds	r0, r0, r4
   83b8e:	4169      	adcs	r1, r5
   83b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83b94:	fab3 f283 	clz	r2, r3
   83b98:	2a00      	cmp	r2, #0
   83b9a:	f040 8089 	bne.w	83cb0 <__divdi3+0x1e0>
   83b9e:	428b      	cmp	r3, r1
   83ba0:	d302      	bcc.n	83ba8 <__divdi3+0xd8>
   83ba2:	4580      	cmp	r8, r0
   83ba4:	f200 80e2 	bhi.w	83d6c <__divdi3+0x29c>
   83ba8:	2301      	movs	r3, #1
   83baa:	e7e5      	b.n	83b78 <__divdi3+0xa8>
   83bac:	b912      	cbnz	r2, 83bb4 <__divdi3+0xe4>
   83bae:	2301      	movs	r3, #1
   83bb0:	fbb3 f7f2 	udiv	r7, r3, r2
   83bb4:	fab7 f887 	clz	r8, r7
   83bb8:	f1b8 0f00 	cmp.w	r8, #0
   83bbc:	d13b      	bne.n	83c36 <__divdi3+0x166>
   83bbe:	1bed      	subs	r5, r5, r7
   83bc0:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83bc4:	fa1f fe87 	uxth.w	lr, r7
   83bc8:	2201      	movs	r2, #1
   83bca:	fbb5 f0fc 	udiv	r0, r5, ip
   83bce:	fb0c 5510 	mls	r5, ip, r0, r5
   83bd2:	fb0e f300 	mul.w	r3, lr, r0
   83bd6:	0c21      	lsrs	r1, r4, #16
   83bd8:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
   83bdc:	42ab      	cmp	r3, r5
   83bde:	d907      	bls.n	83bf0 <__divdi3+0x120>
   83be0:	19ed      	adds	r5, r5, r7
   83be2:	f100 31ff 	add.w	r1, r0, #4294967295
   83be6:	d202      	bcs.n	83bee <__divdi3+0x11e>
   83be8:	42ab      	cmp	r3, r5
   83bea:	f200 80c3 	bhi.w	83d74 <__divdi3+0x2a4>
   83bee:	4608      	mov	r0, r1
   83bf0:	1aed      	subs	r5, r5, r3
   83bf2:	fbb5 f3fc 	udiv	r3, r5, ip
   83bf6:	fb0c 5513 	mls	r5, ip, r3, r5
   83bfa:	fb0e fe03 	mul.w	lr, lr, r3
   83bfe:	b2a4      	uxth	r4, r4
   83c00:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   83c04:	45ae      	cmp	lr, r5
   83c06:	d907      	bls.n	83c18 <__divdi3+0x148>
   83c08:	19ed      	adds	r5, r5, r7
   83c0a:	f103 31ff 	add.w	r1, r3, #4294967295
   83c0e:	d202      	bcs.n	83c16 <__divdi3+0x146>
   83c10:	45ae      	cmp	lr, r5
   83c12:	f200 80ad 	bhi.w	83d70 <__divdi3+0x2a0>
   83c16:	460b      	mov	r3, r1
   83c18:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   83c1c:	e7ac      	b.n	83b78 <__divdi3+0xa8>
   83c1e:	4252      	negs	r2, r2
   83c20:	ea6f 0606 	mvn.w	r6, r6
   83c24:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83c28:	e75b      	b.n	83ae2 <__divdi3+0x12>
   83c2a:	4240      	negs	r0, r0
   83c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83c30:	f04f 36ff 	mov.w	r6, #4294967295
   83c34:	e752      	b.n	83adc <__divdi3+0xc>
   83c36:	fa07 f708 	lsl.w	r7, r7, r8
   83c3a:	f1c8 0220 	rsb	r2, r8, #32
   83c3e:	fa25 f302 	lsr.w	r3, r5, r2
   83c42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83c46:	fbb3 f1fc 	udiv	r1, r3, ip
   83c4a:	fa1f fe87 	uxth.w	lr, r7
   83c4e:	fb0c 3311 	mls	r3, ip, r1, r3
   83c52:	fa24 f202 	lsr.w	r2, r4, r2
   83c56:	fa05 f508 	lsl.w	r5, r5, r8
   83c5a:	fb0e f901 	mul.w	r9, lr, r1
   83c5e:	432a      	orrs	r2, r5
   83c60:	0c10      	lsrs	r0, r2, #16
   83c62:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   83c66:	4599      	cmp	r9, r3
   83c68:	fa04 f408 	lsl.w	r4, r4, r8
   83c6c:	d907      	bls.n	83c7e <__divdi3+0x1ae>
   83c6e:	19db      	adds	r3, r3, r7
   83c70:	f101 30ff 	add.w	r0, r1, #4294967295
   83c74:	d278      	bcs.n	83d68 <__divdi3+0x298>
   83c76:	4599      	cmp	r9, r3
   83c78:	d976      	bls.n	83d68 <__divdi3+0x298>
   83c7a:	3902      	subs	r1, #2
   83c7c:	443b      	add	r3, r7
   83c7e:	ebc9 0303 	rsb	r3, r9, r3
   83c82:	fbb3 f0fc 	udiv	r0, r3, ip
   83c86:	fb0c 3310 	mls	r3, ip, r0, r3
   83c8a:	fb0e f500 	mul.w	r5, lr, r0
   83c8e:	b292      	uxth	r2, r2
   83c90:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   83c94:	429d      	cmp	r5, r3
   83c96:	d907      	bls.n	83ca8 <__divdi3+0x1d8>
   83c98:	19db      	adds	r3, r3, r7
   83c9a:	f100 32ff 	add.w	r2, r0, #4294967295
   83c9e:	d25f      	bcs.n	83d60 <__divdi3+0x290>
   83ca0:	429d      	cmp	r5, r3
   83ca2:	d95d      	bls.n	83d60 <__divdi3+0x290>
   83ca4:	3802      	subs	r0, #2
   83ca6:	443b      	add	r3, r7
   83ca8:	1b5d      	subs	r5, r3, r5
   83caa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
   83cae:	e78c      	b.n	83bca <__divdi3+0xfa>
   83cb0:	f1c2 0320 	rsb	r3, r2, #32
   83cb4:	fa28 f103 	lsr.w	r1, r8, r3
   83cb8:	fa0c fc02 	lsl.w	ip, ip, r2
   83cbc:	ea41 0c0c 	orr.w	ip, r1, ip
   83cc0:	ea4f 401c 	mov.w	r0, ip, lsr #16
   83cc4:	fa2e f103 	lsr.w	r1, lr, r3
   83cc8:	fbb1 f5f0 	udiv	r5, r1, r0
   83ccc:	fa1f f78c 	uxth.w	r7, ip
   83cd0:	fb00 1115 	mls	r1, r0, r5, r1
   83cd4:	fa29 f303 	lsr.w	r3, r9, r3
   83cd8:	fa0e fe02 	lsl.w	lr, lr, r2
   83cdc:	fb07 f905 	mul.w	r9, r7, r5
   83ce0:	ea43 0e0e 	orr.w	lr, r3, lr
   83ce4:	ea4f 431e 	mov.w	r3, lr, lsr #16
   83ce8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   83cec:	4589      	cmp	r9, r1
   83cee:	fa08 f802 	lsl.w	r8, r8, r2
   83cf2:	d908      	bls.n	83d06 <__divdi3+0x236>
   83cf4:	eb11 010c 	adds.w	r1, r1, ip
   83cf8:	f105 33ff 	add.w	r3, r5, #4294967295
   83cfc:	d232      	bcs.n	83d64 <__divdi3+0x294>
   83cfe:	4589      	cmp	r9, r1
   83d00:	d930      	bls.n	83d64 <__divdi3+0x294>
   83d02:	3d02      	subs	r5, #2
   83d04:	4461      	add	r1, ip
   83d06:	ebc9 0101 	rsb	r1, r9, r1
   83d0a:	fbb1 f3f0 	udiv	r3, r1, r0
   83d0e:	fb00 1113 	mls	r1, r0, r3, r1
   83d12:	fb07 f703 	mul.w	r7, r7, r3
   83d16:	fa1f fe8e 	uxth.w	lr, lr
   83d1a:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   83d1e:	4577      	cmp	r7, lr
   83d20:	d908      	bls.n	83d34 <__divdi3+0x264>
   83d22:	eb1e 0e0c 	adds.w	lr, lr, ip
   83d26:	f103 31ff 	add.w	r1, r3, #4294967295
   83d2a:	d217      	bcs.n	83d5c <__divdi3+0x28c>
   83d2c:	4577      	cmp	r7, lr
   83d2e:	d915      	bls.n	83d5c <__divdi3+0x28c>
   83d30:	3b02      	subs	r3, #2
   83d32:	44e6      	add	lr, ip
   83d34:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   83d38:	fba3 8908 	umull	r8, r9, r3, r8
   83d3c:	ebc7 0e0e 	rsb	lr, r7, lr
   83d40:	45ce      	cmp	lr, r9
   83d42:	d309      	bcc.n	83d58 <__divdi3+0x288>
   83d44:	d005      	beq.n	83d52 <__divdi3+0x282>
   83d46:	2200      	movs	r2, #0
   83d48:	e716      	b.n	83b78 <__divdi3+0xa8>
   83d4a:	4610      	mov	r0, r2
   83d4c:	e6f7      	b.n	83b3e <__divdi3+0x6e>
   83d4e:	4613      	mov	r3, r2
   83d50:	e70a      	b.n	83b68 <__divdi3+0x98>
   83d52:	4094      	lsls	r4, r2
   83d54:	4544      	cmp	r4, r8
   83d56:	d2f6      	bcs.n	83d46 <__divdi3+0x276>
   83d58:	3b01      	subs	r3, #1
   83d5a:	e7f4      	b.n	83d46 <__divdi3+0x276>
   83d5c:	460b      	mov	r3, r1
   83d5e:	e7e9      	b.n	83d34 <__divdi3+0x264>
   83d60:	4610      	mov	r0, r2
   83d62:	e7a1      	b.n	83ca8 <__divdi3+0x1d8>
   83d64:	461d      	mov	r5, r3
   83d66:	e7ce      	b.n	83d06 <__divdi3+0x236>
   83d68:	4601      	mov	r1, r0
   83d6a:	e788      	b.n	83c7e <__divdi3+0x1ae>
   83d6c:	4613      	mov	r3, r2
   83d6e:	e703      	b.n	83b78 <__divdi3+0xa8>
   83d70:	3b02      	subs	r3, #2
   83d72:	e751      	b.n	83c18 <__divdi3+0x148>
   83d74:	3802      	subs	r0, #2
   83d76:	443d      	add	r5, r7
   83d78:	e73a      	b.n	83bf0 <__divdi3+0x120>
   83d7a:	bf00      	nop

00083d7c <__udivdi3>:
   83d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83d80:	2b00      	cmp	r3, #0
   83d82:	d144      	bne.n	83e0e <__udivdi3+0x92>
   83d84:	428a      	cmp	r2, r1
   83d86:	4615      	mov	r5, r2
   83d88:	4604      	mov	r4, r0
   83d8a:	d94f      	bls.n	83e2c <__udivdi3+0xb0>
   83d8c:	fab2 f782 	clz	r7, r2
   83d90:	460e      	mov	r6, r1
   83d92:	b14f      	cbz	r7, 83da8 <__udivdi3+0x2c>
   83d94:	f1c7 0320 	rsb	r3, r7, #32
   83d98:	40b9      	lsls	r1, r7
   83d9a:	fa20 f603 	lsr.w	r6, r0, r3
   83d9e:	fa02 f507 	lsl.w	r5, r2, r7
   83da2:	430e      	orrs	r6, r1
   83da4:	fa00 f407 	lsl.w	r4, r0, r7
   83da8:	0c2f      	lsrs	r7, r5, #16
   83daa:	fbb6 f0f7 	udiv	r0, r6, r7
   83dae:	fa1f fe85 	uxth.w	lr, r5
   83db2:	fb07 6210 	mls	r2, r7, r0, r6
   83db6:	fb0e f100 	mul.w	r1, lr, r0
   83dba:	0c26      	lsrs	r6, r4, #16
   83dbc:	ea46 4302 	orr.w	r3, r6, r2, lsl #16
   83dc0:	4299      	cmp	r1, r3
   83dc2:	d909      	bls.n	83dd8 <__udivdi3+0x5c>
   83dc4:	195b      	adds	r3, r3, r5
   83dc6:	f100 32ff 	add.w	r2, r0, #4294967295
   83dca:	f080 80ee 	bcs.w	83faa <__udivdi3+0x22e>
   83dce:	4299      	cmp	r1, r3
   83dd0:	f240 80eb 	bls.w	83faa <__udivdi3+0x22e>
   83dd4:	3802      	subs	r0, #2
   83dd6:	442b      	add	r3, r5
   83dd8:	1a59      	subs	r1, r3, r1
   83dda:	fbb1 f3f7 	udiv	r3, r1, r7
   83dde:	fb07 1113 	mls	r1, r7, r3, r1
   83de2:	fb0e fe03 	mul.w	lr, lr, r3
   83de6:	b2a4      	uxth	r4, r4
   83de8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   83dec:	458e      	cmp	lr, r1
   83dee:	d908      	bls.n	83e02 <__udivdi3+0x86>
   83df0:	1949      	adds	r1, r1, r5
   83df2:	f103 32ff 	add.w	r2, r3, #4294967295
   83df6:	f080 80da 	bcs.w	83fae <__udivdi3+0x232>
   83dfa:	458e      	cmp	lr, r1
   83dfc:	f240 80d7 	bls.w	83fae <__udivdi3+0x232>
   83e00:	3b02      	subs	r3, #2
   83e02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   83e06:	2600      	movs	r6, #0
   83e08:	4631      	mov	r1, r6
   83e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83e0e:	428b      	cmp	r3, r1
   83e10:	d847      	bhi.n	83ea2 <__udivdi3+0x126>
   83e12:	fab3 f683 	clz	r6, r3
   83e16:	2e00      	cmp	r6, #0
   83e18:	d148      	bne.n	83eac <__udivdi3+0x130>
   83e1a:	428b      	cmp	r3, r1
   83e1c:	d302      	bcc.n	83e24 <__udivdi3+0xa8>
   83e1e:	4282      	cmp	r2, r0
   83e20:	f200 80cf 	bhi.w	83fc2 <__udivdi3+0x246>
   83e24:	2001      	movs	r0, #1
   83e26:	4631      	mov	r1, r6
   83e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83e2c:	b912      	cbnz	r2, 83e34 <__udivdi3+0xb8>
   83e2e:	2501      	movs	r5, #1
   83e30:	fbb5 f5f2 	udiv	r5, r5, r2
   83e34:	fab5 fc85 	clz	ip, r5
   83e38:	f1bc 0f00 	cmp.w	ip, #0
   83e3c:	d178      	bne.n	83f30 <__udivdi3+0x1b4>
   83e3e:	1b49      	subs	r1, r1, r5
   83e40:	0c2f      	lsrs	r7, r5, #16
   83e42:	fa1f fe85 	uxth.w	lr, r5
   83e46:	2601      	movs	r6, #1
   83e48:	fbb1 f0f7 	udiv	r0, r1, r7
   83e4c:	fb07 1110 	mls	r1, r7, r0, r1
   83e50:	fb0e f200 	mul.w	r2, lr, r0
   83e54:	0c23      	lsrs	r3, r4, #16
   83e56:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   83e5a:	428a      	cmp	r2, r1
   83e5c:	d907      	bls.n	83e6e <__udivdi3+0xf2>
   83e5e:	1949      	adds	r1, r1, r5
   83e60:	f100 33ff 	add.w	r3, r0, #4294967295
   83e64:	d202      	bcs.n	83e6c <__udivdi3+0xf0>
   83e66:	428a      	cmp	r2, r1
   83e68:	f200 80bc 	bhi.w	83fe4 <__udivdi3+0x268>
   83e6c:	4618      	mov	r0, r3
   83e6e:	1a89      	subs	r1, r1, r2
   83e70:	fbb1 f3f7 	udiv	r3, r1, r7
   83e74:	fb07 1113 	mls	r1, r7, r3, r1
   83e78:	fb0e fe03 	mul.w	lr, lr, r3
   83e7c:	b2a4      	uxth	r4, r4
   83e7e:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   83e82:	4596      	cmp	lr, r2
   83e84:	d908      	bls.n	83e98 <__udivdi3+0x11c>
   83e86:	1952      	adds	r2, r2, r5
   83e88:	f103 31ff 	add.w	r1, r3, #4294967295
   83e8c:	f080 8091 	bcs.w	83fb2 <__udivdi3+0x236>
   83e90:	4596      	cmp	lr, r2
   83e92:	f240 808e 	bls.w	83fb2 <__udivdi3+0x236>
   83e96:	3b02      	subs	r3, #2
   83e98:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   83e9c:	4631      	mov	r1, r6
   83e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83ea2:	2600      	movs	r6, #0
   83ea4:	4630      	mov	r0, r6
   83ea6:	4631      	mov	r1, r6
   83ea8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83eac:	f1c6 0420 	rsb	r4, r6, #32
   83eb0:	fa22 f504 	lsr.w	r5, r2, r4
   83eb4:	40b3      	lsls	r3, r6
   83eb6:	432b      	orrs	r3, r5
   83eb8:	fa21 f704 	lsr.w	r7, r1, r4
   83ebc:	ea4f 4813 	mov.w	r8, r3, lsr #16
   83ec0:	fbb7 fcf8 	udiv	ip, r7, r8
   83ec4:	fa1f f983 	uxth.w	r9, r3
   83ec8:	fb08 771c 	mls	r7, r8, ip, r7
   83ecc:	fa20 fe04 	lsr.w	lr, r0, r4
   83ed0:	fa01 f506 	lsl.w	r5, r1, r6
   83ed4:	fb09 f40c 	mul.w	r4, r9, ip
   83ed8:	ea4e 0505 	orr.w	r5, lr, r5
   83edc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   83ee0:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
   83ee4:	42bc      	cmp	r4, r7
   83ee6:	fa02 f206 	lsl.w	r2, r2, r6
   83eea:	d904      	bls.n	83ef6 <__udivdi3+0x17a>
   83eec:	18ff      	adds	r7, r7, r3
   83eee:	f10c 31ff 	add.w	r1, ip, #4294967295
   83ef2:	d368      	bcc.n	83fc6 <__udivdi3+0x24a>
   83ef4:	468c      	mov	ip, r1
   83ef6:	1b3f      	subs	r7, r7, r4
   83ef8:	fbb7 f4f8 	udiv	r4, r7, r8
   83efc:	fb08 7714 	mls	r7, r8, r4, r7
   83f00:	fb09 f904 	mul.w	r9, r9, r4
   83f04:	b2ad      	uxth	r5, r5
   83f06:	ea45 4107 	orr.w	r1, r5, r7, lsl #16
   83f0a:	4589      	cmp	r9, r1
   83f0c:	d904      	bls.n	83f18 <__udivdi3+0x19c>
   83f0e:	18c9      	adds	r1, r1, r3
   83f10:	f104 35ff 	add.w	r5, r4, #4294967295
   83f14:	d35d      	bcc.n	83fd2 <__udivdi3+0x256>
   83f16:	462c      	mov	r4, r5
   83f18:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
   83f1c:	fba4 2302 	umull	r2, r3, r4, r2
   83f20:	ebc9 0101 	rsb	r1, r9, r1
   83f24:	4299      	cmp	r1, r3
   83f26:	d349      	bcc.n	83fbc <__udivdi3+0x240>
   83f28:	d045      	beq.n	83fb6 <__udivdi3+0x23a>
   83f2a:	4620      	mov	r0, r4
   83f2c:	2600      	movs	r6, #0
   83f2e:	e76b      	b.n	83e08 <__udivdi3+0x8c>
   83f30:	f1cc 0420 	rsb	r4, ip, #32
   83f34:	fa05 f50c 	lsl.w	r5, r5, ip
   83f38:	fa21 f304 	lsr.w	r3, r1, r4
   83f3c:	0c2a      	lsrs	r2, r5, #16
   83f3e:	fbb3 f6f2 	udiv	r6, r3, r2
   83f42:	fa1f fe85 	uxth.w	lr, r5
   83f46:	fb02 3816 	mls	r8, r2, r6, r3
   83f4a:	fa20 f704 	lsr.w	r7, r0, r4
   83f4e:	fa01 f10c 	lsl.w	r1, r1, ip
   83f52:	fb0e f906 	mul.w	r9, lr, r6
   83f56:	430f      	orrs	r7, r1
   83f58:	0c3c      	lsrs	r4, r7, #16
   83f5a:	ea44 4308 	orr.w	r3, r4, r8, lsl #16
   83f5e:	4599      	cmp	r9, r3
   83f60:	fa00 f40c 	lsl.w	r4, r0, ip
   83f64:	d907      	bls.n	83f76 <__udivdi3+0x1fa>
   83f66:	195b      	adds	r3, r3, r5
   83f68:	f106 31ff 	add.w	r1, r6, #4294967295
   83f6c:	d238      	bcs.n	83fe0 <__udivdi3+0x264>
   83f6e:	4599      	cmp	r9, r3
   83f70:	d936      	bls.n	83fe0 <__udivdi3+0x264>
   83f72:	3e02      	subs	r6, #2
   83f74:	442b      	add	r3, r5
   83f76:	ebc9 0303 	rsb	r3, r9, r3
   83f7a:	fbb3 f0f2 	udiv	r0, r3, r2
   83f7e:	fb02 3310 	mls	r3, r2, r0, r3
   83f82:	fb0e f100 	mul.w	r1, lr, r0
   83f86:	b2bf      	uxth	r7, r7
   83f88:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   83f8c:	4299      	cmp	r1, r3
   83f8e:	d907      	bls.n	83fa0 <__udivdi3+0x224>
   83f90:	195b      	adds	r3, r3, r5
   83f92:	f100 37ff 	add.w	r7, r0, #4294967295
   83f96:	d221      	bcs.n	83fdc <__udivdi3+0x260>
   83f98:	4299      	cmp	r1, r3
   83f9a:	d91f      	bls.n	83fdc <__udivdi3+0x260>
   83f9c:	3802      	subs	r0, #2
   83f9e:	442b      	add	r3, r5
   83fa0:	4617      	mov	r7, r2
   83fa2:	1a59      	subs	r1, r3, r1
   83fa4:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   83fa8:	e74e      	b.n	83e48 <__udivdi3+0xcc>
   83faa:	4610      	mov	r0, r2
   83fac:	e714      	b.n	83dd8 <__udivdi3+0x5c>
   83fae:	4613      	mov	r3, r2
   83fb0:	e727      	b.n	83e02 <__udivdi3+0x86>
   83fb2:	460b      	mov	r3, r1
   83fb4:	e770      	b.n	83e98 <__udivdi3+0x11c>
   83fb6:	40b0      	lsls	r0, r6
   83fb8:	4290      	cmp	r0, r2
   83fba:	d2b6      	bcs.n	83f2a <__udivdi3+0x1ae>
   83fbc:	1e60      	subs	r0, r4, #1
   83fbe:	2600      	movs	r6, #0
   83fc0:	e722      	b.n	83e08 <__udivdi3+0x8c>
   83fc2:	4630      	mov	r0, r6
   83fc4:	e720      	b.n	83e08 <__udivdi3+0x8c>
   83fc6:	42bc      	cmp	r4, r7
   83fc8:	d994      	bls.n	83ef4 <__udivdi3+0x178>
   83fca:	f1ac 0c02 	sub.w	ip, ip, #2
   83fce:	441f      	add	r7, r3
   83fd0:	e791      	b.n	83ef6 <__udivdi3+0x17a>
   83fd2:	4589      	cmp	r9, r1
   83fd4:	d99f      	bls.n	83f16 <__udivdi3+0x19a>
   83fd6:	3c02      	subs	r4, #2
   83fd8:	4419      	add	r1, r3
   83fda:	e79d      	b.n	83f18 <__udivdi3+0x19c>
   83fdc:	4638      	mov	r0, r7
   83fde:	e7df      	b.n	83fa0 <__udivdi3+0x224>
   83fe0:	460e      	mov	r6, r1
   83fe2:	e7c8      	b.n	83f76 <__udivdi3+0x1fa>
   83fe4:	3802      	subs	r0, #2
   83fe6:	4429      	add	r1, r5
   83fe8:	e741      	b.n	83e6e <__udivdi3+0xf2>
   83fea:	bf00      	nop
   83fec:	736e6f43 	.word	0x736e6f43
   83ff0:	20656c6f 	.word	0x20656c6f
   83ff4:	64616572 	.word	0x64616572
   83ff8:	00000a79 	.word	0x00000a79
   83ffc:	3d3d3d3d 	.word	0x3d3d3d3d
   84000:	3d3d3d3d 	.word	0x3d3d3d3d
   84004:	3d3d3d3d 	.word	0x3d3d3d3d
   84008:	00000a3d 	.word	0x00000a3d
   8400c:	706d6153 	.word	0x706d6153
   84010:	203a656c 	.word	0x203a656c
   84014:	000a6425 	.word	0x000a6425
   84018:	00000043 	.word	0x00000043

0008401c <_global_impure_ptr>:
   8401c:	20070178                                x.. 

00084020 <zeroes.6869>:
   84020:	30303030 30303030 30303030 30303030     0000000000000000
   84030:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   84040:	00000000 33323130 37363534 62613938     ....0123456789ab
   84050:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00084060 <blanks.6868>:
   84060:	20202020 20202020 20202020 20202020                     

00084070 <_init>:
   84070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84072:	bf00      	nop
   84074:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84076:	bc08      	pop	{r3}
   84078:	469e      	mov	lr, r3
   8407a:	4770      	bx	lr

0008407c <__init_array_start>:
   8407c:	00082071 	.word	0x00082071

00084080 <__frame_dummy_init_array_entry>:
   84080:	00080119                                ....

00084084 <_fini>:
   84084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84086:	bf00      	nop
   84088:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8408a:	bc08      	pop	{r3}
   8408c:	469e      	mov	lr, r3
   8408e:	4770      	bx	lr

00084090 <__fini_array_start>:
   84090:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070170 	.word	0x20070170

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <pin_table>:
2007012c:	5c390908 57585900 67005500 00003b68     ..9\.YXW.U.gh;..
2007013c:	00000000 0e3a0000 6261600f 07696663     ......:..`abcfi.
2007014c:	4342416a 47464544 14134948 50515253     jABCDEFGHI..SRQP
2007015c:	4c4d4e4f 18102e35 04061617 32310203     ONML5.........12
2007016c:	00013433                                         34

2007016e <g_interrupt_enabled>:
2007016e:	09000001                                         ..

20070170 <SystemCoreClock>:
20070170:	003d0900 00000000                       ..=.....

20070178 <impure_data>:
20070178:	00000000 20070464 200704cc 20070534     ....d.. ... 4.. 
	...
200701ac:	00084018 00000000 00000000 00000000     .@..............
	...
20070220:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070230:	0005deec 0000000b 00000000 00000000     ................
	...

200705a0 <_impure_ptr>:
200705a0:	20070178                                x.. 

200705a4 <lc_ctype_charset>:
200705a4:	49435341 00000049 00000000 00000000     ASCII...........
	...

200705c4 <__mb_cur_max>:
200705c4:	00000001                                ....

200705c8 <__malloc_av_>:
	...
200705d0:	200705c8 200705c8 200705d0 200705d0     ... ... ... ... 
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 
200709a0:	20070998 20070998 200709a0 200709a0     ... ... ... ... 
200709b0:	200709a8 200709a8 200709b0 200709b0     ... ... ... ... 
200709c0:	200709b8 200709b8 200709c0 200709c0     ... ... ... ... 

200709d0 <__malloc_trim_threshold>:
200709d0:	00020000                                ....

200709d4 <__malloc_sbrk_base>:
200709d4:	ffffffff                                ....

200709d8 <__wctomb>:
200709d8:	00083811                                .8..
